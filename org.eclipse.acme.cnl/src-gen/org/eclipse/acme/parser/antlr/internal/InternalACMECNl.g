/*
 * generated by Xtext 2.21.0
 */
grammar InternalACMECNl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.eclipse.acme.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.acme.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.acme.services.ACMECNlGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private ACMECNlGrammarAccess grammarAccess;

    public InternalACMECNlParser(TokenStream input, ACMECNlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ConstrainedNaturalLanguageRules";
   	}

   	@Override
   	protected ACMECNlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConstrainedNaturalLanguageRules
entryRuleConstrainedNaturalLanguageRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstrainedNaturalLanguageRulesRule()); }
	iv_ruleConstrainedNaturalLanguageRules=ruleConstrainedNaturalLanguageRules
	{ $current=$iv_ruleConstrainedNaturalLanguageRules.current; }
	EOF;

// Rule ConstrainedNaturalLanguageRules
ruleConstrainedNaturalLanguageRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstrainedNaturalLanguageRulesAccess().getRulesScopedRulesParserRuleCall_0_0_0());
					}
					lv_rules_0_1=ruleScopedRules
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstrainedNaturalLanguageRulesRule());
						}
						add(
							$current,
							"rules",
							lv_rules_0_1,
							"org.eclipse.acme.ACMECNl.ScopedRules");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getConstrainedNaturalLanguageRulesAccess().getRulesMatchScopedRuleParserRuleCall_0_0_1());
					}
					lv_rules_0_2=ruleMatchScopedRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstrainedNaturalLanguageRulesRule());
						}
						add(
							$current,
							"rules",
							lv_rules_0_2,
							"org.eclipse.acme.ACMECNl.MatchScopedRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getConstrainedNaturalLanguageRulesAccess().getMetadataMetaDataParserRuleCall_1_0());
				}
				lv_metadata_1_0=ruleMetaData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstrainedNaturalLanguageRulesRule());
					}
					add(
						$current,
						"metadata",
						lv_metadata_1_0,
						"org.eclipse.acme.ACMECNl.MetaData");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleScopedRules
entryRuleScopedRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopedRulesRule()); }
	iv_ruleScopedRules=ruleScopedRules
	{ $current=$iv_ruleScopedRules.current; }
	EOF;

// Rule ScopedRules
ruleScopedRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						otherlv_0='for'
						{
							newLeafNode(otherlv_0, grammarAccess.getScopedRulesAccess().getForKeyword_0_0_0_0_0());
						}
						otherlv_1='all'
						{
							newLeafNode(otherlv_1, grammarAccess.getScopedRulesAccess().getAllKeyword_0_0_0_0_1());
						}
					)
					    |
					otherlv_2='in'
					{
						newLeafNode(otherlv_2, grammarAccess.getScopedRulesAccess().getInKeyword_0_0_0_1());
					}
					    |
					(
						otherlv_3='in'
						{
							newLeafNode(otherlv_3, grammarAccess.getScopedRulesAccess().getInKeyword_0_0_0_2_0());
						}
						(
							otherlv_4='a'
							{
								newLeafNode(otherlv_4, grammarAccess.getScopedRulesAccess().getAKeyword_0_0_0_2_1_0());
							}
							    |
							otherlv_5='an'
							{
								newLeafNode(otherlv_5, grammarAccess.getScopedRulesAccess().getAnKeyword_0_0_0_2_1_1());
							}
						)
					)
					    |
					(
						otherlv_6='all'
						{
							newLeafNode(otherlv_6, grammarAccess.getScopedRulesAccess().getAllKeyword_0_0_0_3_0());
						}
						otherlv_7='of'
						{
							newLeafNode(otherlv_7, grammarAccess.getScopedRulesAccess().getOfKeyword_0_0_0_3_1());
						}
						otherlv_8='the'
						{
							newLeafNode(otherlv_8, grammarAccess.getScopedRulesAccess().getTheKeyword_0_0_0_3_2());
						}
						otherlv_9='following'
						{
							newLeafNode(otherlv_9, grammarAccess.getScopedRulesAccess().getFollowingKeyword_0_0_0_3_3());
						}
						otherlv_10='are'
						{
							newLeafNode(otherlv_10, grammarAccess.getScopedRulesAccess().getAreKeyword_0_0_0_3_4());
						}
						(
							(
								otherlv_11='mandatory'
								{
									newLeafNode(otherlv_11, grammarAccess.getScopedRulesAccess().getMandatoryKeyword_0_0_0_3_5_0_0());
								}
								otherlv_12='for'
								{
									newLeafNode(otherlv_12, grammarAccess.getScopedRulesAccess().getForKeyword_0_0_0_3_5_0_1());
								}
							)
							    |
							(
								otherlv_13='required'
								{
									newLeafNode(otherlv_13, grammarAccess.getScopedRulesAccess().getRequiredKeyword_0_0_0_3_5_1_0());
								}
								otherlv_14='for'
								{
									newLeafNode(otherlv_14, grammarAccess.getScopedRulesAccess().getForKeyword_0_0_0_3_5_1_1());
								}
							)
							    |
							(
								otherlv_15='needed'
								{
									newLeafNode(otherlv_15, grammarAccess.getScopedRulesAccess().getNeededKeyword_0_0_0_3_5_2_0());
								}
								otherlv_16='for'
								{
									newLeafNode(otherlv_16, grammarAccess.getScopedRulesAccess().getForKeyword_0_0_0_3_5_2_1());
								}
							)
							    |
							(
								otherlv_17='obligatory'
								{
									newLeafNode(otherlv_17, grammarAccess.getScopedRulesAccess().getObligatoryKeyword_0_0_0_3_5_3_0());
								}
								otherlv_18='for'
								{
									newLeafNode(otherlv_18, grammarAccess.getScopedRulesAccess().getForKeyword_0_0_0_3_5_3_1());
								}
							)
							    |
							(
								otherlv_19='mandatory'
								{
									newLeafNode(otherlv_19, grammarAccess.getScopedRulesAccess().getMandatoryKeyword_0_0_0_3_5_4_0());
								}
								otherlv_20='in'
								{
									newLeafNode(otherlv_20, grammarAccess.getScopedRulesAccess().getInKeyword_0_0_0_3_5_4_1());
								}
							)
							    |
							(
								otherlv_21='required'
								{
									newLeafNode(otherlv_21, grammarAccess.getScopedRulesAccess().getRequiredKeyword_0_0_0_3_5_5_0());
								}
								otherlv_22='in'
								{
									newLeafNode(otherlv_22, grammarAccess.getScopedRulesAccess().getInKeyword_0_0_0_3_5_5_1());
								}
							)
							    |
							(
								otherlv_23='needed'
								{
									newLeafNode(otherlv_23, grammarAccess.getScopedRulesAccess().getNeededKeyword_0_0_0_3_5_6_0());
								}
								otherlv_24='in'
								{
									newLeafNode(otherlv_24, grammarAccess.getScopedRulesAccess().getInKeyword_0_0_0_3_5_6_1());
								}
							)
							    |
							(
								otherlv_25='obligatory'
								{
									newLeafNode(otherlv_25, grammarAccess.getScopedRulesAccess().getObligatoryKeyword_0_0_0_3_5_7_0());
								}
								otherlv_26='in'
								{
									newLeafNode(otherlv_26, grammarAccess.getScopedRulesAccess().getInKeyword_0_0_0_3_5_7_1());
								}
							)
						)
						(
							otherlv_27='a'
							{
								newLeafNode(otherlv_27, grammarAccess.getScopedRulesAccess().getAKeyword_0_0_0_3_6());
							}
						)?
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getScopedRulesAccess().getScopeElementScopeParserRuleCall_0_0_1_0());
						}
						lv_scope_28_0=ruleElementScope
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getScopedRulesRule());
							}
							set(
								$current,
								"scope",
								lv_scope_28_0,
								"org.eclipse.acme.ACMECNl.ElementScope");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					otherlv_29='a'
					{
						newLeafNode(otherlv_29, grammarAccess.getScopedRulesAccess().getAKeyword_0_1_0_0());
					}
					    |
					otherlv_30='an'
					{
						newLeafNode(otherlv_30, grammarAccess.getScopedRulesAccess().getAnKeyword_0_1_0_1());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getScopedRulesAccess().getScopeElementScopeParserRuleCall_0_1_1_0());
						}
						lv_scope_31_0=ruleElementScope
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getScopedRulesRule());
							}
							set(
								$current,
								"scope",
								lv_scope_31_0,
								"org.eclipse.acme.ACMECNl.ElementScope");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_32='is'
				{
					newLeafNode(otherlv_32, grammarAccess.getScopedRulesAccess().getIsKeyword_0_1_2());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScopedRulesAccess().getRulesRuleParserRuleCall_1_0());
				}
				lv_rules_33_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScopedRulesRule());
					}
					add(
						$current,
						"rules",
						lv_rules_33_0,
						"org.eclipse.acme.ACMECNl.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleMatchScopedRule
entryRuleMatchScopedRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchScopedRuleRule()); }
	iv_ruleMatchScopedRule=ruleMatchScopedRule
	{ $current=$iv_ruleMatchScopedRule.current; }
	EOF;

// Rule MatchScopedRule
ruleMatchScopedRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='find'
		{
			newLeafNode(otherlv_0, grammarAccess.getMatchScopedRuleAccess().getFindKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchScopedRuleAccess().getMatchesMatchingRuleParserRuleCall_1_0());
				}
				lv_matches_1_0=ruleMatchingRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchScopedRuleRule());
					}
					add(
						$current,
						"matches",
						lv_matches_1_0,
						"org.eclipse.acme.ACMECNl.MatchingRule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getMatchScopedRuleAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchScopedRuleAccess().getRuleRuleParserRuleCall_3_0());
				}
				lv_rule_3_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchScopedRuleRule());
					}
					set(
						$current,
						"rule",
						lv_rule_3_0,
						"org.eclipse.acme.ACMECNl.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMatchingRule
entryRuleMatchingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchingRuleRule()); }
	iv_ruleMatchingRule=ruleMatchingRule
	{ $current=$iv_ruleMatchingRule.current; }
	EOF;

// Rule MatchingRule
ruleMatchingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_variableName_0_0=RULE_ID
					{
						newLeafNode(lv_variableName_0_0, grammarAccess.getMatchingRuleAccess().getVariableNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMatchingRuleRule());
						}
						setWithLastConsumed(
							$current,
							"variableName",
							lv_variableName_0_0,
							"org.eclipse.acme.ACMECNl.ID");
					}
				)
			)
			otherlv_1='in'
			{
				newLeafNode(otherlv_1, grammarAccess.getMatchingRuleAccess().getInKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMatchingRuleAccess().getScopeElementScopeParserRuleCall_0_2_0());
					}
					lv_scope_2_0=ruleElementScope
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMatchingRuleRule());
						}
						set(
							$current,
							"scope",
							lv_scope_2_0,
							"org.eclipse.acme.ACMECNl.ElementScope");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='where'
			{
				newLeafNode(otherlv_3, grammarAccess.getMatchingRuleAccess().getWhereKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMatchingRuleAccess().getAstRootLogicalExpressionParserRuleCall_0_4_0());
					}
					lv_astRoot_4_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMatchingRuleRule());
						}
						set(
							$current,
							"astRoot",
							lv_astRoot_4_0,
							"org.eclipse.acme.ACMECNl.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_5='all'
			{
				newLeafNode(otherlv_5, grammarAccess.getMatchingRuleAccess().getAllKeyword_1_0());
			}
			otherlv_6='data'
			{
				newLeafNode(otherlv_6, grammarAccess.getMatchingRuleAccess().getDataKeyword_1_1());
			}
			otherlv_7='in'
			{
				newLeafNode(otherlv_7, grammarAccess.getMatchingRuleAccess().getInKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMatchingRuleAccess().getScopeElementScopeParserRuleCall_1_3_0());
					}
					lv_scope_8_0=ruleElementScope
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMatchingRuleRule());
						}
						set(
							$current,
							"scope",
							lv_scope_8_0,
							"org.eclipse.acme.ACMECNl.ElementScope");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9='where'
			{
				newLeafNode(otherlv_9, grammarAccess.getMatchingRuleAccess().getWhereKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMatchingRuleAccess().getAstRootLogicalExpressionParserRuleCall_1_5_0());
					}
					lv_astRoot_10_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMatchingRuleRule());
						}
						set(
							$current,
							"astRoot",
							lv_astRoot_10_0,
							"org.eclipse.acme.ACMECNl.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleElementScope
entryRuleElementScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementScopeRule()); }
	iv_ruleElementScope=ruleElementScope
	{ $current=$iv_ruleElementScope.current; }
	EOF;

// Rule ElementScope
ruleElementScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getElementScopeRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getElementScopeAccess().getTypeTypeCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRuleAccess().getCNLRuleParserRuleCall_0());
		}
		this_CNLRule_0=ruleCNLRule
		{
			$current = $this_CNLRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRuleAccess().getGPLRuleParserRuleCall_1());
		}
		this_GPLRule_1=ruleGPLRule
		{
			$current = $this_GPLRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCNLRule
entryRuleCNLRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCNLRuleRule()); }
	iv_ruleCNLRule=ruleCNLRule
	{ $current=$iv_ruleCNLRule.current; }
	EOF;

// Rule CNLRule
ruleCNLRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='rule'
			{
				newLeafNode(otherlv_0, grammarAccess.getCNLRuleAccess().getRuleKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getCNLRuleAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCNLRuleRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.acme.ACMECNl.ID");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCNLRuleAccess().getAstRootLogicalExpressionParserRuleCall_1_0());
				}
				lv_astRoot_2_0=ruleLogicalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCNLRuleRule());
					}
					set(
						$current,
						"astRoot",
						lv_astRoot_2_0,
						"org.eclipse.acme.ACMECNl.LogicalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_3='error'
				{
					newLeafNode(otherlv_3, grammarAccess.getCNLRuleAccess().getErrorKeyword_2_0());
				}
			)?
			otherlv_4='message'
			{
				newLeafNode(otherlv_4, grammarAccess.getCNLRuleAccess().getMessageKeyword_2_1());
			}
			(
				(
					lv_message_5_0=RULE_STRING
					{
						newLeafNode(lv_message_5_0, grammarAccess.getCNLRuleAccess().getMessageSTRINGTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCNLRuleRule());
						}
						setWithLastConsumed(
							$current,
							"message",
							lv_message_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleGPLRule
entryRuleGPLRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGPLRuleRule()); }
	iv_ruleGPLRule=ruleGPLRule
	{ $current=$iv_ruleGPLRule.current; }
	EOF;

// Rule GPLRule
ruleGPLRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getGPLRuleAccess().getEOLExpressionRuleParserRuleCall());
	}
	this_EOLExpressionRule_0=ruleEOLExpressionRule
	{
		$current = $this_EOLExpressionRule_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEOLExpressionRule
entryRuleEOLExpressionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEOLExpressionRuleRule()); }
	iv_ruleEOLExpressionRule=ruleEOLExpressionRule
	{ $current=$iv_ruleEOLExpressionRule.current; }
	EOF;

// Rule EOLExpressionRule
ruleEOLExpressionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='rule'
			{
				newLeafNode(otherlv_0, grammarAccess.getEOLExpressionRuleAccess().getRuleKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getEOLExpressionRuleAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEOLExpressionRuleRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.acme.ACMECNl.ID");
					}
				)
			)
		)?
		otherlv_2='<EOLExpression>'
		{
			newLeafNode(otherlv_2, grammarAccess.getEOLExpressionRuleAccess().getEOLExpressionKeyword_1());
		}
		(
			(
				lv_code_3_0=RULE_STRING
				{
					newLeafNode(lv_code_3_0, grammarAccess.getEOLExpressionRuleAccess().getCodeSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEOLExpressionRuleRule());
					}
					setWithLastConsumed(
						$current,
						"code",
						lv_code_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='</EOLExpression>'
		{
			newLeafNode(otherlv_4, grammarAccess.getEOLExpressionRuleAccess().getEOLExpressionKeyword_3());
		}
		(
			(
				otherlv_5='error'
				{
					newLeafNode(otherlv_5, grammarAccess.getEOLExpressionRuleAccess().getErrorKeyword_4_0());
				}
			)?
			otherlv_6='message'
			{
				newLeafNode(otherlv_6, grammarAccess.getEOLExpressionRuleAccess().getMessageKeyword_4_1());
			}
			(
				(
					lv_message_7_0=RULE_STRING
					{
						newLeafNode(lv_message_7_0, grammarAccess.getEOLExpressionRuleAccess().getMessageSTRINGTerminalRuleCall_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEOLExpressionRuleRule());
						}
						setWithLastConsumed(
							$current,
							"message",
							lv_message_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	iv_ruleLogicalExpression=ruleLogicalExpression
	{ $current=$iv_ruleLogicalExpression.current; }
	EOF;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getLogicalExpressionAccess().getComparisonExpressionParserRuleCall_0_0());
			}
			this_ComparisonExpression_0=ruleComparisonExpression
			{
				$current = $this_ComparisonExpression_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalExpressionAccess().getImpliesExpressionLhsAction_0_1_0_0(),
								$current);
						}
					)
					(
						otherlv_2='implies'
						{
							newLeafNode(otherlv_2, grammarAccess.getLogicalExpressionAccess().getImpliesKeyword_0_1_0_1_0());
						}
						    |
						(
							otherlv_3='only'
							{
								newLeafNode(otherlv_3, grammarAccess.getLogicalExpressionAccess().getOnlyKeyword_0_1_0_1_1_0());
							}
							otherlv_4='if'
							{
								newLeafNode(otherlv_4, grammarAccess.getLogicalExpressionAccess().getIfKeyword_0_1_0_1_1_1());
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRhsComparisonExpressionParserRuleCall_0_1_0_2_0());
							}
							lv_rhs_5_0=ruleComparisonExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_5_0,
									"org.eclipse.acme.ACMECNl.ComparisonExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalExpressionAccess().getImpliesExpressionRhsAction_0_1_1_0(),
								$current);
						}
					)
					(
						otherlv_7='when'
						{
							newLeafNode(otherlv_7, grammarAccess.getLogicalExpressionAccess().getWhenKeyword_0_1_1_1_0());
						}
						    |
						otherlv_8='if'
						{
							newLeafNode(otherlv_8, grammarAccess.getLogicalExpressionAccess().getIfKeyword_0_1_1_1_1());
						}
						    |
						otherlv_9='where'
						{
							newLeafNode(otherlv_9, grammarAccess.getLogicalExpressionAccess().getWhereKeyword_0_1_1_1_2());
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLhsComparisonExpressionParserRuleCall_0_1_1_2_0());
							}
							lv_lhs_10_0=ruleComparisonExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
								}
								set(
									$current,
									"lhs",
									lv_lhs_10_0,
									"org.eclipse.acme.ACMECNl.ComparisonExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalExpressionAccess().getOrExpressionLhsAction_0_1_2_0(),
								$current);
						}
					)
					otherlv_12='or'
					{
						newLeafNode(otherlv_12, grammarAccess.getLogicalExpressionAccess().getOrKeyword_0_1_2_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRhsComparisonExpressionParserRuleCall_0_1_2_2_0());
							}
							lv_rhs_13_0=ruleComparisonExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_13_0,
									"org.eclipse.acme.ACMECNl.ComparisonExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalExpressionAccess().getXorExpressionLhsAction_0_1_3_0(),
								$current);
						}
					)
					otherlv_15='xor'
					{
						newLeafNode(otherlv_15, grammarAccess.getLogicalExpressionAccess().getXorKeyword_0_1_3_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRhsComparisonExpressionParserRuleCall_0_1_3_2_0());
							}
							lv_rhs_16_0=ruleComparisonExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_16_0,
									"org.eclipse.acme.ACMECNl.ComparisonExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalExpressionAccess().getAndExpressionLhsAction_0_1_4_0(),
								$current);
						}
					)
					otherlv_18='and'
					{
						newLeafNode(otherlv_18, grammarAccess.getLogicalExpressionAccess().getAndKeyword_0_1_4_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRhsComparisonExpressionParserRuleCall_0_1_4_2_0());
							}
							lv_rhs_19_0=ruleComparisonExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_19_0,
									"org.eclipse.acme.ACMECNl.ComparisonExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicalExpressionAccess().getIfandonlyifExpressionLhsAction_0_1_5_0(),
								$current);
						}
					)
					(
						otherlv_21='iff'
						{
							newLeafNode(otherlv_21, grammarAccess.getLogicalExpressionAccess().getIffKeyword_0_1_5_1_0());
						}
						    |
						(
							otherlv_22='if'
							{
								newLeafNode(otherlv_22, grammarAccess.getLogicalExpressionAccess().getIfKeyword_0_1_5_1_1_0());
							}
							otherlv_23='and'
							{
								newLeafNode(otherlv_23, grammarAccess.getLogicalExpressionAccess().getAndKeyword_0_1_5_1_1_1());
							}
							otherlv_24='only'
							{
								newLeafNode(otherlv_24, grammarAccess.getLogicalExpressionAccess().getOnlyKeyword_0_1_5_1_1_2());
							}
							otherlv_25='if'
							{
								newLeafNode(otherlv_25, grammarAccess.getLogicalExpressionAccess().getIfKeyword_0_1_5_1_1_3());
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRhsComparisonExpressionParserRuleCall_0_1_5_2_0());
							}
							lv_rhs_26_0=ruleComparisonExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_26_0,
									"org.eclipse.acme.ACMECNl.ComparisonExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)*
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getLogicalExpressionAccess().getImpliesExpressionAction_1_0(),
						$current);
				}
			)
			(
				otherlv_28='if'
				{
					newLeafNode(otherlv_28, grammarAccess.getLogicalExpressionAccess().getIfKeyword_1_1_0());
				}
				    |
				otherlv_29='when'
				{
					newLeafNode(otherlv_29, grammarAccess.getLogicalExpressionAccess().getWhenKeyword_1_1_1());
				}
			)
			(
				otherlv_30='the'
				{
					newLeafNode(otherlv_30, grammarAccess.getLogicalExpressionAccess().getTheKeyword_1_2());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLhsLogicalExpressionParserRuleCall_1_3_0());
					}
					lv_lhs_31_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_31_0,
							"org.eclipse.acme.ACMECNl.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_32='then'
			{
				newLeafNode(otherlv_32, grammarAccess.getLogicalExpressionAccess().getThenKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRhsLogicalExpressionParserRuleCall_1_5_0());
					}
					lv_rhs_33_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_33_0,
							"org.eclipse.acme.ACMECNl.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getLogicalExpressionAccess().getXorExpressionAction_2_0(),
						$current);
				}
			)
			otherlv_35='either'
			{
				newLeafNode(otherlv_35, grammarAccess.getLogicalExpressionAccess().getEitherKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLhsLogicalExpressionParserRuleCall_2_2_0());
					}
					lv_lhs_36_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_36_0,
							"org.eclipse.acme.ACMECNl.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_37='or'
			{
				newLeafNode(otherlv_37, grammarAccess.getLogicalExpressionAccess().getOrKeyword_2_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRhsLogicalExpressionParserRuleCall_2_4_0());
					}
					lv_rhs_38_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_38_0,
							"org.eclipse.acme.ACMECNl.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getDateExpressionParserRuleCall_0());
		}
		this_DateExpression_0=ruleDateExpression
		{
			$current = $this_DateExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getComparisonExpressionAccess().getArithmeticExpressionParserRuleCall_1_0());
			}
			this_ArithmeticExpression_1=ruleArithmeticExpression
			{
				$current = $this_ArithmeticExpression_1.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getEqualityExpressionLhsAction_1_1_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsExistanceValueParserRuleCall_1_1_0_1_0());
							}
							lv_rhs_3_0=ruleExistanceValue
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_3_0,
									"org.eclipse.acme.ACMECNl.ExistanceValue");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getNegatedEqualityExpressionLhsAction_1_1_1_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsEmptyValueParserRuleCall_1_1_1_1_0());
							}
							lv_rhs_5_0=ruleEmptyValue
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_5_0,
									"org.eclipse.acme.ACMECNl.EmptyValue");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getEqualityExpressionLhsAction_1_1_2_0(),
								$current);
						}
					)
					(
						otherlv_7='equals'
						{
							newLeafNode(otherlv_7, grammarAccess.getComparisonExpressionAccess().getEqualsKeyword_1_1_2_1_0());
						}
						    |
						otherlv_8='is'
						{
							newLeafNode(otherlv_8, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_2_1_1());
						}
						    |
						(
							otherlv_9='must'
							{
								newLeafNode(otherlv_9, grammarAccess.getComparisonExpressionAccess().getMustKeyword_1_1_2_1_2_0());
							}
							otherlv_10='be'
							{
								newLeafNode(otherlv_10, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_2_1_2_1());
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsArithmeticExpressionParserRuleCall_1_1_2_2_0());
							}
							lv_rhs_11_0=ruleArithmeticExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_11_0,
									"org.eclipse.acme.ACMECNl.ArithmeticExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getNegatedEqualityExpressionLhsAction_1_1_3_0(),
								$current);
						}
					)
					(
						(
							otherlv_13='is'
							{
								newLeafNode(otherlv_13, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_3_1_0_0());
							}
							otherlv_14='not'
							{
								newLeafNode(otherlv_14, grammarAccess.getComparisonExpressionAccess().getNotKeyword_1_1_3_1_0_1());
							}
						)
						    |
						(
							otherlv_15='cannot'
							{
								newLeafNode(otherlv_15, grammarAccess.getComparisonExpressionAccess().getCannotKeyword_1_1_3_1_1_0());
							}
							otherlv_16='be'
							{
								newLeafNode(otherlv_16, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_3_1_1_1());
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsArithmeticExpressionParserRuleCall_1_1_3_2_0());
							}
							lv_rhs_17_0=ruleArithmeticExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_17_0,
									"org.eclipse.acme.ACMECNl.ArithmeticExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getGreaterThanExpressionLhsAction_1_1_4_0(),
								$current);
						}
					)
					(
						(
							(
								otherlv_19='must'
								{
									newLeafNode(otherlv_19, grammarAccess.getComparisonExpressionAccess().getMustKeyword_1_1_4_1_0_0_0());
								}
								otherlv_20='be'
								{
									newLeafNode(otherlv_20, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_4_1_0_0_1());
								}
							)
							    |
							otherlv_21='is'
							{
								newLeafNode(otherlv_21, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_4_1_0_1());
							}
						)
						otherlv_22='greater'
						{
							newLeafNode(otherlv_22, grammarAccess.getComparisonExpressionAccess().getGreaterKeyword_1_1_4_1_1());
						}
						otherlv_23='than'
						{
							newLeafNode(otherlv_23, grammarAccess.getComparisonExpressionAccess().getThanKeyword_1_1_4_1_2());
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsArithmeticExpressionParserRuleCall_1_1_4_2_0());
							}
							lv_rhs_24_0=ruleArithmeticExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_24_0,
									"org.eclipse.acme.ACMECNl.ArithmeticExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getLessThanExpressionLhsAction_1_1_5_0(),
								$current);
						}
					)
					(
						(
							(
								otherlv_26='must'
								{
									newLeafNode(otherlv_26, grammarAccess.getComparisonExpressionAccess().getMustKeyword_1_1_5_1_0_0_0());
								}
								otherlv_27='be'
								{
									newLeafNode(otherlv_27, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_5_1_0_0_1());
								}
							)
							    |
							otherlv_28='is'
							{
								newLeafNode(otherlv_28, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_5_1_0_1());
							}
						)
						otherlv_29='less'
						{
							newLeafNode(otherlv_29, grammarAccess.getComparisonExpressionAccess().getLessKeyword_1_1_5_1_1());
						}
						otherlv_30='than'
						{
							newLeafNode(otherlv_30, grammarAccess.getComparisonExpressionAccess().getThanKeyword_1_1_5_1_2());
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsArithmeticExpressionParserRuleCall_1_1_5_2_0());
							}
							lv_rhs_31_0=ruleArithmeticExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_31_0,
									"org.eclipse.acme.ACMECNl.ArithmeticExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getGTEExpressionLhsAction_1_1_6_0(),
								$current);
						}
					)
					(
						(
							(
								(
									otherlv_33='must'
									{
										newLeafNode(otherlv_33, grammarAccess.getComparisonExpressionAccess().getMustKeyword_1_1_6_1_0_0_0_0());
									}
									otherlv_34='be'
									{
										newLeafNode(otherlv_34, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_6_1_0_0_0_1());
									}
								)
								    |
								otherlv_35='is'
								{
									newLeafNode(otherlv_35, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_6_1_0_0_1());
								}
							)
							otherlv_36='greater'
							{
								newLeafNode(otherlv_36, grammarAccess.getComparisonExpressionAccess().getGreaterKeyword_1_1_6_1_0_1());
							}
							otherlv_37='than'
							{
								newLeafNode(otherlv_37, grammarAccess.getComparisonExpressionAccess().getThanKeyword_1_1_6_1_0_2());
							}
							otherlv_38='or'
							{
								newLeafNode(otherlv_38, grammarAccess.getComparisonExpressionAccess().getOrKeyword_1_1_6_1_0_3());
							}
							otherlv_39='equal'
							{
								newLeafNode(otherlv_39, grammarAccess.getComparisonExpressionAccess().getEqualKeyword_1_1_6_1_0_4());
							}
							otherlv_40='to'
							{
								newLeafNode(otherlv_40, grammarAccess.getComparisonExpressionAccess().getToKeyword_1_1_6_1_0_5());
							}
						)
						    |
						(
							(
								(
									otherlv_41='must'
									{
										newLeafNode(otherlv_41, grammarAccess.getComparisonExpressionAccess().getMustKeyword_1_1_6_1_1_0_0_0());
									}
									otherlv_42='be'
									{
										newLeafNode(otherlv_42, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_6_1_1_0_0_1());
									}
								)
								    |
								otherlv_43='is'
								{
									newLeafNode(otherlv_43, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_6_1_1_0_1());
								}
							)
							otherlv_44='greater'
							{
								newLeafNode(otherlv_44, grammarAccess.getComparisonExpressionAccess().getGreaterKeyword_1_1_6_1_1_1());
							}
							otherlv_45='than'
							{
								newLeafNode(otherlv_45, grammarAccess.getComparisonExpressionAccess().getThanKeyword_1_1_6_1_1_2());
							}
							otherlv_46='or'
							{
								newLeafNode(otherlv_46, grammarAccess.getComparisonExpressionAccess().getOrKeyword_1_1_6_1_1_3());
							}
							otherlv_47='equals'
							{
								newLeafNode(otherlv_47, grammarAccess.getComparisonExpressionAccess().getEqualsKeyword_1_1_6_1_1_4());
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsArithmeticExpressionParserRuleCall_1_1_6_2_0());
							}
							lv_rhs_48_0=ruleArithmeticExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_48_0,
									"org.eclipse.acme.ACMECNl.ArithmeticExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonExpressionAccess().getLTEExpressionLhsAction_1_1_7_0(),
								$current);
						}
					)
					(
						(
							(
								(
									otherlv_50='must'
									{
										newLeafNode(otherlv_50, grammarAccess.getComparisonExpressionAccess().getMustKeyword_1_1_7_1_0_0_0_0());
									}
									otherlv_51='be'
									{
										newLeafNode(otherlv_51, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_7_1_0_0_0_1());
									}
								)
								    |
								otherlv_52='is'
								{
									newLeafNode(otherlv_52, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_7_1_0_0_1());
								}
							)
							otherlv_53='less'
							{
								newLeafNode(otherlv_53, grammarAccess.getComparisonExpressionAccess().getLessKeyword_1_1_7_1_0_1());
							}
							otherlv_54='than'
							{
								newLeafNode(otherlv_54, grammarAccess.getComparisonExpressionAccess().getThanKeyword_1_1_7_1_0_2());
							}
							otherlv_55='or'
							{
								newLeafNode(otherlv_55, grammarAccess.getComparisonExpressionAccess().getOrKeyword_1_1_7_1_0_3());
							}
							otherlv_56='equal'
							{
								newLeafNode(otherlv_56, grammarAccess.getComparisonExpressionAccess().getEqualKeyword_1_1_7_1_0_4());
							}
							otherlv_57='to'
							{
								newLeafNode(otherlv_57, grammarAccess.getComparisonExpressionAccess().getToKeyword_1_1_7_1_0_5());
							}
						)
						    |
						(
							(
								(
									otherlv_58='must'
									{
										newLeafNode(otherlv_58, grammarAccess.getComparisonExpressionAccess().getMustKeyword_1_1_7_1_1_0_0_0());
									}
									otherlv_59='be'
									{
										newLeafNode(otherlv_59, grammarAccess.getComparisonExpressionAccess().getBeKeyword_1_1_7_1_1_0_0_1());
									}
								)
								    |
								otherlv_60='is'
								{
									newLeafNode(otherlv_60, grammarAccess.getComparisonExpressionAccess().getIsKeyword_1_1_7_1_1_0_1());
								}
							)
							otherlv_61='less'
							{
								newLeafNode(otherlv_61, grammarAccess.getComparisonExpressionAccess().getLessKeyword_1_1_7_1_1_1());
							}
							otherlv_62='than'
							{
								newLeafNode(otherlv_62, grammarAccess.getComparisonExpressionAccess().getThanKeyword_1_1_7_1_1_2());
							}
							otherlv_63='or'
							{
								newLeafNode(otherlv_63, grammarAccess.getComparisonExpressionAccess().getOrKeyword_1_1_7_1_1_3());
							}
							otherlv_64='equals'
							{
								newLeafNode(otherlv_64, grammarAccess.getComparisonExpressionAccess().getEqualsKeyword_1_1_7_1_1_4());
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsArithmeticExpressionParserRuleCall_1_1_7_2_0());
							}
							lv_rhs_65_0=ruleArithmeticExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_65_0,
									"org.eclipse.acme.ACMECNl.ArithmeticExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	iv_ruleArithmeticExpression=ruleArithmeticExpression
	{ $current=$iv_ruleArithmeticExpression.current; }
	EOF;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getBaseExpressionParserRuleCall_0());
		}
		this_BaseExpression_0=ruleBaseExpression
		{
			$current = $this_BaseExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getArithmeticExpressionAccess().getArithmeticExpressionLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getTypeArithmeticOperationsEnumRuleCall_1_1_0());
					}
					lv_type_2_0=ruleArithmeticOperations
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticExpressionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"org.eclipse.acme.ACMECNl.ArithmeticOperations");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getRhsBaseExpressionParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBaseExpression
entryRuleBaseExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseExpressionRule()); }
	iv_ruleBaseExpression=ruleBaseExpression
	{ $current=$iv_ruleBaseExpression.current; }
	EOF;

// Rule BaseExpression
ruleBaseExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getTypeExpressionParserRuleCall_0());
		}
		this_TypeExpression_0=ruleTypeExpression
		{
			$current = $this_TypeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getEmptyValueParserRuleCall_1());
		}
		this_EmptyValue_1=ruleEmptyValue
		{
			$current = $this_EmptyValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getStringValueParserRuleCall_2());
		}
		this_StringValue_2=ruleStringValue
		{
			$current = $this_StringValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getEnumValueParserRuleCall_3());
		}
		this_EnumValue_3=ruleEnumValue
		{
			$current = $this_EnumValue_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getFeatureValueParserRuleCall_4());
		}
		this_FeatureValue_4=ruleFeatureValue
		{
			$current = $this_FeatureValue_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getUnscopedFeatureValueParserRuleCall_5());
		}
		this_UnscopedFeatureValue_5=ruleUnscopedFeatureValue
		{
			$current = $this_UnscopedFeatureValue_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getVariableFeatureValueParserRuleCall_6());
		}
		this_VariableFeatureValue_6=ruleVariableFeatureValue
		{
			$current = $this_VariableFeatureValue_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getIntegerValueParserRuleCall_7());
		}
		this_IntegerValue_7=ruleIntegerValue
		{
			$current = $this_IntegerValue_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getDecimalValueParserRuleCall_8());
		}
		this_DecimalValue_8=ruleDecimalValue
		{
			$current = $this_DecimalValue_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getDateValueParserRuleCall_9());
		}
		this_DateValue_9=ruleDateValue
		{
			$current = $this_DateValue_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getNumericAggregationParserRuleCall_10());
		}
		this_NumericAggregation_10=ruleNumericAggregation
		{
			$current = $this_NumericAggregation_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getBooleanValueParserRuleCall_11());
		}
		this_BooleanValue_11=ruleBooleanValue
		{
			$current = $this_BooleanValue_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getUniquenessCheckParserRuleCall_12());
		}
		this_UniquenessCheck_12=ruleUniquenessCheck
		{
			$current = $this_UniquenessCheck_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getValueContainmentParserRuleCall_13());
		}
		this_ValueContainment_13=ruleValueContainment
		{
			$current = $this_ValueContainment_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDateExpression
entryRuleDateExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateExpressionRule()); }
	iv_ruleDateExpression=ruleDateExpression
	{ $current=$iv_ruleDateExpression.current; }
	EOF;

// Rule DateExpression
ruleDateExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getDateExpressionAccess().getBeforeDateExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getLhsBaseExpressionParserRuleCall_0_1_0());
					}
					lv_lhs_1_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_1_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						otherlv_2='must'
						{
							newLeafNode(otherlv_2, grammarAccess.getDateExpressionAccess().getMustKeyword_0_2_0_0_0());
						}
						otherlv_3='be'
						{
							newLeafNode(otherlv_3, grammarAccess.getDateExpressionAccess().getBeKeyword_0_2_0_0_1());
						}
					)
					    |
					otherlv_4='is'
					{
						newLeafNode(otherlv_4, grammarAccess.getDateExpressionAccess().getIsKeyword_0_2_0_1());
					}
				)?
				(
					otherlv_5='before'
					{
						newLeafNode(otherlv_5, grammarAccess.getDateExpressionAccess().getBeforeKeyword_0_2_1_0());
					}
					    |
					otherlv_6='by'
					{
						newLeafNode(otherlv_6, grammarAccess.getDateExpressionAccess().getByKeyword_0_2_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getRhsBaseExpressionParserRuleCall_0_3_0());
					}
					lv_rhs_7_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_7_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getDateExpressionAccess().getAfterDateExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getLhsBaseExpressionParserRuleCall_1_1_0());
					}
					lv_lhs_9_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_9_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						otherlv_10='must'
						{
							newLeafNode(otherlv_10, grammarAccess.getDateExpressionAccess().getMustKeyword_1_2_0_0_0());
						}
						otherlv_11='be'
						{
							newLeafNode(otherlv_11, grammarAccess.getDateExpressionAccess().getBeKeyword_1_2_0_0_1());
						}
					)
					    |
					otherlv_12='is'
					{
						newLeafNode(otherlv_12, grammarAccess.getDateExpressionAccess().getIsKeyword_1_2_0_1());
					}
				)?
				(
					otherlv_13='after'
					{
						newLeafNode(otherlv_13, grammarAccess.getDateExpressionAccess().getAfterKeyword_1_2_1_0());
					}
					    |
					(
						otherlv_14='later'
						{
							newLeafNode(otherlv_14, grammarAccess.getDateExpressionAccess().getLaterKeyword_1_2_1_1_0());
						}
						otherlv_15='than'
						{
							newLeafNode(otherlv_15, grammarAccess.getDateExpressionAccess().getThanKeyword_1_2_1_1_1());
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getRhsBaseExpressionParserRuleCall_1_3_0());
					}
					lv_rhs_16_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_16_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getDateExpressionAccess().getOnorbeforeDateExpressionAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getLhsBaseExpressionParserRuleCall_2_1_0());
					}
					lv_lhs_18_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_18_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						otherlv_19='must'
						{
							newLeafNode(otherlv_19, grammarAccess.getDateExpressionAccess().getMustKeyword_2_2_0_0_0());
						}
						otherlv_20='be'
						{
							newLeafNode(otherlv_20, grammarAccess.getDateExpressionAccess().getBeKeyword_2_2_0_0_1());
						}
					)
					    |
					otherlv_21='is'
					{
						newLeafNode(otherlv_21, grammarAccess.getDateExpressionAccess().getIsKeyword_2_2_0_1());
					}
				)?
				(
					(
						otherlv_22='before'
						{
							newLeafNode(otherlv_22, grammarAccess.getDateExpressionAccess().getBeforeKeyword_2_2_1_0_0());
						}
						otherlv_23='or'
						{
							newLeafNode(otherlv_23, grammarAccess.getDateExpressionAccess().getOrKeyword_2_2_1_0_1());
						}
						otherlv_24='by'
						{
							newLeafNode(otherlv_24, grammarAccess.getDateExpressionAccess().getByKeyword_2_2_1_0_2());
						}
					)
					    |
					(
						otherlv_25='on'
						{
							newLeafNode(otherlv_25, grammarAccess.getDateExpressionAccess().getOnKeyword_2_2_1_1_0());
						}
						otherlv_26='or'
						{
							newLeafNode(otherlv_26, grammarAccess.getDateExpressionAccess().getOrKeyword_2_2_1_1_1());
						}
						otherlv_27='before'
						{
							newLeafNode(otherlv_27, grammarAccess.getDateExpressionAccess().getBeforeKeyword_2_2_1_1_2());
						}
					)
					    |
					(
						otherlv_28='before'
						{
							newLeafNode(otherlv_28, grammarAccess.getDateExpressionAccess().getBeforeKeyword_2_2_1_2_0());
						}
						otherlv_29='or'
						{
							newLeafNode(otherlv_29, grammarAccess.getDateExpressionAccess().getOrKeyword_2_2_1_2_1());
						}
						otherlv_30='equal'
						{
							newLeafNode(otherlv_30, grammarAccess.getDateExpressionAccess().getEqualKeyword_2_2_1_2_2());
						}
						otherlv_31='to'
						{
							newLeafNode(otherlv_31, grammarAccess.getDateExpressionAccess().getToKeyword_2_2_1_2_3());
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getRhsBaseExpressionParserRuleCall_2_3_0());
					}
					lv_rhs_32_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_32_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getDateExpressionAccess().getOnorafterDateExpressionAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getLhsBaseExpressionParserRuleCall_3_1_0());
					}
					lv_lhs_34_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_34_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						otherlv_35='must'
						{
							newLeafNode(otherlv_35, grammarAccess.getDateExpressionAccess().getMustKeyword_3_2_0_0_0());
						}
						otherlv_36='be'
						{
							newLeafNode(otherlv_36, grammarAccess.getDateExpressionAccess().getBeKeyword_3_2_0_0_1());
						}
					)
					    |
					otherlv_37='is'
					{
						newLeafNode(otherlv_37, grammarAccess.getDateExpressionAccess().getIsKeyword_3_2_0_1());
					}
				)?
				(
					(
						otherlv_38='after'
						{
							newLeafNode(otherlv_38, grammarAccess.getDateExpressionAccess().getAfterKeyword_3_2_1_0_0());
						}
						otherlv_39='or'
						{
							newLeafNode(otherlv_39, grammarAccess.getDateExpressionAccess().getOrKeyword_3_2_1_0_1());
						}
						otherlv_40='by'
						{
							newLeafNode(otherlv_40, grammarAccess.getDateExpressionAccess().getByKeyword_3_2_1_0_2());
						}
					)
					    |
					(
						otherlv_41='on'
						{
							newLeafNode(otherlv_41, grammarAccess.getDateExpressionAccess().getOnKeyword_3_2_1_1_0());
						}
						otherlv_42='or'
						{
							newLeafNode(otherlv_42, grammarAccess.getDateExpressionAccess().getOrKeyword_3_2_1_1_1());
						}
						otherlv_43='after'
						{
							newLeafNode(otherlv_43, grammarAccess.getDateExpressionAccess().getAfterKeyword_3_2_1_1_2());
						}
					)
					    |
					(
						otherlv_44='after'
						{
							newLeafNode(otherlv_44, grammarAccess.getDateExpressionAccess().getAfterKeyword_3_2_1_2_0());
						}
						otherlv_45='or'
						{
							newLeafNode(otherlv_45, grammarAccess.getDateExpressionAccess().getOrKeyword_3_2_1_2_1());
						}
						otherlv_46='equal'
						{
							newLeafNode(otherlv_46, grammarAccess.getDateExpressionAccess().getEqualKeyword_3_2_1_2_2());
						}
						otherlv_47='to'
						{
							newLeafNode(otherlv_47, grammarAccess.getDateExpressionAccess().getToKeyword_3_2_1_2_3());
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDateExpressionAccess().getRhsBaseExpressionParserRuleCall_3_3_0());
					}
					lv_rhs_48_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_48_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNumericAggregation
entryRuleNumericAggregation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericAggregationRule()); }
	iv_ruleNumericAggregation=ruleNumericAggregation
	{ $current=$iv_ruleNumericAggregation.current; }
	EOF;

// Rule NumericAggregation
ruleNumericAggregation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNumericAggregationAccess().getNumericSummationParserRuleCall_0());
		}
		this_NumericSummation_0=ruleNumericSummation
		{
			$current = $this_NumericSummation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNumericAggregationAccess().getNumericAverageParserRuleCall_1());
		}
		this_NumericAverage_1=ruleNumericAverage
		{
			$current = $this_NumericAverage_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNumericAggregationAccess().getNumericMaximumParserRuleCall_2());
		}
		this_NumericMaximum_2=ruleNumericMaximum
		{
			$current = $this_NumericMaximum_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNumericAggregationAccess().getNumericMinimumParserRuleCall_3());
		}
		this_NumericMinimum_3=ruleNumericMinimum
		{
			$current = $this_NumericMinimum_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumericSummation
entryRuleNumericSummation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericSummationRule()); }
	iv_ruleNumericSummation=ruleNumericSummation
	{ $current=$iv_ruleNumericSummation.current; }
	EOF;

// Rule NumericSummation
ruleNumericSummation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='the'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumericSummationAccess().getTheKeyword_0());
		}
		otherlv_1='sum'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumericSummationAccess().getSumKeyword_1());
		}
		(
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getNumericSummationAccess().getOfKeyword_2());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNumericSummationAccess().getFeatureFeatureValueParserRuleCall_3_0_0());
					}
					lv_feature_3_1=ruleFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericSummationRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_1,
							"org.eclipse.acme.ACMECNl.FeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericSummationAccess().getFeatureUnscopedFeatureValueParserRuleCall_3_0_1());
					}
					lv_feature_3_2=ruleUnscopedFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericSummationRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_2,
							"org.eclipse.acme.ACMECNl.UnscopedFeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericSummationAccess().getFeatureVariableFeatureValueParserRuleCall_3_0_2());
					}
					lv_feature_3_3=ruleVariableFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericSummationRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_3,
							"org.eclipse.acme.ACMECNl.VariableFeatureValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNumericAverage
entryRuleNumericAverage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericAverageRule()); }
	iv_ruleNumericAverage=ruleNumericAverage
	{ $current=$iv_ruleNumericAverage.current; }
	EOF;

// Rule NumericAverage
ruleNumericAverage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='the'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumericAverageAccess().getTheKeyword_0());
		}
		otherlv_1='average'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumericAverageAccess().getAverageKeyword_1());
		}
		(
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getNumericAverageAccess().getOfKeyword_2());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNumericAverageAccess().getFeatureFeatureValueParserRuleCall_3_0_0());
					}
					lv_feature_3_1=ruleFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericAverageRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_1,
							"org.eclipse.acme.ACMECNl.FeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericAverageAccess().getFeatureUnscopedFeatureValueParserRuleCall_3_0_1());
					}
					lv_feature_3_2=ruleUnscopedFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericAverageRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_2,
							"org.eclipse.acme.ACMECNl.UnscopedFeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericAverageAccess().getFeatureVariableFeatureValueParserRuleCall_3_0_2());
					}
					lv_feature_3_3=ruleVariableFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericAverageRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_3,
							"org.eclipse.acme.ACMECNl.VariableFeatureValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNumericMaximum
entryRuleNumericMaximum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericMaximumRule()); }
	iv_ruleNumericMaximum=ruleNumericMaximum
	{ $current=$iv_ruleNumericMaximum.current; }
	EOF;

// Rule NumericMaximum
ruleNumericMaximum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='the'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumericMaximumAccess().getTheKeyword_0());
		}
		otherlv_1='maximum'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumericMaximumAccess().getMaximumKeyword_1());
		}
		(
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getNumericMaximumAccess().getOfKeyword_2());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNumericMaximumAccess().getFeatureFeatureValueParserRuleCall_3_0_0());
					}
					lv_feature_3_1=ruleFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericMaximumRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_1,
							"org.eclipse.acme.ACMECNl.FeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericMaximumAccess().getFeatureUnscopedFeatureValueParserRuleCall_3_0_1());
					}
					lv_feature_3_2=ruleUnscopedFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericMaximumRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_2,
							"org.eclipse.acme.ACMECNl.UnscopedFeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericMaximumAccess().getFeatureVariableFeatureValueParserRuleCall_3_0_2());
					}
					lv_feature_3_3=ruleVariableFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericMaximumRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_3,
							"org.eclipse.acme.ACMECNl.VariableFeatureValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNumericMinimum
entryRuleNumericMinimum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericMinimumRule()); }
	iv_ruleNumericMinimum=ruleNumericMinimum
	{ $current=$iv_ruleNumericMinimum.current; }
	EOF;

// Rule NumericMinimum
ruleNumericMinimum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='the'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumericMinimumAccess().getTheKeyword_0());
		}
		otherlv_1='minimum'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumericMinimumAccess().getMinimumKeyword_1());
		}
		(
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getNumericMinimumAccess().getOfKeyword_2());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNumericMinimumAccess().getFeatureFeatureValueParserRuleCall_3_0_0());
					}
					lv_feature_3_1=ruleFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericMinimumRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_1,
							"org.eclipse.acme.ACMECNl.FeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericMinimumAccess().getFeatureUnscopedFeatureValueParserRuleCall_3_0_1());
					}
					lv_feature_3_2=ruleUnscopedFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericMinimumRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_2,
							"org.eclipse.acme.ACMECNl.UnscopedFeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNumericMinimumAccess().getFeatureVariableFeatureValueParserRuleCall_3_0_2());
					}
					lv_feature_3_3=ruleVariableFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumericMinimumRule());
						}
						set(
							$current,
							"feature",
							lv_feature_3_3,
							"org.eclipse.acme.ACMECNl.VariableFeatureValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleValueContainment
entryRuleValueContainment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueContainmentRule()); }
	iv_ruleValueContainment=ruleValueContainment
	{ $current=$iv_ruleValueContainment.current; }
	EOF;

// Rule ValueContainment
ruleValueContainment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getValueContainmentAccess().getFeatureFeatureValueParserRuleCall_0_0_0());
					}
					lv_feature_0_1=ruleFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueContainmentRule());
						}
						set(
							$current,
							"feature",
							lv_feature_0_1,
							"org.eclipse.acme.ACMECNl.FeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getValueContainmentAccess().getFeatureUnscopedFeatureValueParserRuleCall_0_0_1());
					}
					lv_feature_0_2=ruleUnscopedFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueContainmentRule());
						}
						set(
							$current,
							"feature",
							lv_feature_0_2,
							"org.eclipse.acme.ACMECNl.UnscopedFeatureValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getValueContainmentAccess().getFeatureVariableFeatureValueParserRuleCall_0_0_2());
					}
					lv_feature_0_3=ruleVariableFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueContainmentRule());
						}
						set(
							$current,
							"feature",
							lv_feature_0_3,
							"org.eclipse.acme.ACMECNl.VariableFeatureValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_1='is'
			{
				newLeafNode(otherlv_1, grammarAccess.getValueContainmentAccess().getIsKeyword_1_0());
			}
			otherlv_2='either'
			{
				newLeafNode(otherlv_2, grammarAccess.getValueContainmentAccess().getEitherKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getValueContainmentAccess().getCollectionBaseExpressionParserRuleCall_2_0());
				}
				lv_collection_3_0=ruleBaseExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueContainmentRule());
					}
					add(
						$current,
						"collection",
						lv_collection_3_0,
						"org.eclipse.acme.ACMECNl.BaseExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='or'
			{
				newLeafNode(otherlv_4, grammarAccess.getValueContainmentAccess().getOrKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValueContainmentAccess().getCollectionBaseExpressionParserRuleCall_3_1_0());
					}
					lv_collection_5_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueContainmentRule());
						}
						add(
							$current,
							"collection",
							lv_collection_5_0,
							"org.eclipse.acme.ACMECNl.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUniquenessCheck
entryRuleUniquenessCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniquenessCheckRule()); }
	iv_ruleUniquenessCheck=ruleUniquenessCheck
	{ $current=$iv_ruleUniquenessCheck.current; }
	EOF;

// Rule UniquenessCheck
ruleUniquenessCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='any'
			{
				newLeafNode(otherlv_0, grammarAccess.getUniquenessCheckAccess().getAnyKeyword_0_0());
			}
			otherlv_1='combination'
			{
				newLeafNode(otherlv_1, grammarAccess.getUniquenessCheckAccess().getCombinationKeyword_0_1());
			}
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getUniquenessCheckAccess().getOfKeyword_0_2());
			}
			otherlv_3='values'
			{
				newLeafNode(otherlv_3, grammarAccess.getUniquenessCheckAccess().getValuesKeyword_0_3());
			}
			otherlv_4='in'
			{
				newLeafNode(otherlv_4, grammarAccess.getUniquenessCheckAccess().getInKeyword_0_4());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUniquenessCheckAccess().getFeaturesFeatureValueParserRuleCall_1_0());
				}
				lv_features_5_0=ruleFeatureValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniquenessCheckRule());
					}
					add(
						$current,
						"features",
						lv_features_5_0,
						"org.eclipse.acme.ACMECNl.FeatureValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getUniquenessCheckAccess().getCommaKeyword_2_0_0());
				}
				    |
				otherlv_7='and'
				{
					newLeafNode(otherlv_7, grammarAccess.getUniquenessCheckAccess().getAndKeyword_2_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUniquenessCheckAccess().getFeaturesFeatureValueParserRuleCall_2_1_0());
					}
					lv_features_8_0=ruleFeatureValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUniquenessCheckRule());
						}
						add(
							$current,
							"features",
							lv_features_8_0,
							"org.eclipse.acme.ACMECNl.FeatureValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='must'
		{
			newLeafNode(otherlv_9, grammarAccess.getUniquenessCheckAccess().getMustKeyword_3());
		}
		otherlv_10='be'
		{
			newLeafNode(otherlv_10, grammarAccess.getUniquenessCheckAccess().getBeKeyword_4());
		}
		otherlv_11='unique'
		{
			newLeafNode(otherlv_11, grammarAccess.getUniquenessCheckAccess().getUniqueKeyword_5());
		}
	)
;

// Entry rule entryRuleTypeExpression
entryRuleTypeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeExpressionRule()); }
	iv_ruleTypeExpression=ruleTypeExpression
	{ $current=$iv_ruleTypeExpression.current; }
	EOF;

// Rule TypeExpression
ruleTypeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeExpressionAccess().getPrimitiveTypeExpressionParserRuleCall_0());
		}
		this_PrimitiveTypeExpression_0=rulePrimitiveTypeExpression
		{
			$current = $this_PrimitiveTypeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeExpressionAccess().getEnumTypeExpressionParserRuleCall_1());
		}
		this_EnumTypeExpression_1=ruleEnumTypeExpression
		{
			$current = $this_EnumTypeExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFeatureValue
entryRuleFeatureValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureValueRule()); }
	iv_ruleFeatureValue=ruleFeatureValue
	{ $current=$iv_ruleFeatureValue.current; }
	EOF;

// Rule FeatureValue
ruleFeatureValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='the'
			{
				newLeafNode(otherlv_0, grammarAccess.getFeatureValueAccess().getTheKeyword_0());
			}
		)?
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureValueRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFeatureValueAccess().getFeatureFeatureCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleVariableFeatureValue
entryRuleVariableFeatureValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableFeatureValueRule()); }
	iv_ruleVariableFeatureValue=ruleVariableFeatureValue
	{ $current=$iv_ruleVariableFeatureValue.current; }
	EOF;

// Rule VariableFeatureValue
ruleVariableFeatureValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableFeatureValueRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getVariableFeatureValueAccess().getFeatureFeatureCrossReference_0_0());
				}
			)
		)
		otherlv_1='from'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableFeatureValueAccess().getFromKeyword_1());
		}
		(
			(
				lv_variableName_2_0=RULE_ID
				{
					newLeafNode(lv_variableName_2_0, grammarAccess.getVariableFeatureValueAccess().getVariableNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableFeatureValueRule());
					}
					setWithLastConsumed(
						$current,
						"variableName",
						lv_variableName_2_0,
						"org.eclipse.acme.ACMECNl.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleUnscopedFeatureValue
entryRuleUnscopedFeatureValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnscopedFeatureValueRule()); }
	iv_ruleUnscopedFeatureValue=ruleUnscopedFeatureValue
	{ $current=$iv_ruleUnscopedFeatureValue.current; }
	EOF;

// Rule UnscopedFeatureValue
ruleUnscopedFeatureValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnscopedFeatureValueRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getUnscopedFeatureValueAccess().getFeatureFeatureCrossReference_0_0());
				}
			)
		)
		otherlv_1='of'
		{
			newLeafNode(otherlv_1, grammarAccess.getUnscopedFeatureValueAccess().getOfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnscopedFeatureValueAccess().getScopeElementScopeParserRuleCall_2_0());
				}
				lv_scope_2_0=ruleElementScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnscopedFeatureValueRule());
					}
					set(
						$current,
						"scope",
						lv_scope_2_0,
						"org.eclipse.acme.ACMECNl.ElementScope");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimitiveTypeExpression
entryRulePrimitiveTypeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeExpressionRule()); }
	iv_rulePrimitiveTypeExpression=rulePrimitiveTypeExpression
	{ $current=$iv_rulePrimitiveTypeExpression.current; }
	EOF;

// Rule PrimitiveTypeExpression
rulePrimitiveTypeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveTypeExpressionAccess().getFeatureFeatureValueParserRuleCall_0_0());
				}
				lv_feature_0_0=ruleFeatureValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveTypeExpressionRule());
					}
					set(
						$current,
						"feature",
						lv_feature_0_0,
						"org.eclipse.acme.ACMECNl.FeatureValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='is'
				{
					newLeafNode(otherlv_1, grammarAccess.getPrimitiveTypeExpressionAccess().getIsKeyword_1_0_0());
				}
				otherlv_2='of'
				{
					newLeafNode(otherlv_2, grammarAccess.getPrimitiveTypeExpressionAccess().getOfKeyword_1_0_1());
				}
				otherlv_3='type'
				{
					newLeafNode(otherlv_3, grammarAccess.getPrimitiveTypeExpressionAccess().getTypeKeyword_1_0_2());
				}
			)
			    |
			(
				otherlv_4='is'
				{
					newLeafNode(otherlv_4, grammarAccess.getPrimitiveTypeExpressionAccess().getIsKeyword_1_1_0());
				}
				otherlv_5='a'
				{
					newLeafNode(otherlv_5, grammarAccess.getPrimitiveTypeExpressionAccess().getAKeyword_1_1_1());
				}
			)
			    |
			(
				otherlv_6='must'
				{
					newLeafNode(otherlv_6, grammarAccess.getPrimitiveTypeExpressionAccess().getMustKeyword_1_2_0());
				}
				otherlv_7='be'
				{
					newLeafNode(otherlv_7, grammarAccess.getPrimitiveTypeExpressionAccess().getBeKeyword_1_2_1());
				}
				(
					otherlv_8='a'
					{
						newLeafNode(otherlv_8, grammarAccess.getPrimitiveTypeExpressionAccess().getAKeyword_1_2_2_0());
					}
					    |
					otherlv_9='in'
					{
						newLeafNode(otherlv_9, grammarAccess.getPrimitiveTypeExpressionAccess().getInKeyword_1_2_2_1());
					}
				)?
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveTypeExpressionAccess().getTypePrimitiveTypesEnumRuleCall_2_0());
				}
				lv_type_10_0=rulePrimitiveTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveTypeExpressionRule());
					}
					set(
						$current,
						"type",
						lv_type_10_0,
						"org.eclipse.acme.ACMECNl.PrimitiveTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnumTypeExpression
entryRuleEnumTypeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumTypeExpressionRule()); }
	iv_ruleEnumTypeExpression=ruleEnumTypeExpression
	{ $current=$iv_ruleEnumTypeExpression.current; }
	EOF;

// Rule EnumTypeExpression
ruleEnumTypeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumTypeExpressionAccess().getFeatureFeatureValueParserRuleCall_0_0());
				}
				lv_feature_0_0=ruleFeatureValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumTypeExpressionRule());
					}
					set(
						$current,
						"feature",
						lv_feature_0_0,
						"org.eclipse.acme.ACMECNl.FeatureValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='is'
				{
					newLeafNode(otherlv_1, grammarAccess.getEnumTypeExpressionAccess().getIsKeyword_1_0_0());
				}
				otherlv_2='of'
				{
					newLeafNode(otherlv_2, grammarAccess.getEnumTypeExpressionAccess().getOfKeyword_1_0_1());
				}
				otherlv_3='type'
				{
					newLeafNode(otherlv_3, grammarAccess.getEnumTypeExpressionAccess().getTypeKeyword_1_0_2());
				}
			)
			    |
			(
				otherlv_4='is'
				{
					newLeafNode(otherlv_4, grammarAccess.getEnumTypeExpressionAccess().getIsKeyword_1_1_0());
				}
				otherlv_5='a'
				{
					newLeafNode(otherlv_5, grammarAccess.getEnumTypeExpressionAccess().getAKeyword_1_1_1());
				}
			)
			    |
			(
				otherlv_6='must'
				{
					newLeafNode(otherlv_6, grammarAccess.getEnumTypeExpressionAccess().getMustKeyword_1_2_0());
				}
				otherlv_7='be'
				{
					newLeafNode(otherlv_7, grammarAccess.getEnumTypeExpressionAccess().getBeKeyword_1_2_1());
				}
				(
					otherlv_8='a'
					{
						newLeafNode(otherlv_8, grammarAccess.getEnumTypeExpressionAccess().getAKeyword_1_2_2_0());
					}
					    |
					otherlv_9='in'
					{
						newLeafNode(otherlv_9, grammarAccess.getEnumTypeExpressionAccess().getInKeyword_1_2_2_1());
					}
				)?
			)
		)
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeExpressionRule());
					}
				}
				otherlv_10=RULE_ID
				{
					newLeafNode(otherlv_10, grammarAccess.getEnumTypeExpressionAccess().getTypeEnumCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	iv_ruleEnumValue=ruleEnumValue
	{ $current=$iv_ruleEnumValue.current; }
	EOF;

// Rule EnumValue
ruleEnumValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumValueRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getEnumValueAccess().getEnumerationEnumCrossReference_0_0_0());
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getEnumValueAccess().getColonKeyword_0_1());
			}
			(
				(
					lv_value_2_0=RULE_STRING
					{
						newLeafNode(lv_value_2_0, grammarAccess.getEnumValueAccess().getValueSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumValueRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_3='the'
			{
				newLeafNode(otherlv_3, grammarAccess.getEnumValueAccess().getTheKeyword_1_0());
			}
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumValueRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getEnumValueAccess().getEnumerationEnumCrossReference_1_1_0());
					}
				)
			)
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getEnumValueAccess().getValueKeyword_1_2());
			}
			otherlv_6='of'
			{
				newLeafNode(otherlv_6, grammarAccess.getEnumValueAccess().getOfKeyword_1_3());
			}
			(
				(
					lv_value_7_0=RULE_STRING
					{
						newLeafNode(lv_value_7_0, grammarAccess.getEnumValueAccess().getValueSTRINGTerminalRuleCall_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumValueRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanValueAccess().getBooleanValueAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_0='true'
					{
						newLeafNode(lv_value_1_0, grammarAccess.getBooleanValueAccess().getValueTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanValueRule());
						}
						setWithLastConsumed($current, "value", true, "true");
					}
				)
			)
			    |
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleanValueAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); }
	iv_ruleIntegerValue=ruleIntegerValue
	{ $current=$iv_ruleIntegerValue.current; }
	EOF;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntegerValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.acme.ACMECNl.INT");
			}
		)
	)
;

// Entry rule entryRuleDecimalValue
entryRuleDecimalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalValueRule()); }
	iv_ruleDecimalValue=ruleDecimalValue
	{ $current=$iv_ruleDecimalValue.current; }
	EOF;

// Rule DecimalValue
ruleDecimalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DECIMAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getDecimalValueAccess().getValueDECIMALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDecimalValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.acme.ACMECNl.DECIMAL");
			}
		)
	)
;

// Entry rule entryRuleDateValue
entryRuleDateValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateValueRule()); }
	iv_ruleDateValue=ruleDateValue
	{ $current=$iv_ruleDateValue.current; }
	EOF;

// Rule DateValue
ruleDateValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DATE
			{
				newLeafNode(lv_value_0_0, grammarAccess.getDateValueAccess().getValueDATETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDateValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.acme.ACMECNl.DATE");
			}
		)
	)
;

// Entry rule entryRuleMetaData
entryRuleMetaData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetaDataRule()); }
	iv_ruleMetaData=ruleMetaData
	{ $current=$iv_ruleMetaData.current; }
	EOF;

// Rule MetaData
ruleMetaData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMetaDataAccess().getTypesParserRuleCall_0());
		}
		this_Types_0=ruleTypes
		{
			$current = $this_Types_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMetaDataAccess().getEnumerationsParserRuleCall_1());
		}
		this_Enumerations_1=ruleEnumerations
		{
			$current = $this_Enumerations_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypes
entryRuleTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypesRule()); }
	iv_ruleTypes=ruleTypes
	{ $current=$iv_ruleTypes.current; }
	EOF;

// Rule Types
ruleTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='types'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypesAccess().getTypesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypesAccess().getLegalValuesTypeValueParserRuleCall_1_0());
				}
				lv_legalValues_1_0=ruleTypeValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypesRule());
					}
					add(
						$current,
						"legalValues",
						lv_legalValues_1_0,
						"org.eclipse.acme.ACMECNl.TypeValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getTypesAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypesAccess().getLegalValuesTypeValueParserRuleCall_2_1_0());
					}
					lv_legalValues_3_0=ruleTypeValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypesRule());
						}
						add(
							$current,
							"legalValues",
							lv_legalValues_3_0,
							"org.eclipse.acme.ACMECNl.TypeValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEnumerations
entryRuleEnumerations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationsRule()); }
	iv_ruleEnumerations=ruleEnumerations
	{ $current=$iv_ruleEnumerations.current; }
	EOF;

// Rule Enumerations
ruleEnumerations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enumerations'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerationsAccess().getEnumerationsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationsAccess().getLegalValuesEnumParserRuleCall_1_0());
				}
				lv_legalValues_1_0=ruleEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationsRule());
					}
					add(
						$current,
						"legalValues",
						lv_legalValues_1_0,
						"org.eclipse.acme.ACMECNl.Enum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getEnumerationsAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationsAccess().getLegalValuesEnumParserRuleCall_2_1_0());
					}
					lv_legalValues_3_0=ruleEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationsRule());
						}
						add(
							$current,
							"legalValues",
							lv_legalValues_3_0,
							"org.eclipse.acme.ACMECNl.Enum");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	iv_ruleEnum=ruleEnum
	{ $current=$iv_ruleEnum.current; }
	EOF;

// Rule Enum
ruleEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEnumRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.acme.ACMECNl.ID");
			}
		)
	)
;

// Entry rule entryRuleTypeValue
entryRuleTypeValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeValueRule()); }
	iv_ruleTypeValue=ruleTypeValue
	{ $current=$iv_ruleTypeValue.current; }
	EOF;

// Rule TypeValue
ruleTypeValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTypeValueAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeValueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.acme.ACMECNl.ID");
				}
			)
		)
		(
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeValueAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeValueAccess().getFeaturesFeatureParserRuleCall_1_1_0_0());
						}
						lv_features_2_0=ruleFeature
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeValueRule());
							}
							add(
								$current,
								"features",
								lv_features_2_0,
								"org.eclipse.acme.ACMECNl.Feature");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getTypeValueAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTypeValueAccess().getFeaturesFeatureParserRuleCall_1_1_1_1_0());
							}
							lv_features_4_0=ruleFeature
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTypeValueRule());
								}
								add(
									$current,
									"features",
									lv_features_4_0,
									"org.eclipse.acme.ACMECNl.Feature");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeValueAccess().getRightCurlyBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFeatureRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.acme.ACMECNl.ID");
			}
		)
	)
;

// Entry rule entryRuleEmptyValue
entryRuleEmptyValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyValueRule()); }
	iv_ruleEmptyValue=ruleEmptyValue
	{ $current=$iv_ruleEmptyValue.current; }
	EOF;

// Rule EmptyValue
ruleEmptyValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmptyValueAccess().getEmptyValueAction_0(),
					$current);
			}
		)
		(
			otherlv_1='must'
			{
				newLeafNode(otherlv_1, grammarAccess.getEmptyValueAccess().getMustKeyword_1_0());
			}
			otherlv_2='be'
			{
				newLeafNode(otherlv_2, grammarAccess.getEmptyValueAccess().getBeKeyword_1_1());
			}
		)?
		otherlv_3='empty'
		{
			newLeafNode(otherlv_3, grammarAccess.getEmptyValueAccess().getEmptyKeyword_2());
		}
	)
;

// Entry rule entryRuleExistanceValue
entryRuleExistanceValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistanceValueRule()); }
	iv_ruleExistanceValue=ruleExistanceValue
	{ $current=$iv_ruleExistanceValue.current; }
	EOF;

// Rule ExistanceValue
ruleExistanceValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getExistanceValueAccess().getExistanceValueAction_0(),
					$current);
			}
		)
		(
			otherlv_1='exists'
			{
				newLeafNode(otherlv_1, grammarAccess.getExistanceValueAccess().getExistsKeyword_1_0());
			}
			    |
			(
				otherlv_2='must'
				{
					newLeafNode(otherlv_2, grammarAccess.getExistanceValueAccess().getMustKeyword_1_1_0());
				}
				otherlv_3='exist'
				{
					newLeafNode(otherlv_3, grammarAccess.getExistanceValueAccess().getExistKeyword_1_1_1());
				}
			)
		)
	)
;

// Rule ArithmeticOperations
ruleArithmeticOperations returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getArithmeticOperationsAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getArithmeticOperationsAccess().getPlusEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getArithmeticOperationsAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getArithmeticOperationsAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='*'
			{
				$current = grammarAccess.getArithmeticOperationsAccess().getTimesEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getArithmeticOperationsAccess().getTimesEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='/'
			{
				$current = grammarAccess.getArithmeticOperationsAccess().getDivEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getArithmeticOperationsAccess().getDivEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule PrimitiveTypes
rulePrimitiveTypes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='String'
			{
				$current = grammarAccess.getPrimitiveTypesAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypesAccess().getStringEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Boolean'
			{
				$current = grammarAccess.getPrimitiveTypesAccess().getBooleanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypesAccess().getBooleanEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Integer'
			{
				$current = grammarAccess.getPrimitiveTypesAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypesAccess().getIntegerEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Decimal'
			{
				$current = grammarAccess.getPrimitiveTypesAccess().getDecimalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getPrimitiveTypesAccess().getDecimalEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Date'
			{
				$current = grammarAccess.getPrimitiveTypesAccess().getDateEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getPrimitiveTypesAccess().getDateEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_DECIMAL : '-'? ('0'..'9')+ '.' ('0'..'9')+;

RULE_INT : '-'? ('0'..'9')+;

RULE_DATE : RULE_INT '-' RULE_INT '-' RULE_INT;

RULE_ID : ('^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|('`'|'[') ('\\' .|~(('\\'|'`'|'['|']')))* ('`'|']'));

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
