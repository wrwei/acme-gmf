/*
 * generated by Xtext 2.21.0
 */
package org.eclipse.acme.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ACMECNlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ConstrainedNaturalLanguageRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ConstrainedNaturalLanguageRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cRulesAlternatives_0_0 = (Alternatives)cRulesAssignment_0.eContents().get(0);
		private final RuleCall cRulesScopedRulesParserRuleCall_0_0_0 = (RuleCall)cRulesAlternatives_0_0.eContents().get(0);
		private final RuleCall cRulesMatchScopedRuleParserRuleCall_0_0_1 = (RuleCall)cRulesAlternatives_0_0.eContents().get(1);
		private final Assignment cMetadataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetadataMetaDataParserRuleCall_1_0 = (RuleCall)cMetadataAssignment_1.eContents().get(0);
		
		//ConstrainedNaturalLanguageRules cnl::ConstrainedNaturalLanguageRules:
		//	rules+=(ScopedRules | MatchScopedRule)*
		//	metadata+=MetaData*;
		@Override public ParserRule getRule() { return rule; }
		
		//rules+=(ScopedRules | MatchScopedRule)* metadata+=MetaData*
		public Group getGroup() { return cGroup; }
		
		//rules+=(ScopedRules | MatchScopedRule)*
		public Assignment getRulesAssignment_0() { return cRulesAssignment_0; }
		
		//(ScopedRules | MatchScopedRule)
		public Alternatives getRulesAlternatives_0_0() { return cRulesAlternatives_0_0; }
		
		//ScopedRules
		public RuleCall getRulesScopedRulesParserRuleCall_0_0_0() { return cRulesScopedRulesParserRuleCall_0_0_0; }
		
		//MatchScopedRule
		public RuleCall getRulesMatchScopedRuleParserRuleCall_0_0_1() { return cRulesMatchScopedRuleParserRuleCall_0_0_1; }
		
		//metadata+=MetaData*
		public Assignment getMetadataAssignment_1() { return cMetadataAssignment_1; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_1_0() { return cMetadataMetaDataParserRuleCall_1_0; }
	}
	public class ScopedRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ScopedRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0 = (Alternatives)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_0_0 = (Group)cAlternatives_0_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_0_0_0 = (Keyword)cGroup_0_0_0_0.eContents().get(0);
		private final Keyword cAllKeyword_0_0_0_0_1 = (Keyword)cGroup_0_0_0_0.eContents().get(1);
		private final Keyword cInKeyword_0_0_0_1 = (Keyword)cAlternatives_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_0_2 = (Group)cAlternatives_0_0_0.eContents().get(2);
		private final Keyword cInKeyword_0_0_0_2_0 = (Keyword)cGroup_0_0_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0_2_1 = (Alternatives)cGroup_0_0_0_2.eContents().get(1);
		private final Keyword cAKeyword_0_0_0_2_1_0 = (Keyword)cAlternatives_0_0_0_2_1.eContents().get(0);
		private final Keyword cAnKeyword_0_0_0_2_1_1 = (Keyword)cAlternatives_0_0_0_2_1.eContents().get(1);
		private final Group cGroup_0_0_0_3 = (Group)cAlternatives_0_0_0.eContents().get(3);
		private final Keyword cAllKeyword_0_0_0_3_0 = (Keyword)cGroup_0_0_0_3.eContents().get(0);
		private final Keyword cOfKeyword_0_0_0_3_1 = (Keyword)cGroup_0_0_0_3.eContents().get(1);
		private final Keyword cTheKeyword_0_0_0_3_2 = (Keyword)cGroup_0_0_0_3.eContents().get(2);
		private final Keyword cFollowingKeyword_0_0_0_3_3 = (Keyword)cGroup_0_0_0_3.eContents().get(3);
		private final Keyword cAreKeyword_0_0_0_3_4 = (Keyword)cGroup_0_0_0_3.eContents().get(4);
		private final Alternatives cAlternatives_0_0_0_3_5 = (Alternatives)cGroup_0_0_0_3.eContents().get(5);
		private final Group cGroup_0_0_0_3_5_0 = (Group)cAlternatives_0_0_0_3_5.eContents().get(0);
		private final Keyword cMandatoryKeyword_0_0_0_3_5_0_0 = (Keyword)cGroup_0_0_0_3_5_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_0_3_5_0_1 = (Keyword)cGroup_0_0_0_3_5_0.eContents().get(1);
		private final Group cGroup_0_0_0_3_5_1 = (Group)cAlternatives_0_0_0_3_5.eContents().get(1);
		private final Keyword cRequiredKeyword_0_0_0_3_5_1_0 = (Keyword)cGroup_0_0_0_3_5_1.eContents().get(0);
		private final Keyword cForKeyword_0_0_0_3_5_1_1 = (Keyword)cGroup_0_0_0_3_5_1.eContents().get(1);
		private final Group cGroup_0_0_0_3_5_2 = (Group)cAlternatives_0_0_0_3_5.eContents().get(2);
		private final Keyword cNeededKeyword_0_0_0_3_5_2_0 = (Keyword)cGroup_0_0_0_3_5_2.eContents().get(0);
		private final Keyword cForKeyword_0_0_0_3_5_2_1 = (Keyword)cGroup_0_0_0_3_5_2.eContents().get(1);
		private final Group cGroup_0_0_0_3_5_3 = (Group)cAlternatives_0_0_0_3_5.eContents().get(3);
		private final Keyword cObligatoryKeyword_0_0_0_3_5_3_0 = (Keyword)cGroup_0_0_0_3_5_3.eContents().get(0);
		private final Keyword cForKeyword_0_0_0_3_5_3_1 = (Keyword)cGroup_0_0_0_3_5_3.eContents().get(1);
		private final Group cGroup_0_0_0_3_5_4 = (Group)cAlternatives_0_0_0_3_5.eContents().get(4);
		private final Keyword cMandatoryKeyword_0_0_0_3_5_4_0 = (Keyword)cGroup_0_0_0_3_5_4.eContents().get(0);
		private final Keyword cInKeyword_0_0_0_3_5_4_1 = (Keyword)cGroup_0_0_0_3_5_4.eContents().get(1);
		private final Group cGroup_0_0_0_3_5_5 = (Group)cAlternatives_0_0_0_3_5.eContents().get(5);
		private final Keyword cRequiredKeyword_0_0_0_3_5_5_0 = (Keyword)cGroup_0_0_0_3_5_5.eContents().get(0);
		private final Keyword cInKeyword_0_0_0_3_5_5_1 = (Keyword)cGroup_0_0_0_3_5_5.eContents().get(1);
		private final Group cGroup_0_0_0_3_5_6 = (Group)cAlternatives_0_0_0_3_5.eContents().get(6);
		private final Keyword cNeededKeyword_0_0_0_3_5_6_0 = (Keyword)cGroup_0_0_0_3_5_6.eContents().get(0);
		private final Keyword cInKeyword_0_0_0_3_5_6_1 = (Keyword)cGroup_0_0_0_3_5_6.eContents().get(1);
		private final Group cGroup_0_0_0_3_5_7 = (Group)cAlternatives_0_0_0_3_5.eContents().get(7);
		private final Keyword cObligatoryKeyword_0_0_0_3_5_7_0 = (Keyword)cGroup_0_0_0_3_5_7.eContents().get(0);
		private final Keyword cInKeyword_0_0_0_3_5_7_1 = (Keyword)cGroup_0_0_0_3_5_7.eContents().get(1);
		private final Keyword cAKeyword_0_0_0_3_6 = (Keyword)cGroup_0_0_0_3.eContents().get(6);
		private final Assignment cScopeAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cScopeElementScopeParserRuleCall_0_0_1_0 = (RuleCall)cScopeAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cAKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cAnKeyword_0_1_0_1 = (Keyword)cAlternatives_0_1_0.eContents().get(1);
		private final Assignment cScopeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cScopeElementScopeParserRuleCall_0_1_1_0 = (RuleCall)cScopeAssignment_0_1_1.eContents().get(0);
		private final Keyword cIsKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//ScopedRules cnl::ScopedRules:
		//	(('for' 'all' |
		//	'in' | 'in' ('a' | 'an') | 'all' 'of' 'the' 'following' 'are' ('mandatory' 'for' | 'required' 'for' | 'needed' 'for'
		//	| 'obligatory' 'for' |
		//	'mandatory' 'in' | 'required' 'in' | 'needed' 'in' | 'obligatory' 'in')
		//	'a'?) scope=ElementScope
		//	| ('a' | 'an') scope=ElementScope 'is') rules+=Rule+;
		@Override public ParserRule getRule() { return rule; }
		
		//(('for' 'all' | 'in' | 'in' ('a' | 'an') | 'all' 'of' 'the' 'following' 'are' ('mandatory' 'for' | 'required' 'for' |
		//'needed' 'for' | 'obligatory' 'for' | 'mandatory' 'in' | 'required' 'in' | 'needed' 'in' | 'obligatory' 'in') 'a'?)
		//scope=ElementScope | ('a' | 'an') scope=ElementScope 'is') rules+=Rule+
		public Group getGroup() { return cGroup; }
		
		//(('for' 'all' | 'in' | 'in' ('a' | 'an') | 'all' 'of' 'the' 'following' 'are' ('mandatory' 'for' | 'required' 'for' |
		//'needed' 'for' | 'obligatory' 'for' | 'mandatory' 'in' | 'required' 'in' | 'needed' 'in' | 'obligatory' 'in') 'a'?)
		//scope=ElementScope | ('a' | 'an') scope=ElementScope 'is')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//('for' 'all' | 'in' | 'in' ('a' | 'an') | 'all' 'of' 'the' 'following' 'are' ('mandatory' 'for' | 'required' 'for' |
		//'needed' 'for' | 'obligatory' 'for' | 'mandatory' 'in' | 'required' 'in' | 'needed' 'in' | 'obligatory' 'in') 'a'?)
		//scope=ElementScope
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//('for' 'all' | 'in' | 'in' ('a' | 'an') | 'all' 'of' 'the' 'following' 'are' ('mandatory' 'for' | 'required' 'for' |
		//'needed' 'for' | 'obligatory' 'for' | 'mandatory' 'in' | 'required' 'in' | 'needed' 'in' | 'obligatory' 'in') 'a'?)
		public Alternatives getAlternatives_0_0_0() { return cAlternatives_0_0_0; }
		
		//'for' 'all'
		public Group getGroup_0_0_0_0() { return cGroup_0_0_0_0; }
		
		//'for'
		public Keyword getForKeyword_0_0_0_0_0() { return cForKeyword_0_0_0_0_0; }
		
		//'all'
		public Keyword getAllKeyword_0_0_0_0_1() { return cAllKeyword_0_0_0_0_1; }
		
		//'in'
		public Keyword getInKeyword_0_0_0_1() { return cInKeyword_0_0_0_1; }
		
		//'in' ('a' | 'an')
		public Group getGroup_0_0_0_2() { return cGroup_0_0_0_2; }
		
		//'in'
		public Keyword getInKeyword_0_0_0_2_0() { return cInKeyword_0_0_0_2_0; }
		
		//('a' | 'an')
		public Alternatives getAlternatives_0_0_0_2_1() { return cAlternatives_0_0_0_2_1; }
		
		//'a'
		public Keyword getAKeyword_0_0_0_2_1_0() { return cAKeyword_0_0_0_2_1_0; }
		
		//'an'
		public Keyword getAnKeyword_0_0_0_2_1_1() { return cAnKeyword_0_0_0_2_1_1; }
		
		//'all' 'of' 'the' 'following' 'are' ('mandatory' 'for' | 'required' 'for' | 'needed' 'for' | 'obligatory' 'for' |
		//'mandatory' 'in' | 'required' 'in' | 'needed' 'in' | 'obligatory' 'in') 'a'?
		public Group getGroup_0_0_0_3() { return cGroup_0_0_0_3; }
		
		//'all'
		public Keyword getAllKeyword_0_0_0_3_0() { return cAllKeyword_0_0_0_3_0; }
		
		//'of'
		public Keyword getOfKeyword_0_0_0_3_1() { return cOfKeyword_0_0_0_3_1; }
		
		//'the'
		public Keyword getTheKeyword_0_0_0_3_2() { return cTheKeyword_0_0_0_3_2; }
		
		//'following'
		public Keyword getFollowingKeyword_0_0_0_3_3() { return cFollowingKeyword_0_0_0_3_3; }
		
		//'are'
		public Keyword getAreKeyword_0_0_0_3_4() { return cAreKeyword_0_0_0_3_4; }
		
		//('mandatory' 'for' | 'required' 'for' | 'needed' 'for' | 'obligatory' 'for' | 'mandatory' 'in' | 'required' 'in' |
		//'needed' 'in' | 'obligatory' 'in')
		public Alternatives getAlternatives_0_0_0_3_5() { return cAlternatives_0_0_0_3_5; }
		
		//'mandatory' 'for'
		public Group getGroup_0_0_0_3_5_0() { return cGroup_0_0_0_3_5_0; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_0_0_0_3_5_0_0() { return cMandatoryKeyword_0_0_0_3_5_0_0; }
		
		//'for'
		public Keyword getForKeyword_0_0_0_3_5_0_1() { return cForKeyword_0_0_0_3_5_0_1; }
		
		//'required' 'for'
		public Group getGroup_0_0_0_3_5_1() { return cGroup_0_0_0_3_5_1; }
		
		//'required'
		public Keyword getRequiredKeyword_0_0_0_3_5_1_0() { return cRequiredKeyword_0_0_0_3_5_1_0; }
		
		//'for'
		public Keyword getForKeyword_0_0_0_3_5_1_1() { return cForKeyword_0_0_0_3_5_1_1; }
		
		//'needed' 'for'
		public Group getGroup_0_0_0_3_5_2() { return cGroup_0_0_0_3_5_2; }
		
		//'needed'
		public Keyword getNeededKeyword_0_0_0_3_5_2_0() { return cNeededKeyword_0_0_0_3_5_2_0; }
		
		//'for'
		public Keyword getForKeyword_0_0_0_3_5_2_1() { return cForKeyword_0_0_0_3_5_2_1; }
		
		//'obligatory' 'for'
		public Group getGroup_0_0_0_3_5_3() { return cGroup_0_0_0_3_5_3; }
		
		//'obligatory'
		public Keyword getObligatoryKeyword_0_0_0_3_5_3_0() { return cObligatoryKeyword_0_0_0_3_5_3_0; }
		
		//'for'
		public Keyword getForKeyword_0_0_0_3_5_3_1() { return cForKeyword_0_0_0_3_5_3_1; }
		
		//'mandatory' 'in'
		public Group getGroup_0_0_0_3_5_4() { return cGroup_0_0_0_3_5_4; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_0_0_0_3_5_4_0() { return cMandatoryKeyword_0_0_0_3_5_4_0; }
		
		//'in'
		public Keyword getInKeyword_0_0_0_3_5_4_1() { return cInKeyword_0_0_0_3_5_4_1; }
		
		//'required' 'in'
		public Group getGroup_0_0_0_3_5_5() { return cGroup_0_0_0_3_5_5; }
		
		//'required'
		public Keyword getRequiredKeyword_0_0_0_3_5_5_0() { return cRequiredKeyword_0_0_0_3_5_5_0; }
		
		//'in'
		public Keyword getInKeyword_0_0_0_3_5_5_1() { return cInKeyword_0_0_0_3_5_5_1; }
		
		//'needed' 'in'
		public Group getGroup_0_0_0_3_5_6() { return cGroup_0_0_0_3_5_6; }
		
		//'needed'
		public Keyword getNeededKeyword_0_0_0_3_5_6_0() { return cNeededKeyword_0_0_0_3_5_6_0; }
		
		//'in'
		public Keyword getInKeyword_0_0_0_3_5_6_1() { return cInKeyword_0_0_0_3_5_6_1; }
		
		//'obligatory' 'in'
		public Group getGroup_0_0_0_3_5_7() { return cGroup_0_0_0_3_5_7; }
		
		//'obligatory'
		public Keyword getObligatoryKeyword_0_0_0_3_5_7_0() { return cObligatoryKeyword_0_0_0_3_5_7_0; }
		
		//'in'
		public Keyword getInKeyword_0_0_0_3_5_7_1() { return cInKeyword_0_0_0_3_5_7_1; }
		
		//'a'?
		public Keyword getAKeyword_0_0_0_3_6() { return cAKeyword_0_0_0_3_6; }
		
		//scope=ElementScope
		public Assignment getScopeAssignment_0_0_1() { return cScopeAssignment_0_0_1; }
		
		//ElementScope
		public RuleCall getScopeElementScopeParserRuleCall_0_0_1_0() { return cScopeElementScopeParserRuleCall_0_0_1_0; }
		
		//('a' | 'an') scope=ElementScope 'is'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//('a' | 'an')
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }
		
		//'a'
		public Keyword getAKeyword_0_1_0_0() { return cAKeyword_0_1_0_0; }
		
		//'an'
		public Keyword getAnKeyword_0_1_0_1() { return cAnKeyword_0_1_0_1; }
		
		//scope=ElementScope
		public Assignment getScopeAssignment_0_1_1() { return cScopeAssignment_0_1_1; }
		
		//ElementScope
		public RuleCall getScopeElementScopeParserRuleCall_0_1_1_0() { return cScopeElementScopeParserRuleCall_0_1_1_0; }
		
		//'is'
		public Keyword getIsKeyword_0_1_2() { return cIsKeyword_0_1_2; }
		
		//rules+=Rule+
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}
	public class MatchScopedRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.MatchScopedRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMatchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMatchesMatchingRuleParserRuleCall_1_0 = (RuleCall)cMatchesAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		
		////MatchScopedRules returns cnl::MatchScopedRules:
		////	'match for all' scope=ElementScope matches+=Rule+ 'then' rules+=Rule;
		//MatchScopedRule cnl::MatchScopedRule:
		//	'find'
		//	matches+=MatchingRule+
		//	'then'
		//	rule=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//'find' matches+=MatchingRule+ 'then' rule=Rule
		public Group getGroup() { return cGroup; }
		
		//'find'
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }
		
		//matches+=MatchingRule+
		public Assignment getMatchesAssignment_1() { return cMatchesAssignment_1; }
		
		//MatchingRule
		public RuleCall getMatchesMatchingRuleParserRuleCall_1_0() { return cMatchesMatchingRuleParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//rule=Rule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_3_0() { return cRuleRuleParserRuleCall_3_0; }
	}
	public class MatchingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.MatchingRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariableNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableNameIDTerminalRuleCall_0_0_0 = (RuleCall)cVariableNameAssignment_0_0.eContents().get(0);
		private final Keyword cInKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cScopeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cScopeElementScopeParserRuleCall_0_2_0 = (RuleCall)cScopeAssignment_0_2.eContents().get(0);
		private final Keyword cWhereKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cAstRootAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAstRootLogicalExpressionParserRuleCall_0_4_0 = (RuleCall)cAstRootAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAllKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDataKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cInKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cScopeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cScopeElementScopeParserRuleCall_1_3_0 = (RuleCall)cScopeAssignment_1_3.eContents().get(0);
		private final Keyword cWhereKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cAstRootAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cAstRootLogicalExpressionParserRuleCall_1_5_0 = (RuleCall)cAstRootAssignment_1_5.eContents().get(0);
		
		//MatchingRule cnl::MatchingRule:
		//	variableName=ID 'in' scope=ElementScope 'where' astRoot=LogicalExpression | 'all' 'data' 'in' scope=ElementScope
		//	'where' astRoot=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//variableName=ID 'in' scope=ElementScope 'where' astRoot=LogicalExpression | 'all' 'data' 'in' scope=ElementScope 'where'
		//astRoot=LogicalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variableName=ID 'in' scope=ElementScope 'where' astRoot=LogicalExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_0_0() { return cVariableNameAssignment_0_0; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0_0_0() { return cVariableNameIDTerminalRuleCall_0_0_0; }
		
		//'in'
		public Keyword getInKeyword_0_1() { return cInKeyword_0_1; }
		
		//scope=ElementScope
		public Assignment getScopeAssignment_0_2() { return cScopeAssignment_0_2; }
		
		//ElementScope
		public RuleCall getScopeElementScopeParserRuleCall_0_2_0() { return cScopeElementScopeParserRuleCall_0_2_0; }
		
		//'where'
		public Keyword getWhereKeyword_0_3() { return cWhereKeyword_0_3; }
		
		//astRoot=LogicalExpression
		public Assignment getAstRootAssignment_0_4() { return cAstRootAssignment_0_4; }
		
		//LogicalExpression
		public RuleCall getAstRootLogicalExpressionParserRuleCall_0_4_0() { return cAstRootLogicalExpressionParserRuleCall_0_4_0; }
		
		//'all' 'data' 'in' scope=ElementScope 'where' astRoot=LogicalExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//'all'
		public Keyword getAllKeyword_1_0() { return cAllKeyword_1_0; }
		
		//'data'
		public Keyword getDataKeyword_1_1() { return cDataKeyword_1_1; }
		
		//'in'
		public Keyword getInKeyword_1_2() { return cInKeyword_1_2; }
		
		//scope=ElementScope
		public Assignment getScopeAssignment_1_3() { return cScopeAssignment_1_3; }
		
		//ElementScope
		public RuleCall getScopeElementScopeParserRuleCall_1_3_0() { return cScopeElementScopeParserRuleCall_1_3_0; }
		
		//'where'
		public Keyword getWhereKeyword_1_4() { return cWhereKeyword_1_4; }
		
		//astRoot=LogicalExpression
		public Assignment getAstRootAssignment_1_5() { return cAstRootAssignment_1_5; }
		
		//LogicalExpression
		public RuleCall getAstRootLogicalExpressionParserRuleCall_1_5_0() { return cAstRootLogicalExpressionParserRuleCall_1_5_0; }
	}
	public class ElementScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ElementScope");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_1 = (RuleCall)cTypeTypeCrossReference_0.eContents().get(1);
		
		//ElementScope cnl::ElementScope:
		//	type=[cnl::Type];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[cnl::Type]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[cnl::Type]
		public CrossReference getTypeTypeCrossReference_0() { return cTypeTypeCrossReference_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_1() { return cTypeTypeIDTerminalRuleCall_0_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCNLRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGPLRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Rule cnl::Rule:
		//	CNLRule | GPLRule;
		@Override public ParserRule getRule() { return rule; }
		
		//CNLRule | GPLRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CNLRule
		public RuleCall getCNLRuleParserRuleCall_0() { return cCNLRuleParserRuleCall_0; }
		
		//GPLRule
		public RuleCall getGPLRuleParserRuleCall_1() { return cGPLRuleParserRuleCall_1; }
	}
	public class CNLRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.CNLRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cAstRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAstRootLogicalExpressionParserRuleCall_1_0 = (RuleCall)cAstRootAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cErrorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cMessageKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMessageAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMessageSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cMessageAssignment_2_2.eContents().get(0);
		
		//CNLRule cnl::CNLRule:
		//	('rule' name=ID)? astRoot=LogicalExpression ('error'? 'message' message=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('rule' name=ID)? astRoot=LogicalExpression ('error'? 'message' message=STRING)?
		public Group getGroup() { return cGroup; }
		
		//('rule' name=ID)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'rule'
		public Keyword getRuleKeyword_0_0() { return cRuleKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//astRoot=LogicalExpression
		public Assignment getAstRootAssignment_1() { return cAstRootAssignment_1; }
		
		//LogicalExpression
		public RuleCall getAstRootLogicalExpressionParserRuleCall_1_0() { return cAstRootLogicalExpressionParserRuleCall_1_0; }
		
		//('error'? 'message' message=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'error'?
		public Keyword getErrorKeyword_2_0() { return cErrorKeyword_2_0; }
		
		//'message'
		public Keyword getMessageKeyword_2_1() { return cMessageKeyword_2_1; }
		
		//message=STRING
		public Assignment getMessageAssignment_2_2() { return cMessageAssignment_2_2; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_2_2_0() { return cMessageSTRINGTerminalRuleCall_2_2_0; }
	}
	public class GPLRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.GPLRule");
		private final RuleCall cEOLExpressionRuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//GPLRule cnl::GPLRule:
		//	EOLExpressionRule;
		@Override public ParserRule getRule() { return rule; }
		
		//EOLExpressionRule
		public RuleCall getEOLExpressionRuleParserRuleCall() { return cEOLExpressionRuleParserRuleCall; }
	}
	public class EOLExpressionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.EOLExpressionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEOLExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeSTRINGTerminalRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cEOLExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cErrorKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cMessageKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMessageAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMessageSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cMessageAssignment_4_2.eContents().get(0);
		
		//EOLExpressionRule cnl::EOLExpressionRule:
		//	('rule' name=ID)?
		//	'<EOLExpression>'
		//	code=STRING
		//	'</EOLExpression>' ('error'? 'message' message=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('rule' name=ID)? '<EOLExpression>' code=STRING '</EOLExpression>' ('error'? 'message' message=STRING)?
		public Group getGroup() { return cGroup; }
		
		//('rule' name=ID)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'rule'
		public Keyword getRuleKeyword_0_0() { return cRuleKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'<EOLExpression>'
		public Keyword getEOLExpressionKeyword_1() { return cEOLExpressionKeyword_1; }
		
		//code=STRING
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_2_0() { return cCodeSTRINGTerminalRuleCall_2_0; }
		
		//'</EOLExpression>'
		public Keyword getEOLExpressionKeyword_3() { return cEOLExpressionKeyword_3; }
		
		//('error'? 'message' message=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'error'?
		public Keyword getErrorKeyword_4_0() { return cErrorKeyword_4_0; }
		
		//'message'
		public Keyword getMessageKeyword_4_1() { return cMessageKeyword_4_1; }
		
		//message=STRING
		public Assignment getMessageAssignment_4_2() { return cMessageAssignment_4_2; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_4_2_0() { return cMessageSTRINGTerminalRuleCall_4_2_0; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.LogicalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cComparisonExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Action cImpliesExpressionLhsAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_0_1 = (Alternatives)cGroup_0_1_0.eContents().get(1);
		private final Keyword cImpliesKeyword_0_1_0_1_0 = (Keyword)cAlternatives_0_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_0_1_1 = (Group)cAlternatives_0_1_0_1.eContents().get(1);
		private final Keyword cOnlyKeyword_0_1_0_1_1_0 = (Keyword)cGroup_0_1_0_1_1.eContents().get(0);
		private final Keyword cIfKeyword_0_1_0_1_1_1 = (Keyword)cGroup_0_1_0_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cRhsComparisonExpressionParserRuleCall_0_1_0_2_0 = (RuleCall)cRhsAssignment_0_1_0_2.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Action cImpliesExpressionRhsAction_0_1_1_0 = (Action)cGroup_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1_1 = (Alternatives)cGroup_0_1_1.eContents().get(1);
		private final Keyword cWhenKeyword_0_1_1_1_0 = (Keyword)cAlternatives_0_1_1_1.eContents().get(0);
		private final Keyword cIfKeyword_0_1_1_1_1 = (Keyword)cAlternatives_0_1_1_1.eContents().get(1);
		private final Keyword cWhereKeyword_0_1_1_1_2 = (Keyword)cAlternatives_0_1_1_1.eContents().get(2);
		private final Assignment cLhsAssignment_0_1_1_2 = (Assignment)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cLhsComparisonExpressionParserRuleCall_0_1_1_2_0 = (RuleCall)cLhsAssignment_0_1_1_2.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Action cOrExpressionLhsAction_0_1_2_0 = (Action)cGroup_0_1_2.eContents().get(0);
		private final Keyword cOrKeyword_0_1_2_1 = (Keyword)cGroup_0_1_2.eContents().get(1);
		private final Assignment cRhsAssignment_0_1_2_2 = (Assignment)cGroup_0_1_2.eContents().get(2);
		private final RuleCall cRhsComparisonExpressionParserRuleCall_0_1_2_2_0 = (RuleCall)cRhsAssignment_0_1_2_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cAlternatives_0_1.eContents().get(3);
		private final Action cXorExpressionLhsAction_0_1_3_0 = (Action)cGroup_0_1_3.eContents().get(0);
		private final Keyword cXorKeyword_0_1_3_1 = (Keyword)cGroup_0_1_3.eContents().get(1);
		private final Assignment cRhsAssignment_0_1_3_2 = (Assignment)cGroup_0_1_3.eContents().get(2);
		private final RuleCall cRhsComparisonExpressionParserRuleCall_0_1_3_2_0 = (RuleCall)cRhsAssignment_0_1_3_2.eContents().get(0);
		private final Group cGroup_0_1_4 = (Group)cAlternatives_0_1.eContents().get(4);
		private final Action cAndExpressionLhsAction_0_1_4_0 = (Action)cGroup_0_1_4.eContents().get(0);
		private final Keyword cAndKeyword_0_1_4_1 = (Keyword)cGroup_0_1_4.eContents().get(1);
		private final Assignment cRhsAssignment_0_1_4_2 = (Assignment)cGroup_0_1_4.eContents().get(2);
		private final RuleCall cRhsComparisonExpressionParserRuleCall_0_1_4_2_0 = (RuleCall)cRhsAssignment_0_1_4_2.eContents().get(0);
		private final Group cGroup_0_1_5 = (Group)cAlternatives_0_1.eContents().get(5);
		private final Action cIfandonlyifExpressionLhsAction_0_1_5_0 = (Action)cGroup_0_1_5.eContents().get(0);
		private final Alternatives cAlternatives_0_1_5_1 = (Alternatives)cGroup_0_1_5.eContents().get(1);
		private final Keyword cIffKeyword_0_1_5_1_0 = (Keyword)cAlternatives_0_1_5_1.eContents().get(0);
		private final Group cGroup_0_1_5_1_1 = (Group)cAlternatives_0_1_5_1.eContents().get(1);
		private final Keyword cIfKeyword_0_1_5_1_1_0 = (Keyword)cGroup_0_1_5_1_1.eContents().get(0);
		private final Keyword cAndKeyword_0_1_5_1_1_1 = (Keyword)cGroup_0_1_5_1_1.eContents().get(1);
		private final Keyword cOnlyKeyword_0_1_5_1_1_2 = (Keyword)cGroup_0_1_5_1_1.eContents().get(2);
		private final Keyword cIfKeyword_0_1_5_1_1_3 = (Keyword)cGroup_0_1_5_1_1.eContents().get(3);
		private final Assignment cRhsAssignment_0_1_5_2 = (Assignment)cGroup_0_1_5.eContents().get(2);
		private final RuleCall cRhsComparisonExpressionParserRuleCall_0_1_5_2_0 = (RuleCall)cRhsAssignment_0_1_5_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cImpliesExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cIfKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cWhenKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cTheKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLhsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLhsLogicalExpressionParserRuleCall_1_3_0 = (RuleCall)cLhsAssignment_1_3.eContents().get(0);
		private final Keyword cThenKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cRhsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cRhsLogicalExpressionParserRuleCall_1_5_0 = (RuleCall)cRhsAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cXorExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cEitherKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLhsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLhsLogicalExpressionParserRuleCall_2_2_0 = (RuleCall)cLhsAssignment_2_2.eContents().get(0);
		private final Keyword cOrKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cRhsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cRhsLogicalExpressionParserRuleCall_2_4_0 = (RuleCall)cRhsAssignment_2_4.eContents().get(0);
		
		////operator priority is not reflected here - we rely on execution engine ordering of logical operations
		////TODO support brackets
		//LogicalExpression cnl::Expression:
		//	ComparisonExpression ({cnl::ImpliesExpression.lhs=current} ('implies' | 'only' 'if') rhs=ComparisonExpression |
		//	{cnl::ImpliesExpression.rhs=current} ('when' | 'if' | 'where') lhs=ComparisonExpression |
		//	{cnl::OrExpression.lhs=current} 'or' rhs=ComparisonExpression | {cnl::XorExpression.lhs=current} 'xor'
		//	rhs=ComparisonExpression | {cnl::AndExpression.lhs=current} 'and' rhs=ComparisonExpression |
		//	{cnl::IfandonlyifExpression.lhs=current} ('iff' | 'if' 'and' 'only' 'if') rhs=ComparisonExpression)*
		//	| {cnl::ImpliesExpression} ('if' | 'when') 'the'? lhs=LogicalExpression 'then' rhs=LogicalExpression |
		//	{cnl::XorExpression} 'either' lhs=LogicalExpression 'or' rhs=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({cnl::ImpliesExpression.lhs=current} ('implies' | 'only' 'if') rhs=ComparisonExpression |
		//{cnl::ImpliesExpression.rhs=current} ('when' | 'if' | 'where') lhs=ComparisonExpression |
		//{cnl::OrExpression.lhs=current} 'or' rhs=ComparisonExpression | {cnl::XorExpression.lhs=current} 'xor'
		//rhs=ComparisonExpression | {cnl::AndExpression.lhs=current} 'and' rhs=ComparisonExpression |
		//{cnl::IfandonlyifExpression.lhs=current} ('iff' | 'if' 'and' 'only' 'if') rhs=ComparisonExpression)* |
		//{cnl::ImpliesExpression} ('if' | 'when') 'the'? lhs=LogicalExpression 'then' rhs=LogicalExpression |
		//{cnl::XorExpression} 'either' lhs=LogicalExpression 'or' rhs=LogicalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComparisonExpression ({cnl::ImpliesExpression.lhs=current} ('implies' | 'only' 'if') rhs=ComparisonExpression |
		//{cnl::ImpliesExpression.rhs=current} ('when' | 'if' | 'where') lhs=ComparisonExpression |
		//{cnl::OrExpression.lhs=current} 'or' rhs=ComparisonExpression | {cnl::XorExpression.lhs=current} 'xor'
		//rhs=ComparisonExpression | {cnl::AndExpression.lhs=current} 'and' rhs=ComparisonExpression |
		//{cnl::IfandonlyifExpression.lhs=current} ('iff' | 'if' 'and' 'only' 'if') rhs=ComparisonExpression)*
		public Group getGroup_0() { return cGroup_0; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0_0() { return cComparisonExpressionParserRuleCall_0_0; }
		
		//({cnl::ImpliesExpression.lhs=current} ('implies' | 'only' 'if') rhs=ComparisonExpression |
		//{cnl::ImpliesExpression.rhs=current} ('when' | 'if' | 'where') lhs=ComparisonExpression |
		//{cnl::OrExpression.lhs=current} 'or' rhs=ComparisonExpression | {cnl::XorExpression.lhs=current} 'xor'
		//rhs=ComparisonExpression | {cnl::AndExpression.lhs=current} 'and' rhs=ComparisonExpression |
		//{cnl::IfandonlyifExpression.lhs=current} ('iff' | 'if' 'and' 'only' 'if') rhs=ComparisonExpression)*
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//{cnl::ImpliesExpression.lhs=current} ('implies' | 'only' 'if') rhs=ComparisonExpression
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//{cnl::ImpliesExpression.lhs=current}
		public Action getImpliesExpressionLhsAction_0_1_0_0() { return cImpliesExpressionLhsAction_0_1_0_0; }
		
		//('implies' | 'only' 'if')
		public Alternatives getAlternatives_0_1_0_1() { return cAlternatives_0_1_0_1; }
		
		//'implies'
		public Keyword getImpliesKeyword_0_1_0_1_0() { return cImpliesKeyword_0_1_0_1_0; }
		
		//'only' 'if'
		public Group getGroup_0_1_0_1_1() { return cGroup_0_1_0_1_1; }
		
		//'only'
		public Keyword getOnlyKeyword_0_1_0_1_1_0() { return cOnlyKeyword_0_1_0_1_1_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1_0_1_1_1() { return cIfKeyword_0_1_0_1_1_1; }
		
		//rhs=ComparisonExpression
		public Assignment getRhsAssignment_0_1_0_2() { return cRhsAssignment_0_1_0_2; }
		
		//ComparisonExpression
		public RuleCall getRhsComparisonExpressionParserRuleCall_0_1_0_2_0() { return cRhsComparisonExpressionParserRuleCall_0_1_0_2_0; }
		
		//{cnl::ImpliesExpression.rhs=current} ('when' | 'if' | 'where') lhs=ComparisonExpression
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//{cnl::ImpliesExpression.rhs=current}
		public Action getImpliesExpressionRhsAction_0_1_1_0() { return cImpliesExpressionRhsAction_0_1_1_0; }
		
		//('when' | 'if' | 'where')
		public Alternatives getAlternatives_0_1_1_1() { return cAlternatives_0_1_1_1; }
		
		//'when'
		public Keyword getWhenKeyword_0_1_1_1_0() { return cWhenKeyword_0_1_1_1_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1_1_1_1() { return cIfKeyword_0_1_1_1_1; }
		
		//'where'
		public Keyword getWhereKeyword_0_1_1_1_2() { return cWhereKeyword_0_1_1_1_2; }
		
		//lhs=ComparisonExpression
		public Assignment getLhsAssignment_0_1_1_2() { return cLhsAssignment_0_1_1_2; }
		
		//ComparisonExpression
		public RuleCall getLhsComparisonExpressionParserRuleCall_0_1_1_2_0() { return cLhsComparisonExpressionParserRuleCall_0_1_1_2_0; }
		
		//{cnl::OrExpression.lhs=current} 'or' rhs=ComparisonExpression
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//{cnl::OrExpression.lhs=current}
		public Action getOrExpressionLhsAction_0_1_2_0() { return cOrExpressionLhsAction_0_1_2_0; }
		
		//'or'
		public Keyword getOrKeyword_0_1_2_1() { return cOrKeyword_0_1_2_1; }
		
		//rhs=ComparisonExpression
		public Assignment getRhsAssignment_0_1_2_2() { return cRhsAssignment_0_1_2_2; }
		
		//ComparisonExpression
		public RuleCall getRhsComparisonExpressionParserRuleCall_0_1_2_2_0() { return cRhsComparisonExpressionParserRuleCall_0_1_2_2_0; }
		
		//{cnl::XorExpression.lhs=current} 'xor' rhs=ComparisonExpression
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//{cnl::XorExpression.lhs=current}
		public Action getXorExpressionLhsAction_0_1_3_0() { return cXorExpressionLhsAction_0_1_3_0; }
		
		//'xor'
		public Keyword getXorKeyword_0_1_3_1() { return cXorKeyword_0_1_3_1; }
		
		//rhs=ComparisonExpression
		public Assignment getRhsAssignment_0_1_3_2() { return cRhsAssignment_0_1_3_2; }
		
		//ComparisonExpression
		public RuleCall getRhsComparisonExpressionParserRuleCall_0_1_3_2_0() { return cRhsComparisonExpressionParserRuleCall_0_1_3_2_0; }
		
		//{cnl::AndExpression.lhs=current} 'and' rhs=ComparisonExpression
		public Group getGroup_0_1_4() { return cGroup_0_1_4; }
		
		//{cnl::AndExpression.lhs=current}
		public Action getAndExpressionLhsAction_0_1_4_0() { return cAndExpressionLhsAction_0_1_4_0; }
		
		//'and'
		public Keyword getAndKeyword_0_1_4_1() { return cAndKeyword_0_1_4_1; }
		
		//rhs=ComparisonExpression
		public Assignment getRhsAssignment_0_1_4_2() { return cRhsAssignment_0_1_4_2; }
		
		//ComparisonExpression
		public RuleCall getRhsComparisonExpressionParserRuleCall_0_1_4_2_0() { return cRhsComparisonExpressionParserRuleCall_0_1_4_2_0; }
		
		//{cnl::IfandonlyifExpression.lhs=current} ('iff' | 'if' 'and' 'only' 'if') rhs=ComparisonExpression
		public Group getGroup_0_1_5() { return cGroup_0_1_5; }
		
		//{cnl::IfandonlyifExpression.lhs=current}
		public Action getIfandonlyifExpressionLhsAction_0_1_5_0() { return cIfandonlyifExpressionLhsAction_0_1_5_0; }
		
		//('iff' | 'if' 'and' 'only' 'if')
		public Alternatives getAlternatives_0_1_5_1() { return cAlternatives_0_1_5_1; }
		
		//'iff'
		public Keyword getIffKeyword_0_1_5_1_0() { return cIffKeyword_0_1_5_1_0; }
		
		//'if' 'and' 'only' 'if'
		public Group getGroup_0_1_5_1_1() { return cGroup_0_1_5_1_1; }
		
		//'if'
		public Keyword getIfKeyword_0_1_5_1_1_0() { return cIfKeyword_0_1_5_1_1_0; }
		
		//'and'
		public Keyword getAndKeyword_0_1_5_1_1_1() { return cAndKeyword_0_1_5_1_1_1; }
		
		//'only'
		public Keyword getOnlyKeyword_0_1_5_1_1_2() { return cOnlyKeyword_0_1_5_1_1_2; }
		
		//'if'
		public Keyword getIfKeyword_0_1_5_1_1_3() { return cIfKeyword_0_1_5_1_1_3; }
		
		//rhs=ComparisonExpression
		public Assignment getRhsAssignment_0_1_5_2() { return cRhsAssignment_0_1_5_2; }
		
		//ComparisonExpression
		public RuleCall getRhsComparisonExpressionParserRuleCall_0_1_5_2_0() { return cRhsComparisonExpressionParserRuleCall_0_1_5_2_0; }
		
		//{cnl::ImpliesExpression} ('if' | 'when') 'the'? lhs=LogicalExpression 'then' rhs=LogicalExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{cnl::ImpliesExpression}
		public Action getImpliesExpressionAction_1_0() { return cImpliesExpressionAction_1_0; }
		
		//('if' | 'when')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'if'
		public Keyword getIfKeyword_1_1_0() { return cIfKeyword_1_1_0; }
		
		//'when'
		public Keyword getWhenKeyword_1_1_1() { return cWhenKeyword_1_1_1; }
		
		//'the'?
		public Keyword getTheKeyword_1_2() { return cTheKeyword_1_2; }
		
		//lhs=LogicalExpression
		public Assignment getLhsAssignment_1_3() { return cLhsAssignment_1_3; }
		
		//LogicalExpression
		public RuleCall getLhsLogicalExpressionParserRuleCall_1_3_0() { return cLhsLogicalExpressionParserRuleCall_1_3_0; }
		
		//'then'
		public Keyword getThenKeyword_1_4() { return cThenKeyword_1_4; }
		
		//rhs=LogicalExpression
		public Assignment getRhsAssignment_1_5() { return cRhsAssignment_1_5; }
		
		//LogicalExpression
		public RuleCall getRhsLogicalExpressionParserRuleCall_1_5_0() { return cRhsLogicalExpressionParserRuleCall_1_5_0; }
		
		//{cnl::XorExpression} 'either' lhs=LogicalExpression 'or' rhs=LogicalExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//{cnl::XorExpression}
		public Action getXorExpressionAction_2_0() { return cXorExpressionAction_2_0; }
		
		//'either'
		public Keyword getEitherKeyword_2_1() { return cEitherKeyword_2_1; }
		
		//lhs=LogicalExpression
		public Assignment getLhsAssignment_2_2() { return cLhsAssignment_2_2; }
		
		//LogicalExpression
		public RuleCall getLhsLogicalExpressionParserRuleCall_2_2_0() { return cLhsLogicalExpressionParserRuleCall_2_2_0; }
		
		//'or'
		public Keyword getOrKeyword_2_3() { return cOrKeyword_2_3; }
		
		//rhs=LogicalExpression
		public Assignment getRhsAssignment_2_4() { return cRhsAssignment_2_4; }
		
		//LogicalExpression
		public RuleCall getRhsLogicalExpressionParserRuleCall_2_4_0() { return cRhsLogicalExpressionParserRuleCall_2_4_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ComparisonExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDateExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cEqualityExpressionLhsAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Assignment cRhsAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cRhsExistanceValueParserRuleCall_1_1_0_1_0 = (RuleCall)cRhsAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cNegatedEqualityExpressionLhsAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cRhsEmptyValueParserRuleCall_1_1_1_1_0 = (RuleCall)cRhsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Action cEqualityExpressionLhsAction_1_1_2_0 = (Action)cGroup_1_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2_1 = (Alternatives)cGroup_1_1_2.eContents().get(1);
		private final Keyword cEqualsKeyword_1_1_2_1_0 = (Keyword)cAlternatives_1_1_2_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1_2_1_1 = (Keyword)cAlternatives_1_1_2_1.eContents().get(1);
		private final Group cGroup_1_1_2_1_2 = (Group)cAlternatives_1_1_2_1.eContents().get(2);
		private final Keyword cMustKeyword_1_1_2_1_2_0 = (Keyword)cGroup_1_1_2_1_2.eContents().get(0);
		private final Keyword cBeKeyword_1_1_2_1_2_1 = (Keyword)cGroup_1_1_2_1_2.eContents().get(1);
		private final Assignment cRhsAssignment_1_1_2_2 = (Assignment)cGroup_1_1_2.eContents().get(2);
		private final RuleCall cRhsArithmeticExpressionParserRuleCall_1_1_2_2_0 = (RuleCall)cRhsAssignment_1_1_2_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cAlternatives_1_1.eContents().get(3);
		private final Action cNegatedEqualityExpressionLhsAction_1_1_3_0 = (Action)cGroup_1_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_1_3_1 = (Alternatives)cGroup_1_1_3.eContents().get(1);
		private final Group cGroup_1_1_3_1_0 = (Group)cAlternatives_1_1_3_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1_3_1_0_0 = (Keyword)cGroup_1_1_3_1_0.eContents().get(0);
		private final Keyword cNotKeyword_1_1_3_1_0_1 = (Keyword)cGroup_1_1_3_1_0.eContents().get(1);
		private final Group cGroup_1_1_3_1_1 = (Group)cAlternatives_1_1_3_1.eContents().get(1);
		private final Keyword cCannotKeyword_1_1_3_1_1_0 = (Keyword)cGroup_1_1_3_1_1.eContents().get(0);
		private final Keyword cBeKeyword_1_1_3_1_1_1 = (Keyword)cGroup_1_1_3_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_1_3_2 = (Assignment)cGroup_1_1_3.eContents().get(2);
		private final RuleCall cRhsArithmeticExpressionParserRuleCall_1_1_3_2_0 = (RuleCall)cRhsAssignment_1_1_3_2.eContents().get(0);
		private final Group cGroup_1_1_4 = (Group)cAlternatives_1_1.eContents().get(4);
		private final Action cGreaterThanExpressionLhsAction_1_1_4_0 = (Action)cGroup_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_4_1 = (Group)cGroup_1_1_4.eContents().get(1);
		private final Alternatives cAlternatives_1_1_4_1_0 = (Alternatives)cGroup_1_1_4_1.eContents().get(0);
		private final Group cGroup_1_1_4_1_0_0 = (Group)cAlternatives_1_1_4_1_0.eContents().get(0);
		private final Keyword cMustKeyword_1_1_4_1_0_0_0 = (Keyword)cGroup_1_1_4_1_0_0.eContents().get(0);
		private final Keyword cBeKeyword_1_1_4_1_0_0_1 = (Keyword)cGroup_1_1_4_1_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1_1_4_1_0_1 = (Keyword)cAlternatives_1_1_4_1_0.eContents().get(1);
		private final Keyword cGreaterKeyword_1_1_4_1_1 = (Keyword)cGroup_1_1_4_1.eContents().get(1);
		private final Keyword cThanKeyword_1_1_4_1_2 = (Keyword)cGroup_1_1_4_1.eContents().get(2);
		private final Assignment cRhsAssignment_1_1_4_2 = (Assignment)cGroup_1_1_4.eContents().get(2);
		private final RuleCall cRhsArithmeticExpressionParserRuleCall_1_1_4_2_0 = (RuleCall)cRhsAssignment_1_1_4_2.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cAlternatives_1_1.eContents().get(5);
		private final Action cLessThanExpressionLhsAction_1_1_5_0 = (Action)cGroup_1_1_5.eContents().get(0);
		private final Group cGroup_1_1_5_1 = (Group)cGroup_1_1_5.eContents().get(1);
		private final Alternatives cAlternatives_1_1_5_1_0 = (Alternatives)cGroup_1_1_5_1.eContents().get(0);
		private final Group cGroup_1_1_5_1_0_0 = (Group)cAlternatives_1_1_5_1_0.eContents().get(0);
		private final Keyword cMustKeyword_1_1_5_1_0_0_0 = (Keyword)cGroup_1_1_5_1_0_0.eContents().get(0);
		private final Keyword cBeKeyword_1_1_5_1_0_0_1 = (Keyword)cGroup_1_1_5_1_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1_1_5_1_0_1 = (Keyword)cAlternatives_1_1_5_1_0.eContents().get(1);
		private final Keyword cLessKeyword_1_1_5_1_1 = (Keyword)cGroup_1_1_5_1.eContents().get(1);
		private final Keyword cThanKeyword_1_1_5_1_2 = (Keyword)cGroup_1_1_5_1.eContents().get(2);
		private final Assignment cRhsAssignment_1_1_5_2 = (Assignment)cGroup_1_1_5.eContents().get(2);
		private final RuleCall cRhsArithmeticExpressionParserRuleCall_1_1_5_2_0 = (RuleCall)cRhsAssignment_1_1_5_2.eContents().get(0);
		private final Group cGroup_1_1_6 = (Group)cAlternatives_1_1.eContents().get(6);
		private final Action cGTEExpressionLhsAction_1_1_6_0 = (Action)cGroup_1_1_6.eContents().get(0);
		private final Alternatives cAlternatives_1_1_6_1 = (Alternatives)cGroup_1_1_6.eContents().get(1);
		private final Group cGroup_1_1_6_1_0 = (Group)cAlternatives_1_1_6_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_6_1_0_0 = (Alternatives)cGroup_1_1_6_1_0.eContents().get(0);
		private final Group cGroup_1_1_6_1_0_0_0 = (Group)cAlternatives_1_1_6_1_0_0.eContents().get(0);
		private final Keyword cMustKeyword_1_1_6_1_0_0_0_0 = (Keyword)cGroup_1_1_6_1_0_0_0.eContents().get(0);
		private final Keyword cBeKeyword_1_1_6_1_0_0_0_1 = (Keyword)cGroup_1_1_6_1_0_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1_1_6_1_0_0_1 = (Keyword)cAlternatives_1_1_6_1_0_0.eContents().get(1);
		private final Keyword cGreaterKeyword_1_1_6_1_0_1 = (Keyword)cGroup_1_1_6_1_0.eContents().get(1);
		private final Keyword cThanKeyword_1_1_6_1_0_2 = (Keyword)cGroup_1_1_6_1_0.eContents().get(2);
		private final Keyword cOrKeyword_1_1_6_1_0_3 = (Keyword)cGroup_1_1_6_1_0.eContents().get(3);
		private final Keyword cEqualKeyword_1_1_6_1_0_4 = (Keyword)cGroup_1_1_6_1_0.eContents().get(4);
		private final Keyword cToKeyword_1_1_6_1_0_5 = (Keyword)cGroup_1_1_6_1_0.eContents().get(5);
		private final Group cGroup_1_1_6_1_1 = (Group)cAlternatives_1_1_6_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_6_1_1_0 = (Alternatives)cGroup_1_1_6_1_1.eContents().get(0);
		private final Group cGroup_1_1_6_1_1_0_0 = (Group)cAlternatives_1_1_6_1_1_0.eContents().get(0);
		private final Keyword cMustKeyword_1_1_6_1_1_0_0_0 = (Keyword)cGroup_1_1_6_1_1_0_0.eContents().get(0);
		private final Keyword cBeKeyword_1_1_6_1_1_0_0_1 = (Keyword)cGroup_1_1_6_1_1_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1_1_6_1_1_0_1 = (Keyword)cAlternatives_1_1_6_1_1_0.eContents().get(1);
		private final Keyword cGreaterKeyword_1_1_6_1_1_1 = (Keyword)cGroup_1_1_6_1_1.eContents().get(1);
		private final Keyword cThanKeyword_1_1_6_1_1_2 = (Keyword)cGroup_1_1_6_1_1.eContents().get(2);
		private final Keyword cOrKeyword_1_1_6_1_1_3 = (Keyword)cGroup_1_1_6_1_1.eContents().get(3);
		private final Keyword cEqualsKeyword_1_1_6_1_1_4 = (Keyword)cGroup_1_1_6_1_1.eContents().get(4);
		private final Assignment cRhsAssignment_1_1_6_2 = (Assignment)cGroup_1_1_6.eContents().get(2);
		private final RuleCall cRhsArithmeticExpressionParserRuleCall_1_1_6_2_0 = (RuleCall)cRhsAssignment_1_1_6_2.eContents().get(0);
		private final Group cGroup_1_1_7 = (Group)cAlternatives_1_1.eContents().get(7);
		private final Action cLTEExpressionLhsAction_1_1_7_0 = (Action)cGroup_1_1_7.eContents().get(0);
		private final Alternatives cAlternatives_1_1_7_1 = (Alternatives)cGroup_1_1_7.eContents().get(1);
		private final Group cGroup_1_1_7_1_0 = (Group)cAlternatives_1_1_7_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_7_1_0_0 = (Alternatives)cGroup_1_1_7_1_0.eContents().get(0);
		private final Group cGroup_1_1_7_1_0_0_0 = (Group)cAlternatives_1_1_7_1_0_0.eContents().get(0);
		private final Keyword cMustKeyword_1_1_7_1_0_0_0_0 = (Keyword)cGroup_1_1_7_1_0_0_0.eContents().get(0);
		private final Keyword cBeKeyword_1_1_7_1_0_0_0_1 = (Keyword)cGroup_1_1_7_1_0_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1_1_7_1_0_0_1 = (Keyword)cAlternatives_1_1_7_1_0_0.eContents().get(1);
		private final Keyword cLessKeyword_1_1_7_1_0_1 = (Keyword)cGroup_1_1_7_1_0.eContents().get(1);
		private final Keyword cThanKeyword_1_1_7_1_0_2 = (Keyword)cGroup_1_1_7_1_0.eContents().get(2);
		private final Keyword cOrKeyword_1_1_7_1_0_3 = (Keyword)cGroup_1_1_7_1_0.eContents().get(3);
		private final Keyword cEqualKeyword_1_1_7_1_0_4 = (Keyword)cGroup_1_1_7_1_0.eContents().get(4);
		private final Keyword cToKeyword_1_1_7_1_0_5 = (Keyword)cGroup_1_1_7_1_0.eContents().get(5);
		private final Group cGroup_1_1_7_1_1 = (Group)cAlternatives_1_1_7_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_7_1_1_0 = (Alternatives)cGroup_1_1_7_1_1.eContents().get(0);
		private final Group cGroup_1_1_7_1_1_0_0 = (Group)cAlternatives_1_1_7_1_1_0.eContents().get(0);
		private final Keyword cMustKeyword_1_1_7_1_1_0_0_0 = (Keyword)cGroup_1_1_7_1_1_0_0.eContents().get(0);
		private final Keyword cBeKeyword_1_1_7_1_1_0_0_1 = (Keyword)cGroup_1_1_7_1_1_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1_1_7_1_1_0_1 = (Keyword)cAlternatives_1_1_7_1_1_0.eContents().get(1);
		private final Keyword cLessKeyword_1_1_7_1_1_1 = (Keyword)cGroup_1_1_7_1_1.eContents().get(1);
		private final Keyword cThanKeyword_1_1_7_1_1_2 = (Keyword)cGroup_1_1_7_1_1.eContents().get(2);
		private final Keyword cOrKeyword_1_1_7_1_1_3 = (Keyword)cGroup_1_1_7_1_1.eContents().get(3);
		private final Keyword cEqualsKeyword_1_1_7_1_1_4 = (Keyword)cGroup_1_1_7_1_1.eContents().get(4);
		private final Assignment cRhsAssignment_1_1_7_2 = (Assignment)cGroup_1_1_7.eContents().get(2);
		private final RuleCall cRhsArithmeticExpressionParserRuleCall_1_1_7_2_0 = (RuleCall)cRhsAssignment_1_1_7_2.eContents().get(0);
		
		////operator priority is not reflected here - we rely on execution engine ordering of arithmetic operations
		////NB: comparison operators are commonly of equal priorities.
		////TODO support brackets
		//ComparisonExpression cnl::Expression:
		//	DateExpression
		//	| ArithmeticExpression ({cnl::EqualityExpression.lhs=current} rhs=ExistanceValue |
		//	{cnl::NegatedEqualityExpression.lhs=current} rhs=EmptyValue | {cnl::EqualityExpression.lhs=current} ('equals' | 'is'
		//	| 'must' 'be') rhs=ArithmeticExpression | {cnl::NegatedEqualityExpression.lhs=current} ('is' 'not' | 'cannot' 'be')
		//	rhs=ArithmeticExpression | {cnl::GreaterThanExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than')
		//	rhs=ArithmeticExpression | {cnl::LessThanExpression.lhs=current} (('must' 'be' | 'is') 'less' 'than')
		//	rhs=ArithmeticExpression | {cnl::GTEExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to'
		//	| ('must' 'be' | 'is') 'greater' 'than' 'or' 'equals') rhs=ArithmeticExpression | {cnl::LTEExpression.lhs=current}
		//	(('must' 'be' | 'is') 'less' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'less' 'than' 'or' 'equals')
		//	rhs=ArithmeticExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DateExpression | ArithmeticExpression ({cnl::EqualityExpression.lhs=current} rhs=ExistanceValue |
		//{cnl::NegatedEqualityExpression.lhs=current} rhs=EmptyValue | {cnl::EqualityExpression.lhs=current} ('equals' | 'is' |
		//'must' 'be') rhs=ArithmeticExpression | {cnl::NegatedEqualityExpression.lhs=current} ('is' 'not' | 'cannot' 'be')
		//rhs=ArithmeticExpression | {cnl::GreaterThanExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than')
		//rhs=ArithmeticExpression | {cnl::LessThanExpression.lhs=current} (('must' 'be' | 'is') 'less' 'than')
		//rhs=ArithmeticExpression | {cnl::GTEExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to' |
		//('must' 'be' | 'is') 'greater' 'than' 'or' 'equals') rhs=ArithmeticExpression | {cnl::LTEExpression.lhs=current}
		//(('must' 'be' | 'is') 'less' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'less' 'than' 'or' 'equals')
		//rhs=ArithmeticExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DateExpression
		public RuleCall getDateExpressionParserRuleCall_0() { return cDateExpressionParserRuleCall_0; }
		
		//ArithmeticExpression ({cnl::EqualityExpression.lhs=current} rhs=ExistanceValue |
		//{cnl::NegatedEqualityExpression.lhs=current} rhs=EmptyValue | {cnl::EqualityExpression.lhs=current} ('equals' | 'is' |
		//'must' 'be') rhs=ArithmeticExpression | {cnl::NegatedEqualityExpression.lhs=current} ('is' 'not' | 'cannot' 'be')
		//rhs=ArithmeticExpression | {cnl::GreaterThanExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than')
		//rhs=ArithmeticExpression | {cnl::LessThanExpression.lhs=current} (('must' 'be' | 'is') 'less' 'than')
		//rhs=ArithmeticExpression | {cnl::GTEExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to' |
		//('must' 'be' | 'is') 'greater' 'than' 'or' 'equals') rhs=ArithmeticExpression | {cnl::LTEExpression.lhs=current}
		//(('must' 'be' | 'is') 'less' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'less' 'than' 'or' 'equals')
		//rhs=ArithmeticExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		////implied equality
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_1_0() { return cArithmeticExpressionParserRuleCall_1_0; }
		
		//({cnl::EqualityExpression.lhs=current} rhs=ExistanceValue | {cnl::NegatedEqualityExpression.lhs=current} rhs=EmptyValue
		//| {cnl::EqualityExpression.lhs=current} ('equals' | 'is' | 'must' 'be') rhs=ArithmeticExpression |
		//{cnl::NegatedEqualityExpression.lhs=current} ('is' 'not' | 'cannot' 'be') rhs=ArithmeticExpression |
		//{cnl::GreaterThanExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than') rhs=ArithmeticExpression |
		//{cnl::LessThanExpression.lhs=current} (('must' 'be' | 'is') 'less' 'than') rhs=ArithmeticExpression |
		//{cnl::GTEExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is')
		//'greater' 'than' 'or' 'equals') rhs=ArithmeticExpression | {cnl::LTEExpression.lhs=current} (('must' 'be' | 'is')
		//'less' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'less' 'than' 'or' 'equals') rhs=ArithmeticExpression)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//{cnl::EqualityExpression.lhs=current} rhs=ExistanceValue
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{cnl::EqualityExpression.lhs=current}
		public Action getEqualityExpressionLhsAction_1_1_0_0() { return cEqualityExpressionLhsAction_1_1_0_0; }
		
		//rhs=ExistanceValue
		public Assignment getRhsAssignment_1_1_0_1() { return cRhsAssignment_1_1_0_1; }
		
		//ExistanceValue
		public RuleCall getRhsExistanceValueParserRuleCall_1_1_0_1_0() { return cRhsExistanceValueParserRuleCall_1_1_0_1_0; }
		
		//{cnl::NegatedEqualityExpression.lhs=current} rhs=EmptyValue
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//{cnl::NegatedEqualityExpression.lhs=current}
		public Action getNegatedEqualityExpressionLhsAction_1_1_1_0() { return cNegatedEqualityExpressionLhsAction_1_1_1_0; }
		
		//rhs=EmptyValue
		public Assignment getRhsAssignment_1_1_1_1() { return cRhsAssignment_1_1_1_1; }
		
		//EmptyValue
		public RuleCall getRhsEmptyValueParserRuleCall_1_1_1_1_0() { return cRhsEmptyValueParserRuleCall_1_1_1_1_0; }
		
		//{cnl::EqualityExpression.lhs=current} ('equals' | 'is' | 'must' 'be') rhs=ArithmeticExpression
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//{cnl::EqualityExpression.lhs=current}
		public Action getEqualityExpressionLhsAction_1_1_2_0() { return cEqualityExpressionLhsAction_1_1_2_0; }
		
		//('equals' | 'is' | 'must' 'be')
		public Alternatives getAlternatives_1_1_2_1() { return cAlternatives_1_1_2_1; }
		
		//'equals'
		public Keyword getEqualsKeyword_1_1_2_1_0() { return cEqualsKeyword_1_1_2_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_1_2_1_1() { return cIsKeyword_1_1_2_1_1; }
		
		//'must' 'be'
		public Group getGroup_1_1_2_1_2() { return cGroup_1_1_2_1_2; }
		
		//'must'
		public Keyword getMustKeyword_1_1_2_1_2_0() { return cMustKeyword_1_1_2_1_2_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_2_1_2_1() { return cBeKeyword_1_1_2_1_2_1; }
		
		//rhs=ArithmeticExpression
		public Assignment getRhsAssignment_1_1_2_2() { return cRhsAssignment_1_1_2_2; }
		
		//ArithmeticExpression
		public RuleCall getRhsArithmeticExpressionParserRuleCall_1_1_2_2_0() { return cRhsArithmeticExpressionParserRuleCall_1_1_2_2_0; }
		
		//{cnl::NegatedEqualityExpression.lhs=current} ('is' 'not' | 'cannot' 'be') rhs=ArithmeticExpression
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//{cnl::NegatedEqualityExpression.lhs=current}
		public Action getNegatedEqualityExpressionLhsAction_1_1_3_0() { return cNegatedEqualityExpressionLhsAction_1_1_3_0; }
		
		//('is' 'not' | 'cannot' 'be')
		public Alternatives getAlternatives_1_1_3_1() { return cAlternatives_1_1_3_1; }
		
		//'is' 'not'
		public Group getGroup_1_1_3_1_0() { return cGroup_1_1_3_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_1_3_1_0_0() { return cIsKeyword_1_1_3_1_0_0; }
		
		//'not'
		public Keyword getNotKeyword_1_1_3_1_0_1() { return cNotKeyword_1_1_3_1_0_1; }
		
		//'cannot' 'be'
		public Group getGroup_1_1_3_1_1() { return cGroup_1_1_3_1_1; }
		
		//'cannot'
		public Keyword getCannotKeyword_1_1_3_1_1_0() { return cCannotKeyword_1_1_3_1_1_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_3_1_1_1() { return cBeKeyword_1_1_3_1_1_1; }
		
		//rhs=ArithmeticExpression
		public Assignment getRhsAssignment_1_1_3_2() { return cRhsAssignment_1_1_3_2; }
		
		//ArithmeticExpression
		public RuleCall getRhsArithmeticExpressionParserRuleCall_1_1_3_2_0() { return cRhsArithmeticExpressionParserRuleCall_1_1_3_2_0; }
		
		//{cnl::GreaterThanExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than') rhs=ArithmeticExpression
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }
		
		//{cnl::GreaterThanExpression.lhs=current}
		public Action getGreaterThanExpressionLhsAction_1_1_4_0() { return cGreaterThanExpressionLhsAction_1_1_4_0; }
		
		//(('must' 'be' | 'is') 'greater' 'than')
		public Group getGroup_1_1_4_1() { return cGroup_1_1_4_1; }
		
		//('must' 'be' | 'is')
		public Alternatives getAlternatives_1_1_4_1_0() { return cAlternatives_1_1_4_1_0; }
		
		//'must' 'be'
		public Group getGroup_1_1_4_1_0_0() { return cGroup_1_1_4_1_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_1_4_1_0_0_0() { return cMustKeyword_1_1_4_1_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_4_1_0_0_1() { return cBeKeyword_1_1_4_1_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_4_1_0_1() { return cIsKeyword_1_1_4_1_0_1; }
		
		//'greater'
		public Keyword getGreaterKeyword_1_1_4_1_1() { return cGreaterKeyword_1_1_4_1_1; }
		
		//'than'
		public Keyword getThanKeyword_1_1_4_1_2() { return cThanKeyword_1_1_4_1_2; }
		
		//rhs=ArithmeticExpression
		public Assignment getRhsAssignment_1_1_4_2() { return cRhsAssignment_1_1_4_2; }
		
		//ArithmeticExpression
		public RuleCall getRhsArithmeticExpressionParserRuleCall_1_1_4_2_0() { return cRhsArithmeticExpressionParserRuleCall_1_1_4_2_0; }
		
		//{cnl::LessThanExpression.lhs=current} (('must' 'be' | 'is') 'less' 'than') rhs=ArithmeticExpression
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }
		
		//{cnl::LessThanExpression.lhs=current}
		public Action getLessThanExpressionLhsAction_1_1_5_0() { return cLessThanExpressionLhsAction_1_1_5_0; }
		
		//(('must' 'be' | 'is') 'less' 'than')
		public Group getGroup_1_1_5_1() { return cGroup_1_1_5_1; }
		
		//('must' 'be' | 'is')
		public Alternatives getAlternatives_1_1_5_1_0() { return cAlternatives_1_1_5_1_0; }
		
		//'must' 'be'
		public Group getGroup_1_1_5_1_0_0() { return cGroup_1_1_5_1_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_1_5_1_0_0_0() { return cMustKeyword_1_1_5_1_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_5_1_0_0_1() { return cBeKeyword_1_1_5_1_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_5_1_0_1() { return cIsKeyword_1_1_5_1_0_1; }
		
		//'less'
		public Keyword getLessKeyword_1_1_5_1_1() { return cLessKeyword_1_1_5_1_1; }
		
		//'than'
		public Keyword getThanKeyword_1_1_5_1_2() { return cThanKeyword_1_1_5_1_2; }
		
		//rhs=ArithmeticExpression
		public Assignment getRhsAssignment_1_1_5_2() { return cRhsAssignment_1_1_5_2; }
		
		//ArithmeticExpression
		public RuleCall getRhsArithmeticExpressionParserRuleCall_1_1_5_2_0() { return cRhsArithmeticExpressionParserRuleCall_1_1_5_2_0; }
		
		//{cnl::GTEExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is')
		//'greater' 'than' 'or' 'equals') rhs=ArithmeticExpression
		public Group getGroup_1_1_6() { return cGroup_1_1_6; }
		
		//{cnl::GTEExpression.lhs=current}
		public Action getGTEExpressionLhsAction_1_1_6_0() { return cGTEExpressionLhsAction_1_1_6_0; }
		
		//(('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'greater' 'than' 'or' 'equals')
		public Alternatives getAlternatives_1_1_6_1() { return cAlternatives_1_1_6_1; }
		
		//('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to'
		public Group getGroup_1_1_6_1_0() { return cGroup_1_1_6_1_0; }
		
		//('must' 'be' | 'is')
		public Alternatives getAlternatives_1_1_6_1_0_0() { return cAlternatives_1_1_6_1_0_0; }
		
		//'must' 'be'
		public Group getGroup_1_1_6_1_0_0_0() { return cGroup_1_1_6_1_0_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_1_6_1_0_0_0_0() { return cMustKeyword_1_1_6_1_0_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_6_1_0_0_0_1() { return cBeKeyword_1_1_6_1_0_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_6_1_0_0_1() { return cIsKeyword_1_1_6_1_0_0_1; }
		
		//'greater'
		public Keyword getGreaterKeyword_1_1_6_1_0_1() { return cGreaterKeyword_1_1_6_1_0_1; }
		
		//'than'
		public Keyword getThanKeyword_1_1_6_1_0_2() { return cThanKeyword_1_1_6_1_0_2; }
		
		//'or'
		public Keyword getOrKeyword_1_1_6_1_0_3() { return cOrKeyword_1_1_6_1_0_3; }
		
		//'equal'
		public Keyword getEqualKeyword_1_1_6_1_0_4() { return cEqualKeyword_1_1_6_1_0_4; }
		
		//'to'
		public Keyword getToKeyword_1_1_6_1_0_5() { return cToKeyword_1_1_6_1_0_5; }
		
		//('must' 'be' | 'is') 'greater' 'than' 'or' 'equals'
		public Group getGroup_1_1_6_1_1() { return cGroup_1_1_6_1_1; }
		
		//('must' 'be' | 'is')
		public Alternatives getAlternatives_1_1_6_1_1_0() { return cAlternatives_1_1_6_1_1_0; }
		
		//'must' 'be'
		public Group getGroup_1_1_6_1_1_0_0() { return cGroup_1_1_6_1_1_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_1_6_1_1_0_0_0() { return cMustKeyword_1_1_6_1_1_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_6_1_1_0_0_1() { return cBeKeyword_1_1_6_1_1_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_6_1_1_0_1() { return cIsKeyword_1_1_6_1_1_0_1; }
		
		//'greater'
		public Keyword getGreaterKeyword_1_1_6_1_1_1() { return cGreaterKeyword_1_1_6_1_1_1; }
		
		//'than'
		public Keyword getThanKeyword_1_1_6_1_1_2() { return cThanKeyword_1_1_6_1_1_2; }
		
		//'or'
		public Keyword getOrKeyword_1_1_6_1_1_3() { return cOrKeyword_1_1_6_1_1_3; }
		
		//'equals'
		public Keyword getEqualsKeyword_1_1_6_1_1_4() { return cEqualsKeyword_1_1_6_1_1_4; }
		
		//rhs=ArithmeticExpression
		public Assignment getRhsAssignment_1_1_6_2() { return cRhsAssignment_1_1_6_2; }
		
		//ArithmeticExpression
		public RuleCall getRhsArithmeticExpressionParserRuleCall_1_1_6_2_0() { return cRhsArithmeticExpressionParserRuleCall_1_1_6_2_0; }
		
		//{cnl::LTEExpression.lhs=current} (('must' 'be' | 'is') 'less' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'less'
		//'than' 'or' 'equals') rhs=ArithmeticExpression
		public Group getGroup_1_1_7() { return cGroup_1_1_7; }
		
		//{cnl::LTEExpression.lhs=current}
		public Action getLTEExpressionLhsAction_1_1_7_0() { return cLTEExpressionLhsAction_1_1_7_0; }
		
		//(('must' 'be' | 'is') 'less' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'less' 'than' 'or' 'equals')
		public Alternatives getAlternatives_1_1_7_1() { return cAlternatives_1_1_7_1; }
		
		//('must' 'be' | 'is') 'less' 'than' 'or' 'equal' 'to'
		public Group getGroup_1_1_7_1_0() { return cGroup_1_1_7_1_0; }
		
		//('must' 'be' | 'is')
		public Alternatives getAlternatives_1_1_7_1_0_0() { return cAlternatives_1_1_7_1_0_0; }
		
		//'must' 'be'
		public Group getGroup_1_1_7_1_0_0_0() { return cGroup_1_1_7_1_0_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_1_7_1_0_0_0_0() { return cMustKeyword_1_1_7_1_0_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_7_1_0_0_0_1() { return cBeKeyword_1_1_7_1_0_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_7_1_0_0_1() { return cIsKeyword_1_1_7_1_0_0_1; }
		
		//'less'
		public Keyword getLessKeyword_1_1_7_1_0_1() { return cLessKeyword_1_1_7_1_0_1; }
		
		//'than'
		public Keyword getThanKeyword_1_1_7_1_0_2() { return cThanKeyword_1_1_7_1_0_2; }
		
		//'or'
		public Keyword getOrKeyword_1_1_7_1_0_3() { return cOrKeyword_1_1_7_1_0_3; }
		
		//'equal'
		public Keyword getEqualKeyword_1_1_7_1_0_4() { return cEqualKeyword_1_1_7_1_0_4; }
		
		//'to'
		public Keyword getToKeyword_1_1_7_1_0_5() { return cToKeyword_1_1_7_1_0_5; }
		
		//('must' 'be' | 'is') 'less' 'than' 'or' 'equals'
		public Group getGroup_1_1_7_1_1() { return cGroup_1_1_7_1_1; }
		
		//('must' 'be' | 'is')
		public Alternatives getAlternatives_1_1_7_1_1_0() { return cAlternatives_1_1_7_1_1_0; }
		
		//'must' 'be'
		public Group getGroup_1_1_7_1_1_0_0() { return cGroup_1_1_7_1_1_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_1_7_1_1_0_0_0() { return cMustKeyword_1_1_7_1_1_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1_7_1_1_0_0_1() { return cBeKeyword_1_1_7_1_1_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_7_1_1_0_1() { return cIsKeyword_1_1_7_1_1_0_1; }
		
		//'less'
		public Keyword getLessKeyword_1_1_7_1_1_1() { return cLessKeyword_1_1_7_1_1_1; }
		
		//'than'
		public Keyword getThanKeyword_1_1_7_1_1_2() { return cThanKeyword_1_1_7_1_1_2; }
		
		//'or'
		public Keyword getOrKeyword_1_1_7_1_1_3() { return cOrKeyword_1_1_7_1_1_3; }
		
		//'equals'
		public Keyword getEqualsKeyword_1_1_7_1_1_4() { return cEqualsKeyword_1_1_7_1_1_4; }
		
		//rhs=ArithmeticExpression
		public Assignment getRhsAssignment_1_1_7_2() { return cRhsAssignment_1_1_7_2; }
		
		//ArithmeticExpression
		public RuleCall getRhsArithmeticExpressionParserRuleCall_1_1_7_2_0() { return cRhsArithmeticExpressionParserRuleCall_1_1_7_2_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArithmeticOperationsEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsBaseExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		////operator priority is not reflected here - we rely on execution engine ordering of arithmetic operations
		////TODO support brackets
		//ArithmeticExpression cnl::Expression:
		//	BaseExpression ({cnl::ArithmeticExpression.lhs=current} type=ArithmeticOperations rhs=BaseExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseExpression ({cnl::ArithmeticExpression.lhs=current} type=ArithmeticOperations rhs=BaseExpression)*
		public Group getGroup() { return cGroup; }
		
		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }
		
		//({cnl::ArithmeticExpression.lhs=current} type=ArithmeticOperations rhs=BaseExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{cnl::ArithmeticExpression.lhs=current}
		public Action getArithmeticExpressionLhsAction_1_0() { return cArithmeticExpressionLhsAction_1_0; }
		
		//type=ArithmeticOperations
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ArithmeticOperations
		public RuleCall getTypeArithmeticOperationsEnumRuleCall_1_1_0() { return cTypeArithmeticOperationsEnumRuleCall_1_1_0; }
		
		//rhs=BaseExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//BaseExpression
		public RuleCall getRhsBaseExpressionParserRuleCall_1_2_0() { return cRhsBaseExpressionParserRuleCall_1_2_0; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFeatureValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnscopedFeatureValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVariableFeatureValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIntegerValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDecimalValueParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDateValueParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNumericAggregationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cBooleanValueParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cUniquenessCheckParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cValueContainmentParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//BaseExpression cnl::BaseExpression:
		//	TypeExpression | EmptyValue | StringValue | EnumValue | FeatureValue | UnscopedFeatureValue | VariableFeatureValue |
		//	IntegerValue | DecimalValue | DateValue | NumericAggregation | BooleanValue | UniquenessCheck | ValueContainment;
		@Override public ParserRule getRule() { return rule; }
		
		////primitives:
		//TypeExpression | EmptyValue | StringValue | EnumValue | FeatureValue | UnscopedFeatureValue | VariableFeatureValue |
		//IntegerValue | DecimalValue | DateValue | NumericAggregation | BooleanValue | UniquenessCheck | ValueContainment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////primitives:
		//TypeExpression
		public RuleCall getTypeExpressionParserRuleCall_0() { return cTypeExpressionParserRuleCall_0; }
		
		//EmptyValue
		public RuleCall getEmptyValueParserRuleCall_1() { return cEmptyValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
		
		//EnumValue
		public RuleCall getEnumValueParserRuleCall_3() { return cEnumValueParserRuleCall_3; }
		
		////features:	
		//FeatureValue
		public RuleCall getFeatureValueParserRuleCall_4() { return cFeatureValueParserRuleCall_4; }
		
		//UnscopedFeatureValue
		public RuleCall getUnscopedFeatureValueParserRuleCall_5() { return cUnscopedFeatureValueParserRuleCall_5; }
		
		//VariableFeatureValue
		public RuleCall getVariableFeatureValueParserRuleCall_6() { return cVariableFeatureValueParserRuleCall_6; }
		
		////numbers:
		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_7() { return cIntegerValueParserRuleCall_7; }
		
		//DecimalValue
		public RuleCall getDecimalValueParserRuleCall_8() { return cDecimalValueParserRuleCall_8; }
		
		//DateValue
		public RuleCall getDateValueParserRuleCall_9() { return cDateValueParserRuleCall_9; }
		
		//NumericAggregation
		public RuleCall getNumericAggregationParserRuleCall_10() { return cNumericAggregationParserRuleCall_10; }
		
		////booleans:
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_11() { return cBooleanValueParserRuleCall_11; }
		
		//UniquenessCheck
		public RuleCall getUniquenessCheckParserRuleCall_12() { return cUniquenessCheckParserRuleCall_12; }
		
		//ValueContainment
		public RuleCall getValueContainmentParserRuleCall_13() { return cValueContainmentParserRuleCall_13; }
	}
	public class DateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.DateExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBeforeDateExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLhsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLhsBaseExpressionParserRuleCall_0_1_0 = (RuleCall)cLhsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_2_0 = (Alternatives)cGroup_0_2.eContents().get(0);
		private final Group cGroup_0_2_0_0 = (Group)cAlternatives_0_2_0.eContents().get(0);
		private final Keyword cMustKeyword_0_2_0_0_0 = (Keyword)cGroup_0_2_0_0.eContents().get(0);
		private final Keyword cBeKeyword_0_2_0_0_1 = (Keyword)cGroup_0_2_0_0.eContents().get(1);
		private final Keyword cIsKeyword_0_2_0_1 = (Keyword)cAlternatives_0_2_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2_1 = (Alternatives)cGroup_0_2.eContents().get(1);
		private final Keyword cBeforeKeyword_0_2_1_0 = (Keyword)cAlternatives_0_2_1.eContents().get(0);
		private final Keyword cByKeyword_0_2_1_1 = (Keyword)cAlternatives_0_2_1.eContents().get(1);
		private final Assignment cRhsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRhsBaseExpressionParserRuleCall_0_3_0 = (RuleCall)cRhsAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAfterDateExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLhsBaseExpressionParserRuleCall_1_1_0 = (RuleCall)cLhsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cMustKeyword_1_2_0_0_0 = (Keyword)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cBeKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cAfterKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_1_1 = (Group)cAlternatives_1_2_1.eContents().get(1);
		private final Keyword cLaterKeyword_1_2_1_1_0 = (Keyword)cGroup_1_2_1_1.eContents().get(0);
		private final Keyword cThanKeyword_1_2_1_1_1 = (Keyword)cGroup_1_2_1_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRhsBaseExpressionParserRuleCall_1_3_0 = (RuleCall)cRhsAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOnorbeforeDateExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLhsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLhsBaseExpressionParserRuleCall_2_1_0 = (RuleCall)cLhsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_0 = (Alternatives)cGroup_2_2.eContents().get(0);
		private final Group cGroup_2_2_0_0 = (Group)cAlternatives_2_2_0.eContents().get(0);
		private final Keyword cMustKeyword_2_2_0_0_0 = (Keyword)cGroup_2_2_0_0.eContents().get(0);
		private final Keyword cBeKeyword_2_2_0_0_1 = (Keyword)cGroup_2_2_0_0.eContents().get(1);
		private final Keyword cIsKeyword_2_2_0_1 = (Keyword)cAlternatives_2_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_2_1 = (Alternatives)cGroup_2_2.eContents().get(1);
		private final Group cGroup_2_2_1_0 = (Group)cAlternatives_2_2_1.eContents().get(0);
		private final Keyword cBeforeKeyword_2_2_1_0_0 = (Keyword)cGroup_2_2_1_0.eContents().get(0);
		private final Keyword cOrKeyword_2_2_1_0_1 = (Keyword)cGroup_2_2_1_0.eContents().get(1);
		private final Keyword cByKeyword_2_2_1_0_2 = (Keyword)cGroup_2_2_1_0.eContents().get(2);
		private final Group cGroup_2_2_1_1 = (Group)cAlternatives_2_2_1.eContents().get(1);
		private final Keyword cOnKeyword_2_2_1_1_0 = (Keyword)cGroup_2_2_1_1.eContents().get(0);
		private final Keyword cOrKeyword_2_2_1_1_1 = (Keyword)cGroup_2_2_1_1.eContents().get(1);
		private final Keyword cBeforeKeyword_2_2_1_1_2 = (Keyword)cGroup_2_2_1_1.eContents().get(2);
		private final Group cGroup_2_2_1_2 = (Group)cAlternatives_2_2_1.eContents().get(2);
		private final Keyword cBeforeKeyword_2_2_1_2_0 = (Keyword)cGroup_2_2_1_2.eContents().get(0);
		private final Keyword cOrKeyword_2_2_1_2_1 = (Keyword)cGroup_2_2_1_2.eContents().get(1);
		private final Keyword cEqualKeyword_2_2_1_2_2 = (Keyword)cGroup_2_2_1_2.eContents().get(2);
		private final Keyword cToKeyword_2_2_1_2_3 = (Keyword)cGroup_2_2_1_2.eContents().get(3);
		private final Assignment cRhsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRhsBaseExpressionParserRuleCall_2_3_0 = (RuleCall)cRhsAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOnorafterDateExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLhsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLhsBaseExpressionParserRuleCall_3_1_0 = (RuleCall)cLhsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_2_0 = (Alternatives)cGroup_3_2.eContents().get(0);
		private final Group cGroup_3_2_0_0 = (Group)cAlternatives_3_2_0.eContents().get(0);
		private final Keyword cMustKeyword_3_2_0_0_0 = (Keyword)cGroup_3_2_0_0.eContents().get(0);
		private final Keyword cBeKeyword_3_2_0_0_1 = (Keyword)cGroup_3_2_0_0.eContents().get(1);
		private final Keyword cIsKeyword_3_2_0_1 = (Keyword)cAlternatives_3_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_2_1_0 = (Group)cAlternatives_3_2_1.eContents().get(0);
		private final Keyword cAfterKeyword_3_2_1_0_0 = (Keyword)cGroup_3_2_1_0.eContents().get(0);
		private final Keyword cOrKeyword_3_2_1_0_1 = (Keyword)cGroup_3_2_1_0.eContents().get(1);
		private final Keyword cByKeyword_3_2_1_0_2 = (Keyword)cGroup_3_2_1_0.eContents().get(2);
		private final Group cGroup_3_2_1_1 = (Group)cAlternatives_3_2_1.eContents().get(1);
		private final Keyword cOnKeyword_3_2_1_1_0 = (Keyword)cGroup_3_2_1_1.eContents().get(0);
		private final Keyword cOrKeyword_3_2_1_1_1 = (Keyword)cGroup_3_2_1_1.eContents().get(1);
		private final Keyword cAfterKeyword_3_2_1_1_2 = (Keyword)cGroup_3_2_1_1.eContents().get(2);
		private final Group cGroup_3_2_1_2 = (Group)cAlternatives_3_2_1.eContents().get(2);
		private final Keyword cAfterKeyword_3_2_1_2_0 = (Keyword)cGroup_3_2_1_2.eContents().get(0);
		private final Keyword cOrKeyword_3_2_1_2_1 = (Keyword)cGroup_3_2_1_2.eContents().get(1);
		private final Keyword cEqualKeyword_3_2_1_2_2 = (Keyword)cGroup_3_2_1_2.eContents().get(2);
		private final Keyword cToKeyword_3_2_1_2_3 = (Keyword)cGroup_3_2_1_2.eContents().get(3);
		private final Assignment cRhsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRhsBaseExpressionParserRuleCall_3_3_0 = (RuleCall)cRhsAssignment_3_3.eContents().get(0);
		
		//DateExpression cnl::DateExpression:
		//	{cnl::BeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' | 'by')) rhs=BaseExpression |
		//	{cnl::AfterDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('after' | 'later' 'than')) rhs=BaseExpression |
		//	{cnl::OnorbeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' 'or' 'by' | 'on' 'or' 'before' |
		//	'before' 'or' 'equal' 'to')) rhs=BaseExpression | {cnl::OnorafterDateExpression} lhs=BaseExpression (('must' 'be' |
		//	'is')? ('after' 'or' 'by' | 'on' 'or' 'after' | 'after' 'or' 'equal' 'to')) rhs=BaseExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{cnl::BeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' | 'by')) rhs=BaseExpression |
		//{cnl::AfterDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('after' | 'later' 'than')) rhs=BaseExpression |
		//{cnl::OnorbeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' 'or' 'by' | 'on' 'or' 'before' |
		//'before' 'or' 'equal' 'to')) rhs=BaseExpression | {cnl::OnorafterDateExpression} lhs=BaseExpression (('must' 'be' |
		//'is')? ('after' 'or' 'by' | 'on' 'or' 'after' | 'after' 'or' 'equal' 'to')) rhs=BaseExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{cnl::BeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' | 'by')) rhs=BaseExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{cnl::BeforeDateExpression}
		public Action getBeforeDateExpressionAction_0_0() { return cBeforeDateExpressionAction_0_0; }
		
		//lhs=BaseExpression
		public Assignment getLhsAssignment_0_1() { return cLhsAssignment_0_1; }
		
		//BaseExpression
		public RuleCall getLhsBaseExpressionParserRuleCall_0_1_0() { return cLhsBaseExpressionParserRuleCall_0_1_0; }
		
		//(('must' 'be' | 'is')? ('before' | 'by'))
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//('must' 'be' | 'is')?
		public Alternatives getAlternatives_0_2_0() { return cAlternatives_0_2_0; }
		
		//'must' 'be'
		public Group getGroup_0_2_0_0() { return cGroup_0_2_0_0; }
		
		//'must'
		public Keyword getMustKeyword_0_2_0_0_0() { return cMustKeyword_0_2_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_0_2_0_0_1() { return cBeKeyword_0_2_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_0_2_0_1() { return cIsKeyword_0_2_0_1; }
		
		//('before' | 'by')
		public Alternatives getAlternatives_0_2_1() { return cAlternatives_0_2_1; }
		
		//'before'
		public Keyword getBeforeKeyword_0_2_1_0() { return cBeforeKeyword_0_2_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_2_1_1() { return cByKeyword_0_2_1_1; }
		
		//rhs=BaseExpression
		public Assignment getRhsAssignment_0_3() { return cRhsAssignment_0_3; }
		
		//BaseExpression
		public RuleCall getRhsBaseExpressionParserRuleCall_0_3_0() { return cRhsBaseExpressionParserRuleCall_0_3_0; }
		
		//{cnl::AfterDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('after' | 'later' 'than')) rhs=BaseExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{cnl::AfterDateExpression}
		public Action getAfterDateExpressionAction_1_0() { return cAfterDateExpressionAction_1_0; }
		
		//lhs=BaseExpression
		public Assignment getLhsAssignment_1_1() { return cLhsAssignment_1_1; }
		
		//BaseExpression
		public RuleCall getLhsBaseExpressionParserRuleCall_1_1_0() { return cLhsBaseExpressionParserRuleCall_1_1_0; }
		
		//(('must' 'be' | 'is')? ('after' | 'later' 'than'))
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//('must' 'be' | 'is')?
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//'must' 'be'
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_2_0_0_0() { return cMustKeyword_1_2_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_1_2_0_0_1() { return cBeKeyword_1_2_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1_2_0_1() { return cIsKeyword_1_2_0_1; }
		
		//('after' | 'later' 'than')
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//'after'
		public Keyword getAfterKeyword_1_2_1_0() { return cAfterKeyword_1_2_1_0; }
		
		//'later' 'than'
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }
		
		//'later'
		public Keyword getLaterKeyword_1_2_1_1_0() { return cLaterKeyword_1_2_1_1_0; }
		
		//'than'
		public Keyword getThanKeyword_1_2_1_1_1() { return cThanKeyword_1_2_1_1_1; }
		
		//rhs=BaseExpression
		public Assignment getRhsAssignment_1_3() { return cRhsAssignment_1_3; }
		
		//BaseExpression
		public RuleCall getRhsBaseExpressionParserRuleCall_1_3_0() { return cRhsBaseExpressionParserRuleCall_1_3_0; }
		
		//{cnl::OnorbeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' 'or' 'by' | 'on' 'or' 'before' |
		//'before' 'or' 'equal' 'to')) rhs=BaseExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//{cnl::OnorbeforeDateExpression}
		public Action getOnorbeforeDateExpressionAction_2_0() { return cOnorbeforeDateExpressionAction_2_0; }
		
		//lhs=BaseExpression
		public Assignment getLhsAssignment_2_1() { return cLhsAssignment_2_1; }
		
		//BaseExpression
		public RuleCall getLhsBaseExpressionParserRuleCall_2_1_0() { return cLhsBaseExpressionParserRuleCall_2_1_0; }
		
		//(('must' 'be' | 'is')? ('before' 'or' 'by' | 'on' 'or' 'before' | 'before' 'or' 'equal' 'to'))
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//('must' 'be' | 'is')?
		public Alternatives getAlternatives_2_2_0() { return cAlternatives_2_2_0; }
		
		//'must' 'be'
		public Group getGroup_2_2_0_0() { return cGroup_2_2_0_0; }
		
		//'must'
		public Keyword getMustKeyword_2_2_0_0_0() { return cMustKeyword_2_2_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_2_2_0_0_1() { return cBeKeyword_2_2_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_2_2_0_1() { return cIsKeyword_2_2_0_1; }
		
		//('before' 'or' 'by' | 'on' 'or' 'before' | 'before' 'or' 'equal' 'to')
		public Alternatives getAlternatives_2_2_1() { return cAlternatives_2_2_1; }
		
		//'before' 'or' 'by'
		public Group getGroup_2_2_1_0() { return cGroup_2_2_1_0; }
		
		//'before'
		public Keyword getBeforeKeyword_2_2_1_0_0() { return cBeforeKeyword_2_2_1_0_0; }
		
		//'or'
		public Keyword getOrKeyword_2_2_1_0_1() { return cOrKeyword_2_2_1_0_1; }
		
		//'by'
		public Keyword getByKeyword_2_2_1_0_2() { return cByKeyword_2_2_1_0_2; }
		
		//'on' 'or' 'before'
		public Group getGroup_2_2_1_1() { return cGroup_2_2_1_1; }
		
		//'on'
		public Keyword getOnKeyword_2_2_1_1_0() { return cOnKeyword_2_2_1_1_0; }
		
		//'or'
		public Keyword getOrKeyword_2_2_1_1_1() { return cOrKeyword_2_2_1_1_1; }
		
		//'before'
		public Keyword getBeforeKeyword_2_2_1_1_2() { return cBeforeKeyword_2_2_1_1_2; }
		
		//'before' 'or' 'equal' 'to'
		public Group getGroup_2_2_1_2() { return cGroup_2_2_1_2; }
		
		//'before'
		public Keyword getBeforeKeyword_2_2_1_2_0() { return cBeforeKeyword_2_2_1_2_0; }
		
		//'or'
		public Keyword getOrKeyword_2_2_1_2_1() { return cOrKeyword_2_2_1_2_1; }
		
		//'equal'
		public Keyword getEqualKeyword_2_2_1_2_2() { return cEqualKeyword_2_2_1_2_2; }
		
		//'to'
		public Keyword getToKeyword_2_2_1_2_3() { return cToKeyword_2_2_1_2_3; }
		
		//rhs=BaseExpression
		public Assignment getRhsAssignment_2_3() { return cRhsAssignment_2_3; }
		
		//BaseExpression
		public RuleCall getRhsBaseExpressionParserRuleCall_2_3_0() { return cRhsBaseExpressionParserRuleCall_2_3_0; }
		
		//{cnl::OnorafterDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('after' 'or' 'by' | 'on' 'or' 'after' |
		//'after' 'or' 'equal' 'to')) rhs=BaseExpression
		public Group getGroup_3() { return cGroup_3; }
		
		//{cnl::OnorafterDateExpression}
		public Action getOnorafterDateExpressionAction_3_0() { return cOnorafterDateExpressionAction_3_0; }
		
		//lhs=BaseExpression
		public Assignment getLhsAssignment_3_1() { return cLhsAssignment_3_1; }
		
		//BaseExpression
		public RuleCall getLhsBaseExpressionParserRuleCall_3_1_0() { return cLhsBaseExpressionParserRuleCall_3_1_0; }
		
		//(('must' 'be' | 'is')? ('after' 'or' 'by' | 'on' 'or' 'after' | 'after' 'or' 'equal' 'to'))
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//('must' 'be' | 'is')?
		public Alternatives getAlternatives_3_2_0() { return cAlternatives_3_2_0; }
		
		//'must' 'be'
		public Group getGroup_3_2_0_0() { return cGroup_3_2_0_0; }
		
		//'must'
		public Keyword getMustKeyword_3_2_0_0_0() { return cMustKeyword_3_2_0_0_0; }
		
		//'be'
		public Keyword getBeKeyword_3_2_0_0_1() { return cBeKeyword_3_2_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_3_2_0_1() { return cIsKeyword_3_2_0_1; }
		
		//('after' 'or' 'by' | 'on' 'or' 'after' | 'after' 'or' 'equal' 'to')
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//'after' 'or' 'by'
		public Group getGroup_3_2_1_0() { return cGroup_3_2_1_0; }
		
		//'after'
		public Keyword getAfterKeyword_3_2_1_0_0() { return cAfterKeyword_3_2_1_0_0; }
		
		//'or'
		public Keyword getOrKeyword_3_2_1_0_1() { return cOrKeyword_3_2_1_0_1; }
		
		//'by'
		public Keyword getByKeyword_3_2_1_0_2() { return cByKeyword_3_2_1_0_2; }
		
		//'on' 'or' 'after'
		public Group getGroup_3_2_1_1() { return cGroup_3_2_1_1; }
		
		//'on'
		public Keyword getOnKeyword_3_2_1_1_0() { return cOnKeyword_3_2_1_1_0; }
		
		//'or'
		public Keyword getOrKeyword_3_2_1_1_1() { return cOrKeyword_3_2_1_1_1; }
		
		//'after'
		public Keyword getAfterKeyword_3_2_1_1_2() { return cAfterKeyword_3_2_1_1_2; }
		
		//'after' 'or' 'equal' 'to'
		public Group getGroup_3_2_1_2() { return cGroup_3_2_1_2; }
		
		//'after'
		public Keyword getAfterKeyword_3_2_1_2_0() { return cAfterKeyword_3_2_1_2_0; }
		
		//'or'
		public Keyword getOrKeyword_3_2_1_2_1() { return cOrKeyword_3_2_1_2_1; }
		
		//'equal'
		public Keyword getEqualKeyword_3_2_1_2_2() { return cEqualKeyword_3_2_1_2_2; }
		
		//'to'
		public Keyword getToKeyword_3_2_1_2_3() { return cToKeyword_3_2_1_2_3; }
		
		//rhs=BaseExpression
		public Assignment getRhsAssignment_3_3() { return cRhsAssignment_3_3; }
		
		//BaseExpression
		public RuleCall getRhsBaseExpressionParserRuleCall_3_3_0() { return cRhsBaseExpressionParserRuleCall_3_3_0; }
	}
	public class NumericAggregationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.NumericAggregation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericSummationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericAverageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericMaximumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumericMinimumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumericAggregation cnl::NumericAggregation:
		//	NumericSummation | NumericAverage | NumericMaximum | NumericMinimum;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericSummation | NumericAverage | NumericMaximum | NumericMinimum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericSummation
		public RuleCall getNumericSummationParserRuleCall_0() { return cNumericSummationParserRuleCall_0; }
		
		//NumericAverage
		public RuleCall getNumericAverageParserRuleCall_1() { return cNumericAverageParserRuleCall_1; }
		
		//NumericMaximum
		public RuleCall getNumericMaximumParserRuleCall_2() { return cNumericMaximumParserRuleCall_2; }
		
		//NumericMinimum
		public RuleCall getNumericMinimumParserRuleCall_3() { return cNumericMinimumParserRuleCall_3; }
	}
	public class NumericSummationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.NumericSummation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFeatureAlternatives_3_0 = (Alternatives)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureFeatureValueParserRuleCall_3_0_0 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(0);
		private final RuleCall cFeatureUnscopedFeatureValueParserRuleCall_3_0_1 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(1);
		private final RuleCall cFeatureVariableFeatureValueParserRuleCall_3_0_2 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(2);
		
		//NumericSummation cnl::NumericSummation: //sum Market_Value_of_Securities of AFSFVO
		//	'the' 'sum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
		@Override public ParserRule getRule() { return rule; }
		
		////sum Market_Value_of_Securities of AFSFVO
		//'the' 'sum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Group getGroup() { return cGroup; }
		
		////sum Market_Value_of_Securities of AFSFVO
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'sum'
		public Keyword getSumKeyword_1() { return cSumKeyword_1; }
		
		//'of'?
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Alternatives getFeatureAlternatives_3_0() { return cFeatureAlternatives_3_0; }
		
		//FeatureValue
		public RuleCall getFeatureFeatureValueParserRuleCall_3_0_0() { return cFeatureFeatureValueParserRuleCall_3_0_0; }
		
		//UnscopedFeatureValue
		public RuleCall getFeatureUnscopedFeatureValueParserRuleCall_3_0_1() { return cFeatureUnscopedFeatureValueParserRuleCall_3_0_1; }
		
		//VariableFeatureValue
		public RuleCall getFeatureVariableFeatureValueParserRuleCall_3_0_2() { return cFeatureVariableFeatureValueParserRuleCall_3_0_2; }
	}
	public class NumericAverageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.NumericAverage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAverageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFeatureAlternatives_3_0 = (Alternatives)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureFeatureValueParserRuleCall_3_0_0 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(0);
		private final RuleCall cFeatureUnscopedFeatureValueParserRuleCall_3_0_1 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(1);
		private final RuleCall cFeatureVariableFeatureValueParserRuleCall_3_0_2 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(2);
		
		//NumericAverage cnl::NumericAverage:
		//	'the' 'average' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
		@Override public ParserRule getRule() { return rule; }
		
		//'the' 'average' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'average'
		public Keyword getAverageKeyword_1() { return cAverageKeyword_1; }
		
		//'of'?
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Alternatives getFeatureAlternatives_3_0() { return cFeatureAlternatives_3_0; }
		
		//FeatureValue
		public RuleCall getFeatureFeatureValueParserRuleCall_3_0_0() { return cFeatureFeatureValueParserRuleCall_3_0_0; }
		
		//UnscopedFeatureValue
		public RuleCall getFeatureUnscopedFeatureValueParserRuleCall_3_0_1() { return cFeatureUnscopedFeatureValueParserRuleCall_3_0_1; }
		
		//VariableFeatureValue
		public RuleCall getFeatureVariableFeatureValueParserRuleCall_3_0_2() { return cFeatureVariableFeatureValueParserRuleCall_3_0_2; }
	}
	public class NumericMaximumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.NumericMaximum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMaximumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFeatureAlternatives_3_0 = (Alternatives)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureFeatureValueParserRuleCall_3_0_0 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(0);
		private final RuleCall cFeatureUnscopedFeatureValueParserRuleCall_3_0_1 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(1);
		private final RuleCall cFeatureVariableFeatureValueParserRuleCall_3_0_2 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(2);
		
		//NumericMaximum cnl::NumericMaximum:
		//	'the' 'maximum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
		@Override public ParserRule getRule() { return rule; }
		
		//'the' 'maximum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'maximum'
		public Keyword getMaximumKeyword_1() { return cMaximumKeyword_1; }
		
		//'of'?
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Alternatives getFeatureAlternatives_3_0() { return cFeatureAlternatives_3_0; }
		
		//FeatureValue
		public RuleCall getFeatureFeatureValueParserRuleCall_3_0_0() { return cFeatureFeatureValueParserRuleCall_3_0_0; }
		
		//UnscopedFeatureValue
		public RuleCall getFeatureUnscopedFeatureValueParserRuleCall_3_0_1() { return cFeatureUnscopedFeatureValueParserRuleCall_3_0_1; }
		
		//VariableFeatureValue
		public RuleCall getFeatureVariableFeatureValueParserRuleCall_3_0_2() { return cFeatureVariableFeatureValueParserRuleCall_3_0_2; }
	}
	public class NumericMinimumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.NumericMinimum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMinimumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFeatureAlternatives_3_0 = (Alternatives)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureFeatureValueParserRuleCall_3_0_0 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(0);
		private final RuleCall cFeatureUnscopedFeatureValueParserRuleCall_3_0_1 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(1);
		private final RuleCall cFeatureVariableFeatureValueParserRuleCall_3_0_2 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(2);
		
		//NumericMinimum cnl::NumericMinimum:
		//	'the' 'minimum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
		@Override public ParserRule getRule() { return rule; }
		
		//'the' 'minimum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'minimum'
		public Keyword getMinimumKeyword_1() { return cMinimumKeyword_1; }
		
		//'of'?
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Alternatives getFeatureAlternatives_3_0() { return cFeatureAlternatives_3_0; }
		
		//FeatureValue
		public RuleCall getFeatureFeatureValueParserRuleCall_3_0_0() { return cFeatureFeatureValueParserRuleCall_3_0_0; }
		
		//UnscopedFeatureValue
		public RuleCall getFeatureUnscopedFeatureValueParserRuleCall_3_0_1() { return cFeatureUnscopedFeatureValueParserRuleCall_3_0_1; }
		
		//VariableFeatureValue
		public RuleCall getFeatureVariableFeatureValueParserRuleCall_3_0_2() { return cFeatureVariableFeatureValueParserRuleCall_3_0_2; }
	}
	public class ValueContainmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ValueContainment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cFeatureAlternatives_0_0 = (Alternatives)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureFeatureValueParserRuleCall_0_0_0 = (RuleCall)cFeatureAlternatives_0_0.eContents().get(0);
		private final RuleCall cFeatureUnscopedFeatureValueParserRuleCall_0_0_1 = (RuleCall)cFeatureAlternatives_0_0.eContents().get(1);
		private final RuleCall cFeatureVariableFeatureValueParserRuleCall_0_0_2 = (RuleCall)cFeatureAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEitherKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCollectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCollectionBaseExpressionParserRuleCall_2_0 = (RuleCall)cCollectionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCollectionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCollectionBaseExpressionParserRuleCall_3_1_0 = (RuleCall)cCollectionAssignment_3_1.eContents().get(0);
		
		//ValueContainment cnl::ValueContainment:
		//	feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue) ('is' 'either') collection+=BaseExpression ('or'
		//	collection+=BaseExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue) ('is' 'either') collection+=BaseExpression ('or'
		//collection+=BaseExpression)*
		public Group getGroup() { return cGroup; }
		
		//feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//(FeatureValue | UnscopedFeatureValue | VariableFeatureValue)
		public Alternatives getFeatureAlternatives_0_0() { return cFeatureAlternatives_0_0; }
		
		//FeatureValue
		public RuleCall getFeatureFeatureValueParserRuleCall_0_0_0() { return cFeatureFeatureValueParserRuleCall_0_0_0; }
		
		//UnscopedFeatureValue
		public RuleCall getFeatureUnscopedFeatureValueParserRuleCall_0_0_1() { return cFeatureUnscopedFeatureValueParserRuleCall_0_0_1; }
		
		//VariableFeatureValue
		public RuleCall getFeatureVariableFeatureValueParserRuleCall_0_0_2() { return cFeatureVariableFeatureValueParserRuleCall_0_0_2; }
		
		//('is' 'either')
		public Group getGroup_1() { return cGroup_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'either'
		public Keyword getEitherKeyword_1_1() { return cEitherKeyword_1_1; }
		
		//collection+=BaseExpression
		public Assignment getCollectionAssignment_2() { return cCollectionAssignment_2; }
		
		//BaseExpression
		public RuleCall getCollectionBaseExpressionParserRuleCall_2_0() { return cCollectionBaseExpressionParserRuleCall_2_0; }
		
		//('or' collection+=BaseExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'or'
		public Keyword getOrKeyword_3_0() { return cOrKeyword_3_0; }
		
		//collection+=BaseExpression
		public Assignment getCollectionAssignment_3_1() { return cCollectionAssignment_3_1; }
		
		//BaseExpression
		public RuleCall getCollectionBaseExpressionParserRuleCall_3_1_0() { return cCollectionBaseExpressionParserRuleCall_3_1_0; }
	}
	public class UniquenessCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.UniquenessCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cAnyKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cCombinationKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cOfKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cValuesKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cInKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesFeatureValueParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cAndKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeaturesFeatureValueParserRuleCall_2_1_0 = (RuleCall)cFeaturesAssignment_2_1.eContents().get(0);
		private final Keyword cMustKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cUniqueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UniquenessCheck cnl::UniquenessCheck:
		//	('any' 'combination' 'of' 'values' 'in')?
		//	features+=FeatureValue ((',' | 'and') features+=FeatureValue)* 'must' 'be' 'unique';
		@Override public ParserRule getRule() { return rule; }
		
		//('any' 'combination' 'of' 'values' 'in')? features+=FeatureValue ((',' | 'and') features+=FeatureValue)* 'must' 'be'
		//'unique'
		public Group getGroup() { return cGroup; }
		
		//('any' 'combination' 'of' 'values' 'in')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'any'
		public Keyword getAnyKeyword_0_0() { return cAnyKeyword_0_0; }
		
		//'combination'
		public Keyword getCombinationKeyword_0_1() { return cCombinationKeyword_0_1; }
		
		//'of'
		public Keyword getOfKeyword_0_2() { return cOfKeyword_0_2; }
		
		//'values'
		public Keyword getValuesKeyword_0_3() { return cValuesKeyword_0_3; }
		
		//'in'
		public Keyword getInKeyword_0_4() { return cInKeyword_0_4; }
		
		//features+=FeatureValue
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }
		
		//FeatureValue
		public RuleCall getFeaturesFeatureValueParserRuleCall_1_0() { return cFeaturesFeatureValueParserRuleCall_1_0; }
		
		//((',' | 'and') features+=FeatureValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(',' | 'and')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }
		
		//'and'
		public Keyword getAndKeyword_2_0_1() { return cAndKeyword_2_0_1; }
		
		//features+=FeatureValue
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }
		
		//FeatureValue
		public RuleCall getFeaturesFeatureValueParserRuleCall_2_1_0() { return cFeaturesFeatureValueParserRuleCall_2_1_0; }
		
		//'must'
		public Keyword getMustKeyword_3() { return cMustKeyword_3; }
		
		//'be'
		public Keyword getBeKeyword_4() { return cBeKeyword_4; }
		
		//'unique'
		public Keyword getUniqueKeyword_5() { return cUniqueKeyword_5; }
	}
	public class TypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.TypeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeExpression cnl::TypeExpression:
		//	PrimitiveTypeExpression | EnumTypeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveTypeExpression | EnumTypeExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveTypeExpression
		public RuleCall getPrimitiveTypeExpressionParserRuleCall_0() { return cPrimitiveTypeExpressionParserRuleCall_0; }
		
		//EnumTypeExpression
		public RuleCall getEnumTypeExpressionParserRuleCall_1() { return cEnumTypeExpressionParserRuleCall_1; }
	}
	public class FeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.FeatureValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		
		//FeatureValue cnl::FeatureValue:
		//	'the'? feature=[cnl::Feature];
		@Override public ParserRule getRule() { return rule; }
		
		//'the'? feature=[cnl::Feature]
		public Group getGroup() { return cGroup; }
		
		//'the'?
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//feature=[cnl::Feature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[cnl::Feature]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }
		
		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_1_0_1; }
	}
	public class VariableFeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.VariableFeatureValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableNameIDTerminalRuleCall_2_0 = (RuleCall)cVariableNameAssignment_2.eContents().get(0);
		
		//VariableFeatureValue cnl::FeatureValue:
		//	feature=[cnl::Feature] 'from' variableName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[cnl::Feature] 'from' variableName=ID
		public Group getGroup() { return cGroup; }
		
		//feature=[cnl::Feature]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//[cnl::Feature]
		public CrossReference getFeatureFeatureCrossReference_0_0() { return cFeatureFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_0_1; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_2() { return cVariableNameAssignment_2; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_2_0() { return cVariableNameIDTerminalRuleCall_2_0; }
	}
	public class UnscopedFeatureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.UnscopedFeatureValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScopeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScopeElementScopeParserRuleCall_2_0 = (RuleCall)cScopeAssignment_2.eContents().get(0);
		
		//UnscopedFeatureValue cnl::FeatureValue:
		//	feature=[cnl::Feature] 'of' scope=ElementScope;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[cnl::Feature] 'of' scope=ElementScope
		public Group getGroup() { return cGroup; }
		
		//feature=[cnl::Feature]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//[cnl::Feature]
		public CrossReference getFeatureFeatureCrossReference_0_0() { return cFeatureFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_0_1; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//scope=ElementScope
		public Assignment getScopeAssignment_2() { return cScopeAssignment_2; }
		
		//ElementScope
		public RuleCall getScopeElementScopeParserRuleCall_2_0() { return cScopeElementScopeParserRuleCall_2_0; }
	}
	public class PrimitiveTypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.PrimitiveTypeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFeatureFeatureValueParserRuleCall_0_0 = (RuleCall)cFeatureAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cIsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cTypeKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cIsKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cAKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMustKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cBeKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Alternatives cAlternatives_1_2_2 = (Alternatives)cGroup_1_2.eContents().get(2);
		private final Keyword cAKeyword_1_2_2_0 = (Keyword)cAlternatives_1_2_2.eContents().get(0);
		private final Keyword cInKeyword_1_2_2_1 = (Keyword)cAlternatives_1_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypePrimitiveTypesEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//PrimitiveTypeExpression cnl::PrimitiveTypeExpression:
		//	feature=FeatureValue ('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?) type=PrimitiveTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=FeatureValue ('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?) type=PrimitiveTypes
		public Group getGroup() { return cGroup; }
		
		//feature=FeatureValue
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//FeatureValue
		public RuleCall getFeatureFeatureValueParserRuleCall_0_0() { return cFeatureFeatureValueParserRuleCall_0_0; }
		
		//('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is' 'of' 'type'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_0_0() { return cIsKeyword_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1_0_1() { return cOfKeyword_1_0_1; }
		
		//'type'
		public Keyword getTypeKeyword_1_0_2() { return cTypeKeyword_1_0_2; }
		
		//'is' 'a'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_0() { return cIsKeyword_1_1_0; }
		
		//'a'
		public Keyword getAKeyword_1_1_1() { return cAKeyword_1_1_1; }
		
		//'must' 'be' ('a' | 'in')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'must'
		public Keyword getMustKeyword_1_2_0() { return cMustKeyword_1_2_0; }
		
		//'be'
		public Keyword getBeKeyword_1_2_1() { return cBeKeyword_1_2_1; }
		
		//('a' | 'in')?
		public Alternatives getAlternatives_1_2_2() { return cAlternatives_1_2_2; }
		
		//'a'
		public Keyword getAKeyword_1_2_2_0() { return cAKeyword_1_2_2_0; }
		
		//'in'
		public Keyword getInKeyword_1_2_2_1() { return cInKeyword_1_2_2_1; }
		
		//type=PrimitiveTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//PrimitiveTypes
		public RuleCall getTypePrimitiveTypesEnumRuleCall_2_0() { return cTypePrimitiveTypesEnumRuleCall_2_0; }
	}
	public class EnumTypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.EnumTypeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFeatureFeatureValueParserRuleCall_0_0 = (RuleCall)cFeatureAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cIsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cTypeKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cIsKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cAKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMustKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cBeKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Alternatives cAlternatives_1_2_2 = (Alternatives)cGroup_1_2.eContents().get(2);
		private final Keyword cAKeyword_1_2_2_0 = (Keyword)cAlternatives_1_2_2.eContents().get(0);
		private final Keyword cInKeyword_1_2_2_1 = (Keyword)cAlternatives_1_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEnumCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEnumIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEnumCrossReference_2_0.eContents().get(1);
		
		//EnumTypeExpression cnl::EnumTypeExpression:
		//	feature=FeatureValue ('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?) type=[cnl::Enum];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=FeatureValue ('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?) type=[cnl::Enum]
		public Group getGroup() { return cGroup; }
		
		//feature=FeatureValue
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//FeatureValue
		public RuleCall getFeatureFeatureValueParserRuleCall_0_0() { return cFeatureFeatureValueParserRuleCall_0_0; }
		
		//('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is' 'of' 'type'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_0_0() { return cIsKeyword_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1_0_1() { return cOfKeyword_1_0_1; }
		
		//'type'
		public Keyword getTypeKeyword_1_0_2() { return cTypeKeyword_1_0_2; }
		
		//'is' 'a'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'is'
		public Keyword getIsKeyword_1_1_0() { return cIsKeyword_1_1_0; }
		
		//'a'
		public Keyword getAKeyword_1_1_1() { return cAKeyword_1_1_1; }
		
		//'must' 'be' ('a' | 'in')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'must'
		public Keyword getMustKeyword_1_2_0() { return cMustKeyword_1_2_0; }
		
		//'be'
		public Keyword getBeKeyword_1_2_1() { return cBeKeyword_1_2_1; }
		
		//('a' | 'in')?
		public Alternatives getAlternatives_1_2_2() { return cAlternatives_1_2_2; }
		
		//'a'
		public Keyword getAKeyword_1_2_2_0() { return cAKeyword_1_2_2_0; }
		
		//'in'
		public Keyword getInKeyword_1_2_2_1() { return cInKeyword_1_2_2_1; }
		
		//type=[cnl::Enum]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[cnl::Enum]
		public CrossReference getTypeEnumCrossReference_2_0() { return cTypeEnumCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeEnumIDTerminalRuleCall_2_0_1() { return cTypeEnumIDTerminalRuleCall_2_0_1; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue cnl::StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.EnumValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEnumerationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cEnumerationEnumCrossReference_0_0_0 = (CrossReference)cEnumerationAssignment_0_0.eContents().get(0);
		private final RuleCall cEnumerationEnumIDTerminalRuleCall_0_0_0_1 = (RuleCall)cEnumerationEnumCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTheKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumerationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cEnumerationEnumCrossReference_1_1_0 = (CrossReference)cEnumerationAssignment_1_1.eContents().get(0);
		private final RuleCall cEnumerationEnumIDTerminalRuleCall_1_1_0_1 = (RuleCall)cEnumerationEnumCrossReference_1_1_0.eContents().get(1);
		private final Keyword cValueKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cOfKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cValueAssignment_1_4.eContents().get(0);
		
		////the 'Level 1' value of 'AFS'
		//EnumValue cnl::EnumValue:
		//	enumeration=[cnl::Enum] ':' value=STRING
		//	|
		//	'the' enumeration=[cnl::Enum] 'value' 'of' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//enumeration=[cnl::Enum] ':' value=STRING | 'the' enumeration=[cnl::Enum] 'value' 'of' value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//enumeration=[cnl::Enum] ':' value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//enumeration=[cnl::Enum]
		public Assignment getEnumerationAssignment_0_0() { return cEnumerationAssignment_0_0; }
		
		//[cnl::Enum]
		public CrossReference getEnumerationEnumCrossReference_0_0_0() { return cEnumerationEnumCrossReference_0_0_0; }
		
		//ID
		public RuleCall getEnumerationEnumIDTerminalRuleCall_0_0_0_1() { return cEnumerationEnumIDTerminalRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_2_0() { return cValueSTRINGTerminalRuleCall_0_2_0; }
		
		//'the' enumeration=[cnl::Enum] 'value' 'of' value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//'the'
		public Keyword getTheKeyword_1_0() { return cTheKeyword_1_0; }
		
		//enumeration=[cnl::Enum]
		public Assignment getEnumerationAssignment_1_1() { return cEnumerationAssignment_1_1; }
		
		//[cnl::Enum]
		public CrossReference getEnumerationEnumCrossReference_1_1_0() { return cEnumerationEnumCrossReference_1_1_0; }
		
		//ID
		public RuleCall getEnumerationEnumIDTerminalRuleCall_1_1_0_1() { return cEnumerationEnumIDTerminalRuleCall_1_1_0_1; }
		
		//'value'
		public Keyword getValueKeyword_1_2() { return cValueKeyword_1_2; }
		
		//'of'
		public Keyword getOfKeyword_1_3() { return cOfKeyword_1_3; }
		
		//value=STRING
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_4_0() { return cValueSTRINGTerminalRuleCall_1_4_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanValue cnl::BooleanValue:
		//	{cnl::BooleanValue} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{cnl::BooleanValue} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{cnl::BooleanValue}
		public Action getBooleanValueAction_0() { return cBooleanValueAction_0; }
		
		//(value?='true' | 'false')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.IntegerValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerValue cnl::IntegerValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class DecimalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.DecimalValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DecimalValue cnl::DecimalValue:
		//	value=DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DECIMAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0() { return cValueDECIMALTerminalRuleCall_0; }
	}
	public class DateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.DateValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDATETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DateValue cnl::DateValue:
		//	value=DATE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DATE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DATE
		public RuleCall getValueDATETerminalRuleCall_0() { return cValueDATETerminalRuleCall_0; }
	}
	public class MetaDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.MetaData");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MetaData cnl::MetaData:
		//	Types | Enumerations;
		@Override public ParserRule getRule() { return rule; }
		
		//Types | Enumerations
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Types
		public RuleCall getTypesParserRuleCall_0() { return cTypesParserRuleCall_0; }
		
		//Enumerations
		public RuleCall getEnumerationsParserRuleCall_1() { return cEnumerationsParserRuleCall_1; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.Types");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLegalValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLegalValuesTypeValueParserRuleCall_1_0 = (RuleCall)cLegalValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLegalValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLegalValuesTypeValueParserRuleCall_2_1_0 = (RuleCall)cLegalValuesAssignment_2_1.eContents().get(0);
		
		//Types cnl::Types:
		//	'types' legalValues+=TypeValue (',' legalValues+=TypeValue)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'types' legalValues+=TypeValue (',' legalValues+=TypeValue)*
		public Group getGroup() { return cGroup; }
		
		//'types'
		public Keyword getTypesKeyword_0() { return cTypesKeyword_0; }
		
		//legalValues+=TypeValue
		public Assignment getLegalValuesAssignment_1() { return cLegalValuesAssignment_1; }
		
		//TypeValue
		public RuleCall getLegalValuesTypeValueParserRuleCall_1_0() { return cLegalValuesTypeValueParserRuleCall_1_0; }
		
		//(',' legalValues+=TypeValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//legalValues+=TypeValue
		public Assignment getLegalValuesAssignment_2_1() { return cLegalValuesAssignment_2_1; }
		
		//TypeValue
		public RuleCall getLegalValuesTypeValueParserRuleCall_2_1_0() { return cLegalValuesTypeValueParserRuleCall_2_1_0; }
	}
	public class EnumerationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.Enumerations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLegalValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLegalValuesEnumParserRuleCall_1_0 = (RuleCall)cLegalValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLegalValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLegalValuesEnumParserRuleCall_2_1_0 = (RuleCall)cLegalValuesAssignment_2_1.eContents().get(0);
		
		//Enumerations cnl::Enumerations:
		//	'enumerations' legalValues+=Enum (',' legalValues+=Enum)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'enumerations' legalValues+=Enum (',' legalValues+=Enum)*
		public Group getGroup() { return cGroup; }
		
		//'enumerations'
		public Keyword getEnumerationsKeyword_0() { return cEnumerationsKeyword_0; }
		
		//legalValues+=Enum
		public Assignment getLegalValuesAssignment_1() { return cLegalValuesAssignment_1; }
		
		//Enum
		public RuleCall getLegalValuesEnumParserRuleCall_1_0() { return cLegalValuesEnumParserRuleCall_1_0; }
		
		//(',' legalValues+=Enum)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//legalValues+=Enum
		public Assignment getLegalValuesAssignment_2_1() { return cLegalValuesAssignment_2_1; }
		
		//Enum
		public RuleCall getLegalValuesEnumParserRuleCall_2_1_0() { return cLegalValuesEnumParserRuleCall_2_1_0; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.Enum");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Enum cnl::Enum:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TypeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.TypeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cFeaturesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cFeaturesFeatureParserRuleCall_1_1_0_0 = (RuleCall)cFeaturesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_1_1_1_1_0 = (RuleCall)cFeaturesAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TypeValue cnl::Type:
		//	name=ID ('{' (features+=Feature (',' features+=Feature)*)? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('{' (features+=Feature (',' features+=Feature)*)? '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('{' (features+=Feature (',' features+=Feature)*)? '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(features+=Feature (',' features+=Feature)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_1_1_0() { return cFeaturesAssignment_1_1_0; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_1_1_0_0() { return cFeaturesFeatureParserRuleCall_1_1_0_0; }
		
		//(',' features+=Feature)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_1_1_1_1() { return cFeaturesAssignment_1_1_1_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_1_1_1_1_0() { return cFeaturesFeatureParserRuleCall_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.Feature");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Feature cnl::Feature:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EmptyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.EmptyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMustKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cBeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEmptyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EmptyValue cnl::EmptyValue:
		//	{cnl::EmptyValue} ('must' 'be')? 'empty';
		@Override public ParserRule getRule() { return rule; }
		
		//{cnl::EmptyValue} ('must' 'be')? 'empty'
		public Group getGroup() { return cGroup; }
		
		//{cnl::EmptyValue}
		public Action getEmptyValueAction_0() { return cEmptyValueAction_0; }
		
		//('must' 'be')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'must'
		public Keyword getMustKeyword_1_0() { return cMustKeyword_1_0; }
		
		//'be'
		public Keyword getBeKeyword_1_1() { return cBeKeyword_1_1; }
		
		//'empty'
		public Keyword getEmptyKeyword_2() { return cEmptyKeyword_2; }
	}
	public class ExistanceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ExistanceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExistanceValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExistsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMustKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cExistKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//ExistanceValue cnl::ExistanceValue:
		//	{cnl::ExistanceValue} ('exists' | 'must' 'exist');
		@Override public ParserRule getRule() { return rule; }
		
		//{cnl::ExistanceValue} ('exists' | 'must' 'exist')
		public Group getGroup() { return cGroup; }
		
		//{cnl::ExistanceValue}
		public Action getExistanceValueAction_0() { return cExistanceValueAction_0; }
		
		//('exists' | 'must' 'exist')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'exists'
		public Keyword getExistsKeyword_1_0() { return cExistsKeyword_1_0; }
		
		//'must' 'exist'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'must'
		public Keyword getMustKeyword_1_1_0() { return cMustKeyword_1_1_0; }
		
		//'exist'
		public Keyword getExistKeyword_1_1_1() { return cExistKeyword_1_1_1; }
	}
	
	public class ArithmeticOperationsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ArithmeticOperations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTimesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTimesAsteriskKeyword_2_0 = (Keyword)cTimesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDivSolidusKeyword_3_0 = (Keyword)cDivEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ArithmeticOperations returns cnl::ArithmeticOperations:
		//	plus='+' | minus='-' | times='*' | div='/';
		public EnumRule getRule() { return rule; }
		
		//plus='+' | minus='-' | times='*' | div='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//plus='+'
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }
		
		//minus='-'
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
		
		//times='*'
		public EnumLiteralDeclaration getTimesEnumLiteralDeclaration_2() { return cTimesEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getTimesAsteriskKeyword_2_0() { return cTimesAsteriskKeyword_2_0; }
		
		//div='/'
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_3() { return cDivEnumLiteralDeclaration_3; }
		
		//'/'
		public Keyword getDivSolidusKeyword_3_0() { return cDivSolidusKeyword_3_0; }
	}
	public class PrimitiveTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.PrimitiveTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBooleanBooleanKeyword_1_0 = (Keyword)cBooleanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDecimalDecimalKeyword_3_0 = (Keyword)cDecimalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateDateKeyword_4_0 = (Keyword)cDateEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum PrimitiveTypes returns cnl::PrimitiveTypes:
		//	String | Boolean | Integer | Decimal | Date;
		public EnumRule getRule() { return rule; }
		
		//String | Boolean | Integer | Decimal | Date
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_1() { return cBooleanEnumLiteralDeclaration_1; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_1_0() { return cBooleanBooleanKeyword_1_0; }
		
		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }
		
		//'Integer'
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }
		
		//Decimal
		public EnumLiteralDeclaration getDecimalEnumLiteralDeclaration_3() { return cDecimalEnumLiteralDeclaration_3; }
		
		//'Decimal'
		public Keyword getDecimalDecimalKeyword_3_0() { return cDecimalDecimalKeyword_3_0; }
		
		//Date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_4() { return cDateEnumLiteralDeclaration_4; }
		
		//'Date'
		public Keyword getDateDateKeyword_4_0() { return cDateDateKeyword_4_0; }
	}
	
	private final ConstrainedNaturalLanguageRulesElements pConstrainedNaturalLanguageRules;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tINT;
	private final TerminalRule tDATE;
	private final TerminalRule tID;
	private final ScopedRulesElements pScopedRules;
	private final MatchScopedRuleElements pMatchScopedRule;
	private final MatchingRuleElements pMatchingRule;
	private final ElementScopeElements pElementScope;
	private final RuleElements pRule;
	private final CNLRuleElements pCNLRule;
	private final GPLRuleElements pGPLRule;
	private final EOLExpressionRuleElements pEOLExpressionRule;
	private final LogicalExpressionElements pLogicalExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final BaseExpressionElements pBaseExpression;
	private final DateExpressionElements pDateExpression;
	private final NumericAggregationElements pNumericAggregation;
	private final NumericSummationElements pNumericSummation;
	private final NumericAverageElements pNumericAverage;
	private final NumericMaximumElements pNumericMaximum;
	private final NumericMinimumElements pNumericMinimum;
	private final ValueContainmentElements pValueContainment;
	private final UniquenessCheckElements pUniquenessCheck;
	private final TypeExpressionElements pTypeExpression;
	private final FeatureValueElements pFeatureValue;
	private final VariableFeatureValueElements pVariableFeatureValue;
	private final UnscopedFeatureValueElements pUnscopedFeatureValue;
	private final PrimitiveTypeExpressionElements pPrimitiveTypeExpression;
	private final EnumTypeExpressionElements pEnumTypeExpression;
	private final StringValueElements pStringValue;
	private final EnumValueElements pEnumValue;
	private final BooleanValueElements pBooleanValue;
	private final IntegerValueElements pIntegerValue;
	private final DecimalValueElements pDecimalValue;
	private final DateValueElements pDateValue;
	private final MetaDataElements pMetaData;
	private final TypesElements pTypes;
	private final EnumerationsElements pEnumerations;
	private final EnumElements pEnum;
	private final TypeValueElements pTypeValue;
	private final FeatureElements pFeature;
	private final EmptyValueElements pEmptyValue;
	private final ExistanceValueElements pExistanceValue;
	private final ArithmeticOperationsElements eArithmeticOperations;
	private final PrimitiveTypesElements ePrimitiveTypes;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ACMECNlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pConstrainedNaturalLanguageRules = new ConstrainedNaturalLanguageRulesElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.DECIMAL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.INT");
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.DATE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.acme.ACMECNl.ID");
		this.pScopedRules = new ScopedRulesElements();
		this.pMatchScopedRule = new MatchScopedRuleElements();
		this.pMatchingRule = new MatchingRuleElements();
		this.pElementScope = new ElementScopeElements();
		this.pRule = new RuleElements();
		this.pCNLRule = new CNLRuleElements();
		this.pGPLRule = new GPLRuleElements();
		this.pEOLExpressionRule = new EOLExpressionRuleElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pDateExpression = new DateExpressionElements();
		this.pNumericAggregation = new NumericAggregationElements();
		this.pNumericSummation = new NumericSummationElements();
		this.pNumericAverage = new NumericAverageElements();
		this.pNumericMaximum = new NumericMaximumElements();
		this.pNumericMinimum = new NumericMinimumElements();
		this.pValueContainment = new ValueContainmentElements();
		this.pUniquenessCheck = new UniquenessCheckElements();
		this.pTypeExpression = new TypeExpressionElements();
		this.pFeatureValue = new FeatureValueElements();
		this.pVariableFeatureValue = new VariableFeatureValueElements();
		this.pUnscopedFeatureValue = new UnscopedFeatureValueElements();
		this.pPrimitiveTypeExpression = new PrimitiveTypeExpressionElements();
		this.pEnumTypeExpression = new EnumTypeExpressionElements();
		this.pStringValue = new StringValueElements();
		this.pEnumValue = new EnumValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pDecimalValue = new DecimalValueElements();
		this.pDateValue = new DateValueElements();
		this.pMetaData = new MetaDataElements();
		this.pTypes = new TypesElements();
		this.pEnumerations = new EnumerationsElements();
		this.pEnum = new EnumElements();
		this.pTypeValue = new TypeValueElements();
		this.pFeature = new FeatureElements();
		this.pEmptyValue = new EmptyValueElements();
		this.pExistanceValue = new ExistanceValueElements();
		this.eArithmeticOperations = new ArithmeticOperationsElements();
		this.ePrimitiveTypes = new PrimitiveTypesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.acme.ACMECNl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ConstrainedNaturalLanguageRules cnl::ConstrainedNaturalLanguageRules:
	//	rules+=(ScopedRules | MatchScopedRule)*
	//	metadata+=MetaData*;
	public ConstrainedNaturalLanguageRulesElements getConstrainedNaturalLanguageRulesAccess() {
		return pConstrainedNaturalLanguageRules;
	}
	
	public ParserRule getConstrainedNaturalLanguageRulesRule() {
		return getConstrainedNaturalLanguageRulesAccess().getRule();
	}
	
	//terminal DECIMAL returns ecore::EDouble:
	//	'-'? '0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DATE returns ecore::EDate:
	//	INT '-' INT '-' INT;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	//	| ('`' | '[') ('\\' . | !('\\' | '`' | '[' | ']'))* ('`' | ']');
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//ScopedRules cnl::ScopedRules:
	//	(('for' 'all' |
	//	'in' | 'in' ('a' | 'an') | 'all' 'of' 'the' 'following' 'are' ('mandatory' 'for' | 'required' 'for' | 'needed' 'for'
	//	| 'obligatory' 'for' |
	//	'mandatory' 'in' | 'required' 'in' | 'needed' 'in' | 'obligatory' 'in')
	//	'a'?) scope=ElementScope
	//	| ('a' | 'an') scope=ElementScope 'is') rules+=Rule+;
	public ScopedRulesElements getScopedRulesAccess() {
		return pScopedRules;
	}
	
	public ParserRule getScopedRulesRule() {
		return getScopedRulesAccess().getRule();
	}
	
	////MatchScopedRules returns cnl::MatchScopedRules:
	////	'match for all' scope=ElementScope matches+=Rule+ 'then' rules+=Rule;
	//MatchScopedRule cnl::MatchScopedRule:
	//	'find'
	//	matches+=MatchingRule+
	//	'then'
	//	rule=Rule;
	public MatchScopedRuleElements getMatchScopedRuleAccess() {
		return pMatchScopedRule;
	}
	
	public ParserRule getMatchScopedRuleRule() {
		return getMatchScopedRuleAccess().getRule();
	}
	
	//MatchingRule cnl::MatchingRule:
	//	variableName=ID 'in' scope=ElementScope 'where' astRoot=LogicalExpression | 'all' 'data' 'in' scope=ElementScope
	//	'where' astRoot=LogicalExpression;
	public MatchingRuleElements getMatchingRuleAccess() {
		return pMatchingRule;
	}
	
	public ParserRule getMatchingRuleRule() {
		return getMatchingRuleAccess().getRule();
	}
	
	//ElementScope cnl::ElementScope:
	//	type=[cnl::Type];
	public ElementScopeElements getElementScopeAccess() {
		return pElementScope;
	}
	
	public ParserRule getElementScopeRule() {
		return getElementScopeAccess().getRule();
	}
	
	//Rule cnl::Rule:
	//	CNLRule | GPLRule;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//CNLRule cnl::CNLRule:
	//	('rule' name=ID)? astRoot=LogicalExpression ('error'? 'message' message=STRING)?;
	public CNLRuleElements getCNLRuleAccess() {
		return pCNLRule;
	}
	
	public ParserRule getCNLRuleRule() {
		return getCNLRuleAccess().getRule();
	}
	
	//GPLRule cnl::GPLRule:
	//	EOLExpressionRule;
	public GPLRuleElements getGPLRuleAccess() {
		return pGPLRule;
	}
	
	public ParserRule getGPLRuleRule() {
		return getGPLRuleAccess().getRule();
	}
	
	//EOLExpressionRule cnl::EOLExpressionRule:
	//	('rule' name=ID)?
	//	'<EOLExpression>'
	//	code=STRING
	//	'</EOLExpression>' ('error'? 'message' message=STRING)?;
	public EOLExpressionRuleElements getEOLExpressionRuleAccess() {
		return pEOLExpressionRule;
	}
	
	public ParserRule getEOLExpressionRuleRule() {
		return getEOLExpressionRuleAccess().getRule();
	}
	
	////operator priority is not reflected here - we rely on execution engine ordering of logical operations
	////TODO support brackets
	//LogicalExpression cnl::Expression:
	//	ComparisonExpression ({cnl::ImpliesExpression.lhs=current} ('implies' | 'only' 'if') rhs=ComparisonExpression |
	//	{cnl::ImpliesExpression.rhs=current} ('when' | 'if' | 'where') lhs=ComparisonExpression |
	//	{cnl::OrExpression.lhs=current} 'or' rhs=ComparisonExpression | {cnl::XorExpression.lhs=current} 'xor'
	//	rhs=ComparisonExpression | {cnl::AndExpression.lhs=current} 'and' rhs=ComparisonExpression |
	//	{cnl::IfandonlyifExpression.lhs=current} ('iff' | 'if' 'and' 'only' 'if') rhs=ComparisonExpression)*
	//	| {cnl::ImpliesExpression} ('if' | 'when') 'the'? lhs=LogicalExpression 'then' rhs=LogicalExpression |
	//	{cnl::XorExpression} 'either' lhs=LogicalExpression 'or' rhs=LogicalExpression;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	////operator priority is not reflected here - we rely on execution engine ordering of arithmetic operations
	////NB: comparison operators are commonly of equal priorities.
	////TODO support brackets
	//ComparisonExpression cnl::Expression:
	//	DateExpression
	//	| ArithmeticExpression ({cnl::EqualityExpression.lhs=current} rhs=ExistanceValue |
	//	{cnl::NegatedEqualityExpression.lhs=current} rhs=EmptyValue | {cnl::EqualityExpression.lhs=current} ('equals' | 'is'
	//	| 'must' 'be') rhs=ArithmeticExpression | {cnl::NegatedEqualityExpression.lhs=current} ('is' 'not' | 'cannot' 'be')
	//	rhs=ArithmeticExpression | {cnl::GreaterThanExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than')
	//	rhs=ArithmeticExpression | {cnl::LessThanExpression.lhs=current} (('must' 'be' | 'is') 'less' 'than')
	//	rhs=ArithmeticExpression | {cnl::GTEExpression.lhs=current} (('must' 'be' | 'is') 'greater' 'than' 'or' 'equal' 'to'
	//	| ('must' 'be' | 'is') 'greater' 'than' 'or' 'equals') rhs=ArithmeticExpression | {cnl::LTEExpression.lhs=current}
	//	(('must' 'be' | 'is') 'less' 'than' 'or' 'equal' 'to' | ('must' 'be' | 'is') 'less' 'than' 'or' 'equals')
	//	rhs=ArithmeticExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	////operator priority is not reflected here - we rely on execution engine ordering of arithmetic operations
	////TODO support brackets
	//ArithmeticExpression cnl::Expression:
	//	BaseExpression ({cnl::ArithmeticExpression.lhs=current} type=ArithmeticOperations rhs=BaseExpression)*;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//BaseExpression cnl::BaseExpression:
	//	TypeExpression | EmptyValue | StringValue | EnumValue | FeatureValue | UnscopedFeatureValue | VariableFeatureValue |
	//	IntegerValue | DecimalValue | DateValue | NumericAggregation | BooleanValue | UniquenessCheck | ValueContainment;
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//DateExpression cnl::DateExpression:
	//	{cnl::BeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' | 'by')) rhs=BaseExpression |
	//	{cnl::AfterDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('after' | 'later' 'than')) rhs=BaseExpression |
	//	{cnl::OnorbeforeDateExpression} lhs=BaseExpression (('must' 'be' | 'is')? ('before' 'or' 'by' | 'on' 'or' 'before' |
	//	'before' 'or' 'equal' 'to')) rhs=BaseExpression | {cnl::OnorafterDateExpression} lhs=BaseExpression (('must' 'be' |
	//	'is')? ('after' 'or' 'by' | 'on' 'or' 'after' | 'after' 'or' 'equal' 'to')) rhs=BaseExpression;
	public DateExpressionElements getDateExpressionAccess() {
		return pDateExpression;
	}
	
	public ParserRule getDateExpressionRule() {
		return getDateExpressionAccess().getRule();
	}
	
	//NumericAggregation cnl::NumericAggregation:
	//	NumericSummation | NumericAverage | NumericMaximum | NumericMinimum;
	public NumericAggregationElements getNumericAggregationAccess() {
		return pNumericAggregation;
	}
	
	public ParserRule getNumericAggregationRule() {
		return getNumericAggregationAccess().getRule();
	}
	
	//NumericSummation cnl::NumericSummation: //sum Market_Value_of_Securities of AFSFVO
	//	'the' 'sum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
	public NumericSummationElements getNumericSummationAccess() {
		return pNumericSummation;
	}
	
	public ParserRule getNumericSummationRule() {
		return getNumericSummationAccess().getRule();
	}
	
	//NumericAverage cnl::NumericAverage:
	//	'the' 'average' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
	public NumericAverageElements getNumericAverageAccess() {
		return pNumericAverage;
	}
	
	public ParserRule getNumericAverageRule() {
		return getNumericAverageAccess().getRule();
	}
	
	//NumericMaximum cnl::NumericMaximum:
	//	'the' 'maximum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
	public NumericMaximumElements getNumericMaximumAccess() {
		return pNumericMaximum;
	}
	
	public ParserRule getNumericMaximumRule() {
		return getNumericMaximumAccess().getRule();
	}
	
	//NumericMinimum cnl::NumericMinimum:
	//	'the' 'minimum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);
	public NumericMinimumElements getNumericMinimumAccess() {
		return pNumericMinimum;
	}
	
	public ParserRule getNumericMinimumRule() {
		return getNumericMinimumAccess().getRule();
	}
	
	//ValueContainment cnl::ValueContainment:
	//	feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue) ('is' 'either') collection+=BaseExpression ('or'
	//	collection+=BaseExpression)*;
	public ValueContainmentElements getValueContainmentAccess() {
		return pValueContainment;
	}
	
	public ParserRule getValueContainmentRule() {
		return getValueContainmentAccess().getRule();
	}
	
	//UniquenessCheck cnl::UniquenessCheck:
	//	('any' 'combination' 'of' 'values' 'in')?
	//	features+=FeatureValue ((',' | 'and') features+=FeatureValue)* 'must' 'be' 'unique';
	public UniquenessCheckElements getUniquenessCheckAccess() {
		return pUniquenessCheck;
	}
	
	public ParserRule getUniquenessCheckRule() {
		return getUniquenessCheckAccess().getRule();
	}
	
	//TypeExpression cnl::TypeExpression:
	//	PrimitiveTypeExpression | EnumTypeExpression;
	public TypeExpressionElements getTypeExpressionAccess() {
		return pTypeExpression;
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}
	
	//FeatureValue cnl::FeatureValue:
	//	'the'? feature=[cnl::Feature];
	public FeatureValueElements getFeatureValueAccess() {
		return pFeatureValue;
	}
	
	public ParserRule getFeatureValueRule() {
		return getFeatureValueAccess().getRule();
	}
	
	//VariableFeatureValue cnl::FeatureValue:
	//	feature=[cnl::Feature] 'from' variableName=ID;
	public VariableFeatureValueElements getVariableFeatureValueAccess() {
		return pVariableFeatureValue;
	}
	
	public ParserRule getVariableFeatureValueRule() {
		return getVariableFeatureValueAccess().getRule();
	}
	
	//UnscopedFeatureValue cnl::FeatureValue:
	//	feature=[cnl::Feature] 'of' scope=ElementScope;
	public UnscopedFeatureValueElements getUnscopedFeatureValueAccess() {
		return pUnscopedFeatureValue;
	}
	
	public ParserRule getUnscopedFeatureValueRule() {
		return getUnscopedFeatureValueAccess().getRule();
	}
	
	//PrimitiveTypeExpression cnl::PrimitiveTypeExpression:
	//	feature=FeatureValue ('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?) type=PrimitiveTypes;
	public PrimitiveTypeExpressionElements getPrimitiveTypeExpressionAccess() {
		return pPrimitiveTypeExpression;
	}
	
	public ParserRule getPrimitiveTypeExpressionRule() {
		return getPrimitiveTypeExpressionAccess().getRule();
	}
	
	//EnumTypeExpression cnl::EnumTypeExpression:
	//	feature=FeatureValue ('is' 'of' 'type' | 'is' 'a' | 'must' 'be' ('a' | 'in')?) type=[cnl::Enum];
	public EnumTypeExpressionElements getEnumTypeExpressionAccess() {
		return pEnumTypeExpression;
	}
	
	public ParserRule getEnumTypeExpressionRule() {
		return getEnumTypeExpressionAccess().getRule();
	}
	
	//StringValue cnl::StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	////the 'Level 1' value of 'AFS'
	//EnumValue cnl::EnumValue:
	//	enumeration=[cnl::Enum] ':' value=STRING
	//	|
	//	'the' enumeration=[cnl::Enum] 'value' 'of' value=STRING;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//BooleanValue cnl::BooleanValue:
	//	{cnl::BooleanValue} (value?='true' | 'false');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//IntegerValue cnl::IntegerValue:
	//	value=INT;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//DecimalValue cnl::DecimalValue:
	//	value=DECIMAL;
	public DecimalValueElements getDecimalValueAccess() {
		return pDecimalValue;
	}
	
	public ParserRule getDecimalValueRule() {
		return getDecimalValueAccess().getRule();
	}
	
	//DateValue cnl::DateValue:
	//	value=DATE;
	public DateValueElements getDateValueAccess() {
		return pDateValue;
	}
	
	public ParserRule getDateValueRule() {
		return getDateValueAccess().getRule();
	}
	
	//MetaData cnl::MetaData:
	//	Types | Enumerations;
	public MetaDataElements getMetaDataAccess() {
		return pMetaData;
	}
	
	public ParserRule getMetaDataRule() {
		return getMetaDataAccess().getRule();
	}
	
	//Types cnl::Types:
	//	'types' legalValues+=TypeValue (',' legalValues+=TypeValue)*;
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//Enumerations cnl::Enumerations:
	//	'enumerations' legalValues+=Enum (',' legalValues+=Enum)*;
	public EnumerationsElements getEnumerationsAccess() {
		return pEnumerations;
	}
	
	public ParserRule getEnumerationsRule() {
		return getEnumerationsAccess().getRule();
	}
	
	//Enum cnl::Enum:
	//	name=ID;
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//TypeValue cnl::Type:
	//	name=ID ('{' (features+=Feature (',' features+=Feature)*)? '}')?;
	public TypeValueElements getTypeValueAccess() {
		return pTypeValue;
	}
	
	public ParserRule getTypeValueRule() {
		return getTypeValueAccess().getRule();
	}
	
	//Feature cnl::Feature:
	//	name=ID;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//EmptyValue cnl::EmptyValue:
	//	{cnl::EmptyValue} ('must' 'be')? 'empty';
	public EmptyValueElements getEmptyValueAccess() {
		return pEmptyValue;
	}
	
	public ParserRule getEmptyValueRule() {
		return getEmptyValueAccess().getRule();
	}
	
	//ExistanceValue cnl::ExistanceValue:
	//	{cnl::ExistanceValue} ('exists' | 'must' 'exist');
	public ExistanceValueElements getExistanceValueAccess() {
		return pExistanceValue;
	}
	
	public ParserRule getExistanceValueRule() {
		return getExistanceValueAccess().getRule();
	}
	
	//enum ArithmeticOperations returns cnl::ArithmeticOperations:
	//	plus='+' | minus='-' | times='*' | div='/';
	public ArithmeticOperationsElements getArithmeticOperationsAccess() {
		return eArithmeticOperations;
	}
	
	public EnumRule getArithmeticOperationsRule() {
		return getArithmeticOperationsAccess().getRule();
	}
	
	//enum PrimitiveTypes returns cnl::PrimitiveTypes:
	//	String | Boolean | Integer | Decimal | Date;
	public PrimitiveTypesElements getPrimitiveTypesAccess() {
		return ePrimitiveTypes;
	}
	
	public EnumRule getPrimitiveTypesRule() {
		return getPrimitiveTypesAccess().getRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
