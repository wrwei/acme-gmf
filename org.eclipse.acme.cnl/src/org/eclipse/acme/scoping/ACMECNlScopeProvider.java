/*
 * generated by Xtext 2.21.0
 */
package org.eclipse.acme.scoping;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class ACMECNlScopeProvider extends AbstractACMECNlScopeProvider {
	
//	// in order to get the valid features of a featureValue
//		def IScope scope_FeatureValue_feature(FeatureValue e, EReference ref) {
//
//			//
//			// maybe change structure so that features are top level elements like enums or types and reference them with non-containment (to try enable autocomplete)
//			//
//			//
//			// in order to get the valid features of an unscoped feature, we use the scope provided by the feature itself
//			var elementScope = e.scope
//			if (elementScope !== null) {
//				return Scopes.scopeFor(elementScope.type.features)
//			}
//
//			// otherwise we navigate the parent scope of that value and get its valid features
//			var parent = e.eContainer
//
//			while (parent !== null) {
//				if (parent instanceof ScopedRules)
//					return Scopes.scopeFor(parent.scope.type.features)
//				if (parent instanceof MatchingRule)
//					return Scopes.scopeFor(parent.scope.type.features)
//				if (parent instanceof MatchScopedRule) {
//					var Set<Feature> allelements = new HashSet;
//					for (MatchingRule r : parent.matches)
//						if (r.variableName.equals(e.variableName))
//							allelements += r.scope.type.features;
//					return Scopes.scopeFor(allelements)
//				}
//				parent = parent.eContainer
//			}
//
//			// this should never get called -- unless undeclared variables are used 
//			return null
//		}
}
