
var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
var ecoreUtil = emfTool.ecoreUtil;

//new root
var cnl = new targetModel!ConstrainedNaturalLanguageRules;

//populate rules with shallow clones
cnl.rules.addAll(ecoreUtil.copyAll(sourceModel!ValidationRules.all));

//create cache for types to include in same model
var types = new Map;
//create cache for ennumerations to include in same model
var enums = new Map;

//for all the migrated (shallow) contents -- deep clone references
for(e in targetModel.allContents.asSequence().closure(x | x.eContents())){
	//navigate all references
	for(r in e.eClass.getEAllReferences){
		var target = e.eGet(r);
		if(target.isDefined()){
			//if the reference is in a different resource -- deep clone it 
			//nb: ignores multi valued references (maybe needs to be generalized in the future?)
			if(not r.isMany and not target.eResource.equals(e.eResource)){
				var localClone = target.cloneIfAbsent();
				e.eSet(r,localClone); 
			}
		}
	}
}

//for all the migrated (deep-cloned) feature values
for(fv in targetModel!FeatureValue.all){

	//switch based on type of featurevalue expression
	var container = fv.eContainer;
	
	if(container.isKindOf(sourceModel!UniquenessCheck)){
		//augment the uniqueness check to include the new features instead of the old one
	}
	
	else if(container.isKindOf(sourceModel!TypeExpression)){
		//create a type check for each new feature, 
		//ignoring the aggregationoperation of the mapping
	}
	
	else if(container.isKindOf(sourceModel!LogicalExpression)){
		//this should not be called directly as we dont assume 
		//explicit feature boolean types
	}
	else if(container.isKindOf(sourceModel!ComparisonExpression)){
		//create a new comparison using the aggregationoperation 
		//to make a new LHS sub-expressionb
	}
	else if(container.isKindOf(sourceModel!ArithmeticExpression)){
		//create a new arithmetic expression using the aggregationoperation 
		//to make a new LHS sub-expressionb
	}

	else if(container.isKindOf(sourceModel!NumericAggregation)){
		//create an aggregation for each new feature, 
		//ignoring the aggregationoperation of the mapping
	}

	else if(container.isKindOf(sourceModel!ValueContainment)){
		//is there anything we can do here?
	}

	else container.eClass.name.println;
}


@cached
operation Any cloneIfAbsent(){

	if(self.isTypeOf(sm!Type)){
		return self.createTypeIfAbsent();
	}
	else if(self.isTypeOf(sm!Feature)){	
	self.eContainer.createTypeIfAbsent();
	for(t in types.entrySet){
		var type = t.value;
		for(f in type.features){
			if(f.name == self.name) return f;				
		}
	}	
	("warning asked to clone feature: "+self.name+" but cant find its type, returning null").println;	
	}
	else if(self.isTypeOf(sm!Enum)){
		var originalEnumName = self.name;
		var enum = enums.get(originalEnumName);
		if(enum.isUndefined()){
			enum = new tm!Enum;
			enum.name = originalEnumName;
			enums.put(enum.name,enum);
		}
		return enum;
	}
	else{
		("warning asked to clone element of type: "+self.eClass.name+" returning null").println;
	}
}

@cached
operation Any createTypeIfAbsent(){
		var originalTypeName = self.name;
		var type = types.get(originalTypeName);
		if(type.isUndefined()){
			type = new tm!Type;
			type.name = originalTypeName;
			var features = new List;
			for(feature in self.features){
				var f = new tm!Feature;
				f.name = feature.name;
				features.add(f);
			}
			type.features.addAll(features);
			types.put(type.name,type);
		}
		return type;	
}
