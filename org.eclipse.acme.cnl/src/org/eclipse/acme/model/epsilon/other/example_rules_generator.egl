[% for (sr in ScopedRules.all) { %]
for all [%=sr.scope.type.value.replace("_"," ")%]
[% for (r in sr.rules) { %]
[%=r.astRoot.flatten("")%]
[% } %]
[% } %]


[%
operation Expression flatten(ret) : String {
var r = ret;
//base case for all leaves (unary operators)
if(self.isKindOf(FeatureValue)){
r += self.feature.name;
if(self.scope.isDefined()){
r += " of " + self.scope.type;
}
}
else if(self.isKindOf(TypeExpression)){
r += self.feature.name + " is of type " + self.type;
}
else if(self.isKindOf(EmptyValue)){
r += "empty"; 
}
else if(self.isKindOf(BaseExpression)){
r += self.value;
}
//specific case for implies not being treated as a default binary operator
else if(self.isKindOf(LogicalExpression) and self.type.name.equals("implies")){
r += "if " + self.lhs.flatten(r) + " then " + self.rhs.flatten(r);
}
//default case for all other binary operators
else{
r += self.lhs.flatten(r) + " " + self.type.name.getName() + " " + self.rhs.flatten(r);
}
return r;
}

operation String getName() : String{
if(self.equals("isnot"))return "is not";
if(self.equals("gt"))return "is greater than";
if(self.equals("lt"))return "is less than";
if(self.equals("gte"))return "is greater than or equals";
if(self.equals("lte"))return "is less than or equals";
else return self;
}
%]