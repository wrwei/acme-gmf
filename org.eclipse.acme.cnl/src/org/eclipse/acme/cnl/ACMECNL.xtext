grammar org.eclipse.acme.ACMECNl with org.eclipse.xtext.common.Terminals

import "http://org.eclipse.acme/cnl" as cnl
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ConstrainedNaturalLanguageRules returns cnl::ConstrainedNaturalLanguageRules:
	rules+=(ScopedRules | MatchScopedRule)*
	metadata+=MetaData*;

//TODO consider using bigdecimal if precision is needed
terminal DECIMAL returns ecore::EDouble:
	('-')? ('0'..'9')+ '.' ('0'..'9')+;

//@override	to include negative numbers
@Override 
terminal INT returns ecore::EInt:
	('-')? ('0'..'9')+;

	//FIXME discuss how dates should be formatted
terminal DATE returns ecore::EDate:
	INT '-' INT '-' INT;

@Override 
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	|
	//define identifiers with `` or [] wrappers
	(('`' | '[')
	('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '`' | '[' | ']'))*
	('`' | ']'));

ScopedRules returns cnl::ScopedRules:
	(
		(
			(
				('for' 'all')|
				'in'|
				('in' ('a'|'an'))|
				('all' 'of' 'the' 'following' 'are'
					('mandatory' 'for'|'required' 'for'|'needed' 'for'|'obligatory' 'for'|
						'mandatory' 'in'|'required' 'in'|'needed' 'in'|'obligatory' 'in')
				'a'?)	
			)
			scope=ElementScope
		)|(
			('a'|'an') scope=ElementScope 'is'
		)
	)
	rules+=Rule+;

//MatchScopedRules returns cnl::MatchScopedRules:
//	'match for all' scope=ElementScope matches+=Rule+ 'then' rules+=Rule;

MatchScopedRule returns cnl::MatchScopedRule:
'find'
	matches+=MatchingRule+
'then'
	rule=Rule
;

MatchingRule returns cnl::MatchingRule:
	(variableName=ID 'in' scope=ElementScope 'where' astRoot=LogicalExpression)
	|
	('all' 'data' 'in' scope=ElementScope 'where' astRoot=LogicalExpression)
;

ElementScope returns cnl::ElementScope:
	type=[cnl::Type|ID];

Rule returns cnl::Rule:
	CNLRule|GPLRule
;

CNLRule returns cnl::CNLRule:
	('rule' name=ID)? astRoot=LogicalExpression ('error'? 'message' message=STRING)?;

GPLRule returns cnl::GPLRule:
EOLExpressionRule	
;

EOLExpressionRule returns cnl::EOLExpressionRule:
	('rule' name=ID)?
	'<EOLExpression>'
	code=STRING
	'</EOLExpression>'
	('error'? 'message' message=STRING)?
;

	//operator priority is not reflected here - we rely on execution engine ordering of logical operations
//TODO support brackets
LogicalExpression returns cnl::Expression:
	(
	ComparisonExpression 
	(
	//implies
	({cnl::ImpliesExpression.lhs=current} ('implies'|('only' 'if')) rhs=ComparisonExpression)
	|
	//reverse implies syntax
	({cnl::ImpliesExpression.rhs=current} ('when'|'if'|'where') lhs=ComparisonExpression)
	|
	//or
	({cnl::OrExpression.lhs=current} 'or' rhs=ComparisonExpression)
	|
	//xor
	({cnl::XorExpression.lhs=current} 'xor' rhs=ComparisonExpression)
	|
	//and
	({cnl::AndExpression.lhs=current} 'and' rhs=ComparisonExpression)
	|	
	//ifandonlyif
	({cnl::IfandonlyifExpression.lhs=current} ('iff'|('if' 'and' 'only' 'if')) rhs=ComparisonExpression)
	)*
	)
	|	
	//alternative syntaxes of implies
	({cnl::ImpliesExpression} ('if'|'when') ('the')? lhs=LogicalExpression 'then' rhs=LogicalExpression)
	|
	//alternative syntax of xor
	({cnl::XorExpression} 'either' lhs=LogicalExpression 'or' rhs=LogicalExpression)
	;

	//operator priority is not reflected here - we rely on execution engine ordering of arithmetic operations
//NB: comparison operators are commonly of equal priorities.
//TODO support brackets
ComparisonExpression returns cnl::Expression:
	DateExpression
	|
	 (
	//implied equality
	ArithmeticExpression 
	 (
	 ({cnl::EqualityExpression.lhs=current} rhs=(ExistanceValue))
	|
	//implied negation of equality
	 ({cnl::NegatedEqualityExpression.lhs=current} rhs=(EmptyValue))
	|	
	//equality
	 ({cnl::EqualityExpression.lhs=current} ('equals'|'is'|('must' 'be')) rhs=ArithmeticExpression)
	|
	//negated equality
	 ({cnl::NegatedEqualityExpression.lhs=current} (('is' 'not')|('cannot' 'be')) rhs=ArithmeticExpression)
	|
	//gt
	 ({cnl::GreaterThanExpression.lhs=current} ((('must' 'be')|'is') 'greater' 'than') rhs=ArithmeticExpression)
	|
	//lt
	 ({cnl::LessThanExpression.lhs=current} ((('must' 'be')|'is') 'less' 'than') rhs=ArithmeticExpression)
	|
	//gte
	 ({cnl::GTEExpression.lhs=current} (((('must' 'be')|'is') 'greater' 'than' 'or' 'equal' 'to')|((('must' 'be')|'is') 'greater' 'than' 'or' 'equals')) rhs=ArithmeticExpression)
	|
	//lte
	 ({cnl::LTEExpression.lhs=current} (((('must' 'be')|'is') 'less' 'than' 'or' 'equal' 'to')|((('must' 'be')|'is') 'less' 'than' 'or' 'equals')) rhs=ArithmeticExpression)
	)*
	)
	;
	
	//operator priority is not reflected here - we rely on execution engine ordering of arithmetic operations
//TODO support brackets
ArithmeticExpression returns cnl::Expression:
	BaseExpression ({cnl::ArithmeticExpression.lhs=current} type=ArithmeticOperations rhs=BaseExpression)*;

BaseExpression returns cnl::BaseExpression:
//primitives:
	TypeExpression | EmptyValue | StringValue | EnumValue |
	//features:	
	FeatureValue | UnscopedFeatureValue | VariableFeatureValue |
	//numbers:
	IntegerValue | DecimalValue | DateValue | NumericAggregation |
	//booleans:
	BooleanValue | UniquenessCheck | ValueContainment;

DateExpression returns cnl::DateExpression:
	//before
	({cnl::BeforeDateExpression} lhs=BaseExpression ( (('must' 'be')|('is'))? ('before'|'by') ) rhs=BaseExpression)
	|
	//after
	({cnl::AfterDateExpression} lhs=BaseExpression ( (('must' 'be')|('is'))? ('after'|('later' 'than')) ) rhs=BaseExpression)
	|
	//on or before
	({cnl::OnorbeforeDateExpression} lhs=BaseExpression ( (('must' 'be')|('is'))? (('before' 'or' 'by')|('on' 'or' 'before')|('before' 'or' 'equal' 'to')) ) rhs=BaseExpression)
	|
	//on or after
	({cnl::OnorafterDateExpression} lhs=BaseExpression ( (('must' 'be')|('is'))? (('after' 'or' 'by')|('on' 'or' 'after')|('after' 'or' 'equal' 'to')) ) rhs=BaseExpression)	
	 ;

NumericAggregation returns cnl::NumericAggregation:
	NumericSummation | NumericAverage | NumericMaximum | NumericMinimum;

NumericSummation returns cnl::NumericSummation:
//sum Market_Value_of_Securities of AFSFVO
	'the' 'sum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);

NumericAverage returns cnl::NumericAverage:
	'the' 'average' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);

NumericMaximum returns cnl::NumericMaximum:
	'the' 'maximum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);

NumericMinimum returns cnl::NumericMinimum:
	'the' 'minimum' 'of'? feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue);

ValueContainment returns cnl::ValueContainment:
	feature=(FeatureValue | UnscopedFeatureValue | VariableFeatureValue) ('is' 'either') collection+=BaseExpression ('or'
	collection+=BaseExpression)*;

UniquenessCheck returns cnl::UniquenessCheck:
	('any' 'combination' 'of' 'values' 'in')?
	features+=FeatureValue ((','|'and') features+=FeatureValue)* 'must' 'be' 'unique';

TypeExpression returns cnl::TypeExpression:
	PrimitiveTypeExpression | EnumTypeExpression;

FeatureValue returns cnl::FeatureValue:
	'the'? feature=[cnl::Feature|ID];

VariableFeatureValue returns cnl::FeatureValue:
	feature=[cnl::Feature|ID] 'from' variableName=ID;

UnscopedFeatureValue returns cnl::FeatureValue:
	feature=[cnl::Feature|ID] 'of' scope=ElementScope;

PrimitiveTypeExpression returns cnl::PrimitiveTypeExpression:
	feature=FeatureValue (('is' 'of' 'type')|('is' 'a')|('must' 'be' ('a'|'in')?)) type=PrimitiveTypes;

EnumTypeExpression returns cnl::EnumTypeExpression:
	feature=FeatureValue (('is' 'of' 'type')|('is' 'a')|('must' 'be' ('a'|'in')?)) type=[cnl::Enum|ID];

StringValue returns cnl::StringValue:
	value=STRING;

//the 'Level 1' value of 'AFS'
EnumValue returns cnl::EnumValue:
	enumeration=[cnl::Enum|ID] ':' value=STRING
	|
	'the' enumeration=[cnl::Enum|ID] 'value' 'of' value=STRING; 

BooleanValue returns cnl::BooleanValue:
	{cnl::BooleanValue} (value?='true' | 'false');

IntegerValue returns cnl::IntegerValue:
	value=INT;

DecimalValue returns cnl::DecimalValue:
	value=DECIMAL;

DateValue returns cnl::DateValue:
	value=DATE;

MetaData returns cnl::MetaData:
	Types | Enumerations;

Types returns cnl::Types:
	'types' legalValues+=TypeValue (',' legalValues+=TypeValue)*;

Enumerations returns cnl::Enumerations:
	'enumerations' legalValues+=Enum (',' legalValues+=Enum)*;

Enum returns cnl::Enum:
	name=ID;

TypeValue returns cnl::Type:
	name=ID ('{' (features+=Feature (',' features+=Feature)*)? '}')?;

Feature returns cnl::Feature:
	name=ID;

EmptyValue returns cnl::EmptyValue:
	{cnl::EmptyValue} ('must' 'be')? ('empty');

ExistanceValue returns cnl::ExistanceValue:
	{cnl::ExistanceValue} ('exists'|('must' 'exist'));

enum ArithmeticOperations returns cnl::ArithmeticOperations:
	plus='+' | minus='-' | times='*' | div='/';

enum PrimitiveTypes returns cnl::PrimitiveTypes:
	String='String' | Boolean='Boolean' | Integer='Integer' | Decimal='Decimal' | Date='Date';	

//others:
//‘Carrying amount’ is a decimal number
//‘Carrying amount’ must be a decimal number
//‘Carrying amount’ is a decimal
//‘Carrying amount’ must be a decimal	
	