/**
 */
package gsn.provider;

import argumentation.ArgumentPackage;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import argumentation.Argumentation_Package;
import argumentation.util.Argumentation_Switch;
import assuranceCase.AssuranceCasePackage;
import assuranceCase.AssuranceCase_Package;
import assuranceCase.util.AssuranceCase_Switch;
import base.Base_Package;
import base.ExpressionLangString;
import base.util.Base_Switch;
import gsn.Gsn_Factory;
import gsn.util.Gsn_AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Gsn_ItemProviderAdapterFactory extends Gsn_AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Gsn_ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.ContractModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContractModuleItemProvider contractModuleItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.ContractModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContractModuleAdapter() {
		if (contractModuleItemProvider == null) {
			contractModuleItemProvider = new ContractModuleItemProvider(this);
		}

		return contractModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.ChoiceNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceNodeItemProvider choiceNodeItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.ChoiceNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceNodeAdapter() {
		if (choiceNodeItemProvider == null) {
			choiceNodeItemProvider = new ChoiceNodeItemProvider(this);
		}

		return choiceNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.Strategy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrategyItemProvider strategyItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.Strategy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrategyAdapter() {
		if (strategyItemProvider == null) {
			strategyItemProvider = new StrategyItemProvider(this);
		}

		return strategyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.Justification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JustificationItemProvider justificationItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.Justification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJustificationAdapter() {
		if (justificationItemProvider == null) {
			justificationItemProvider = new JustificationItemProvider(this);
		}

		return justificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.Assumption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssumptionItemProvider assumptionItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.Assumption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssumptionAdapter() {
		if (assumptionItemProvider == null) {
			assumptionItemProvider = new AssumptionItemProvider(this);
		}

		return assumptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.AwayGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AwayGoalItemProvider awayGoalItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.AwayGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAwayGoalAdapter() {
		if (awayGoalItemProvider == null) {
			awayGoalItemProvider = new AwayGoalItemProvider(this);
		}

		return awayGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.AwaySolution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AwaySolutionItemProvider awaySolutionItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.AwaySolution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAwaySolutionAdapter() {
		if (awaySolutionItemProvider == null) {
			awaySolutionItemProvider = new AwaySolutionItemProvider(this);
		}

		return awaySolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.AwayContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AwayContextItemProvider awayContextItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.AwayContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAwayContextAdapter() {
		if (awayContextItemProvider == null) {
			awayContextItemProvider = new AwayContextItemProvider(this);
		}

		return awayContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.ModuleReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleReferenceItemProvider moduleReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.ModuleReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleReferenceAdapter() {
		if (moduleReferenceItemProvider == null) {
			moduleReferenceItemProvider = new ModuleReferenceItemProvider(this);
		}

		return moduleReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.ContractModuleReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContractModuleReferenceItemProvider contractModuleReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.ContractModuleReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContractModuleReferenceAdapter() {
		if (contractModuleReferenceItemProvider == null) {
			contractModuleReferenceItemProvider = new ContractModuleReferenceItemProvider(this);
		}

		return contractModuleReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.Solution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionItemProvider solutionItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.Solution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionAdapter() {
		if (solutionItemProvider == null) {
			solutionItemProvider = new SolutionItemProvider(this);
		}

		return solutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.SupportedBy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupportedByItemProvider supportedByItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.SupportedBy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupportedByAdapter() {
		if (supportedByItemProvider == null) {
			supportedByItemProvider = new SupportedByItemProvider(this);
		}

		return supportedByItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gsn.InContextOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InContextOfItemProvider inContextOfItemProvider;

	/**
	 * This creates an adapter for a {@link gsn.InContextOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInContextOfAdapter() {
		if (inContextOfItemProvider == null) {
			inContextOfItemProvider = new InContextOfItemProvider(this);
		}

		return inContextOfItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (contractModuleItemProvider != null) contractModuleItemProvider.dispose();
		if (choiceNodeItemProvider != null) choiceNodeItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
		if (strategyItemProvider != null) strategyItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (justificationItemProvider != null) justificationItemProvider.dispose();
		if (assumptionItemProvider != null) assumptionItemProvider.dispose();
		if (awayGoalItemProvider != null) awayGoalItemProvider.dispose();
		if (awaySolutionItemProvider != null) awaySolutionItemProvider.dispose();
		if (awayContextItemProvider != null) awayContextItemProvider.dispose();
		if (moduleReferenceItemProvider != null) moduleReferenceItemProvider.dispose();
		if (contractModuleReferenceItemProvider != null) contractModuleReferenceItemProvider.dispose();
		if (solutionItemProvider != null) solutionItemProvider.dispose();
		if (supportedByItemProvider != null) supportedByItemProvider.dispose();
		if (inContextOfItemProvider != null) inContextOfItemProvider.dispose();
	}


	//	/**
//	 * A child creation extender for the {@link Argumentation_Package}.
//	 * <!-- begin-user-doc -->
//	 * <!-- end-user-doc -->
//	 * @generated
//	 */
//	public static class Argumentation_ChildCreationExtender implements IChildCreationExtender {
//		/**
//		 * The switch for creating child descriptors specific to each extended class.
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		protected static class CreationSwitch extends Argumentation_Switch<Object> {
//			/**
//			 * The child descriptors being populated.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected List<Object> newChildDescriptors;
//
//			/**
//			 * The domain in which to create the children.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected EditingDomain editingDomain;
//
//			/**
//			 * Creates the a switch for populating child descriptors in the given domain.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
//				this.newChildDescriptors = newChildDescriptors;
//				this.editingDomain = editingDomain;
//			}
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			@Override
//			public Object caseArgumentPackage(ArgumentPackage object) {
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createModule()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createContractModule()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createChoiceNode()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createContext()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createStrategy()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createGoal()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createJustification()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createAssumption()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createAwayGoal()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createAwaySolution()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createAwayContext()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createModuleReference()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createContractModuleReference()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createSolution()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createSupportedBy()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Gsn_Factory.eINSTANCE.createInContextOf()));
//
//				return null;
//			}
// 
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected CommandParameter createChildParameter(Object feature, Object child) {
//				return new CommandParameter(null, feature, child);
//			}
//
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
//			ArrayList<Object> result = new ArrayList<Object>();
//			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
//			return result;
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public ResourceLocator getResourceLocator() {
//			return GsnEditPlugin.INSTANCE;
//		}
//	}

//	/**
//	 * A child creation extender for the {@link Base_Package}.
//	 * <!-- begin-user-doc -->
//	 * <!-- end-user-doc -->
//	 * @generated
//	 */
//	public static class Base_ChildCreationExtender implements IChildCreationExtender {
//		/**
//		 * The switch for creating child descriptors specific to each extended class.
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		protected static class CreationSwitch extends Base_Switch<Object> {
//			/**
//			 * The child descriptors being populated.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected List<Object> newChildDescriptors;
//
//			/**
//			 * The domain in which to create the children.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected EditingDomain editingDomain;
//
//			/**
//			 * Creates the a switch for populating child descriptors in the given domain.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
//				this.newChildDescriptors = newChildDescriptors;
//				this.editingDomain = editingDomain;
//			}
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			@Override
//			public Object caseExpressionLangString(ExpressionLangString object) {
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createModule()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createContractModule()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createChoiceNode()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createContext()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createStrategy()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createGoal()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createJustification()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createAssumption()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createAwayGoal()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createAwaySolution()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createAwayContext()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createModuleReference()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createContractModuleReference()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createSolution()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createSupportedBy()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Gsn_Factory.eINSTANCE.createInContextOf()));
//
//				return null;
//			}
// 
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected CommandParameter createChildParameter(Object feature, Object child) {
//				return new CommandParameter(null, feature, child);
//			}
//
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
//			ArrayList<Object> result = new ArrayList<Object>();
//			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
//			return result;
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public ResourceLocator getResourceLocator() {
//			return GsnEditPlugin.INSTANCE;
//		}
//	}
	
	/**
	 * A child creation extender for the {@link Argumentation_Package}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public static class Assurancecase_ChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated NOT
		 */
		protected static class CreationSwitch extends AssuranceCase_Switch<Object> {
			
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			
			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated NOT
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			
			@Override
			public Object caseAssuranceCasePackage(AssuranceCasePackage object) {

				newChildDescriptors.add
					(createChildParameter
						(AssuranceCase_Package.Literals.ASSURANCE_CASE_PACKAGE__ARGUMENT_PACKAGE,
						 Gsn_Factory.eINSTANCE.createModule()));

				newChildDescriptors.add
					(createChildParameter
						(AssuranceCase_Package.Literals.ASSURANCE_CASE_PACKAGE__ARGUMENT_PACKAGE,
						 Gsn_Factory.eINSTANCE.createContractModule()));

				return null;
			
			}
			
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return GsnEditPlugin.INSTANCE;
		}
	}


}
