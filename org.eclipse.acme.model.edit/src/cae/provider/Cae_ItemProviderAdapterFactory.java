/**
 */
package cae.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import argumentation.Argumentation_Package;
import assuranceCase.AssuranceCasePackage;
import assuranceCase.AssuranceCase_Package;
import assuranceCase.util.AssuranceCase_Switch;
import cae.Cae_Factory;
import cae.util.Cae_AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Cae_ItemProviderAdapterFactory extends Cae_AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Cae_ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.CAEModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAEModuleItemProvider caeModuleItemProvider;

	/**
	 * This creates an adapter for a {@link cae.CAEModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAEModuleAdapter() {
		if (caeModuleItemProvider == null) {
			caeModuleItemProvider = new CAEModuleItemProvider(this);
		}

		return caeModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.CAEModuleInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAEModuleInterfaceItemProvider caeModuleInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link cae.CAEModuleInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAEModuleInterfaceAdapter() {
		if (caeModuleInterfaceItemProvider == null) {
			caeModuleInterfaceItemProvider = new CAEModuleInterfaceItemProvider(this);
		}

		return caeModuleInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.CAEModuleBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAEModuleBindingItemProvider caeModuleBindingItemProvider;

	/**
	 * This creates an adapter for a {@link cae.CAEModuleBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAEModuleBindingAdapter() {
		if (caeModuleBindingItemProvider == null) {
			caeModuleBindingItemProvider = new CAEModuleBindingItemProvider(this);
		}

		return caeModuleBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.CAEClaim} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CAEClaimItemProvider caeClaimItemProvider;

	/**
	 * This creates an adapter for a {@link cae.CAEClaim}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCAEClaimAdapter() {
		if (caeClaimItemProvider == null) {
			caeClaimItemProvider = new CAEClaimItemProvider(this);
		}

		return caeClaimItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.Argument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentItemProvider argumentItemProvider;

	/**
	 * This creates an adapter for a {@link cae.Argument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentAdapter() {
		if (argumentItemProvider == null) {
			argumentItemProvider = new ArgumentItemProvider(this);
		}

		return argumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.Evidence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvidenceItemProvider evidenceItemProvider;

	/**
	 * This creates an adapter for a {@link cae.Evidence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvidenceAdapter() {
		if (evidenceItemProvider == null) {
			evidenceItemProvider = new EvidenceItemProvider(this);
		}

		return evidenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.IsSubClaimOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsSubClaimOfItemProvider isSubClaimOfItemProvider;

	/**
	 * This creates an adapter for a {@link cae.IsSubClaimOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsSubClaimOfAdapter() {
		if (isSubClaimOfItemProvider == null) {
			isSubClaimOfItemProvider = new IsSubClaimOfItemProvider(this);
		}

		return isSubClaimOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.Supports} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupportsItemProvider supportsItemProvider;

	/**
	 * This creates an adapter for a {@link cae.Supports}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupportsAdapter() {
		if (supportsItemProvider == null) {
			supportsItemProvider = new SupportsItemProvider(this);
		}

		return supportsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cae.IsEvidenceFor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsEvidenceForItemProvider isEvidenceForItemProvider;

	/**
	 * This creates an adapter for a {@link cae.IsEvidenceFor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsEvidenceForAdapter() {
		if (isEvidenceForItemProvider == null) {
			isEvidenceForItemProvider = new IsEvidenceForItemProvider(this);
		}

		return isEvidenceForItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (caeModuleItemProvider != null) caeModuleItemProvider.dispose();
		if (caeModuleInterfaceItemProvider != null) caeModuleInterfaceItemProvider.dispose();
		if (caeModuleBindingItemProvider != null) caeModuleBindingItemProvider.dispose();
		if (caeClaimItemProvider != null) caeClaimItemProvider.dispose();
		if (argumentItemProvider != null) argumentItemProvider.dispose();
		if (evidenceItemProvider != null) evidenceItemProvider.dispose();
		if (isSubClaimOfItemProvider != null) isSubClaimOfItemProvider.dispose();
		if (supportsItemProvider != null) supportsItemProvider.dispose();
		if (isEvidenceForItemProvider != null) isEvidenceForItemProvider.dispose();
	}

//	/**
//	 * A child creation extender for the {@link Argumentation_Package}.
//	 * <!-- begin-user-doc -->
//	 * <!-- end-user-doc -->
//	 * @generated
//	 */
//	public static class Argumentation_ChildCreationExtender implements IChildCreationExtender {
//		/**
//		 * The switch for creating child descriptors specific to each extended class.
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		protected static class CreationSwitch extends Argumentation_Switch<Object> {
//			/**
//			 * The child descriptors being populated.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected List<Object> newChildDescriptors;
//
//			/**
//			 * The domain in which to create the children.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected EditingDomain editingDomain;
//
//			/**
//			 * Creates the a switch for populating child descriptors in the given domain.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
//				this.newChildDescriptors = newChildDescriptors;
//				this.editingDomain = editingDomain;
//			}
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			@Override
//			public Object caseArgumentPackage(ArgumentPackage object) {
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createCAEModule()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createCAEModuleInterface()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createCAEModuleBinding()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createCAEClaim()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createArgument()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createEvidence()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createIsSubClaimOf()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createSupports()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Argumentation_Package.Literals.ARGUMENT_PACKAGE__ARGUMENTATION_ELEMENT,
//						 Cae_Factory.eINSTANCE.createIsEvidenceFor()));
//
//				return null;
//			}
// 
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected CommandParameter createChildParameter(Object feature, Object child) {
//				return new CommandParameter(null, feature, child);
//			}
//
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
//			ArrayList<Object> result = new ArrayList<Object>();
//			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
//			return result;
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public ResourceLocator getResourceLocator() {
//			return CaeEditPlugin.INSTANCE;
//		}
//	}

//	/**
//	 * A child creation extender for the {@link Base_Package}.
//	 * <!-- begin-user-doc -->
//	 * <!-- end-user-doc -->
//	 * @generated
//	 */
//	public static class Base_ChildCreationExtender implements IChildCreationExtender {
//		/**
//		 * The switch for creating child descriptors specific to each extended class.
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		protected static class CreationSwitch extends Base_Switch<Object> {
//			/**
//			 * The child descriptors being populated.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected List<Object> newChildDescriptors;
//
//			/**
//			 * The domain in which to create the children.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected EditingDomain editingDomain;
//
//			/**
//			 * Creates the a switch for populating child descriptors in the given domain.
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
//				this.newChildDescriptors = newChildDescriptors;
//				this.editingDomain = editingDomain;
//			}
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			@Override
//			public Object caseExpressionLangString(ExpressionLangString object) {
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createCAEModule()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createCAEModuleInterface()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createCAEModuleBinding()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createCAEClaim()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createArgument()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createEvidence()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createIsSubClaimOf()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createSupports()));
//
//				newChildDescriptors.add
//					(createChildParameter
//						(Base_Package.Literals.EXPRESSION_LANG_STRING__EXPRESSION,
//						 Cae_Factory.eINSTANCE.createIsEvidenceFor()));
//
//				return null;
//			}
// 
//			/**
//			 * <!-- begin-user-doc -->
//			 * <!-- end-user-doc -->
//			 * @generated
//			 */
//			protected CommandParameter createChildParameter(Object feature, Object child) {
//				return new CommandParameter(null, feature, child);
//			}
//
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
//			ArrayList<Object> result = new ArrayList<Object>();
//			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
//			return result;
//		}
//
//		/**
//		 * <!-- begin-user-doc -->
//		 * <!-- end-user-doc -->
//		 * @generated
//		 */
//		public ResourceLocator getResourceLocator() {
//			return CaeEditPlugin.INSTANCE;
//		}
//	}

	/**
	 * A child creation extender for the {@link Argumentation_Package}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Argumentation_ChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends AssuranceCase_Switch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			
			
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseAssuranceCasePackage(AssuranceCasePackage object) {
				newChildDescriptors.add
					(createChildParameter
						(AssuranceCase_Package.Literals.ASSURANCE_CASE_PACKAGE__ARGUMENT_PACKAGE,
						 Cae_Factory.eINSTANCE.createCAEModule()));

				newChildDescriptors.add
					(createChildParameter
						(AssuranceCase_Package.Literals.ASSURANCE_CASE_PACKAGE__ARGUMENT_PACKAGE,
						 Cae_Factory.eINSTANCE.createCAEModuleInterface()));

				newChildDescriptors.add
					(createChildParameter
						(AssuranceCase_Package.Literals.ASSURANCE_CASE_PACKAGE__ARGUMENT_PACKAGE,
						 Cae_Factory.eINSTANCE.createCAEModuleBinding()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return CaeEditPlugin.INSTANCE;
		}
	}
}
